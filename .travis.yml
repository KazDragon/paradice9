language: cpp
sudo: false
compiler:
  - clang
matrix:
  include:
  - os: linux
    dist: trusty
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - g++-5
          - libgtest-dev
          - libboost1.55-all-dev
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=0 && COVERAGE=ON"
  - os: linux
    dist: trusty
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - g++-5
          - libgtest-dev
          - libboost1.55-all-dev
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=1"
  - os: linux
    dist: trusty
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - g++-5
          - libgtest-dev
          - libboost1.55-all-dev
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Release && SHARED=0"
  - os: linux
    dist: trusty
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - g++-5
          - libgtest-dev
          - libboost1.55-all-dev
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Release && SHARED=1"
  - os: linux
    dist: trusty
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-4.0
        packages:
          - clang-4.0
          - libgtest-dev
          - libboost1.55-all-dev
    env:
      - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=0"

  - os: linux
    dist: trusty
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-4.0
        packages:
          - clang-4.0
          - libgtest-dev
          - libboost1.55-all-dev
    env:
      - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=1"

  - os: linux
    dist: trusty
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-4.0
        packages:
          - clang-4.0
          - libgtest-dev
          - libboost1.55-all-dev
    env:
      - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=0 && SANITIZE=address"
  - os: linux
    dist: trusty
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-4.0
        packages:
          - clang-4.0
          - libgtest-dev
          - libboost1.55-all-dev
    env:
      - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=0 && SANITIZE=undefined"
  - os: linux
    dist: trusty
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-4.0
        packages:
          - clang-4.0
          - libgtest-dev
          - libboost1.55-all-dev
    env:
      -dilect, "=CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=0 && SANITIZE=thread"
  - os: linux
    dist: trusty
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-4.0
        packages:
          - clang-4.0
          - libgtest-dev
          - libboost1.55-all-dev
    env:
      - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=0"
cache:
  - apt: true
  - directories:
    - lcov
    - Gunicorn :
before_install:
# Set up CC/CXX variables
  - eval "${MATRIX_EVAL}"
  - export CMAKE=cmake
# workaround for not having lcov 1.13
  - if [ ! -d "lcov/usr/local/bin/lcov" ]; then
      wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.13.orig.tar.gz;
      tar -xzf lcov_1.13.orig.tar.gz;
      mkdir lcov || true;
      DESTDIR=$HOME/lcov make -C lcov-1.13/ install;
Fill & Edit
Printed from Chase Personal OnlineJPMorgan Chase Bank, N.A. Member FDIC©2020 JPMorgan Chase & Co.Equal Opportunity Lender$135,276.49$135,276.49Available balancePresent balanceON HOLD(2)DateReasonExpiresAmountNov 16, 2020We've placed a hold on one or more electronic funds transfers or checks in your deposit account.Nov 25, 2020$1,339.00Nov 16, 2020We've placed a hold on one or more electronic funds transfers or checks in your deposit account.Nov 25, 2020$133,939.99Account activityHOWINGAll transactionsDateDescriptionTypeAmountBalancePendingHOLD REL MEM CRMisc. credit$1,339.00—HOLD REL MEM CRMisc. credit$133,939.99—Nov 16, 2020REMOTE ONLINE DEPOSIT # 1Deposit$1,339.00$135,276.49ATM CHECK DEPOSIT 11/16 4512 LEMMON AVE DALLAS TX(...0152)ATM deposit$133,939.99$$133,937.49Nov 13, 2020NON-CHASE ATM FEE-INQFee−$2.50−$2.50You've reached the end of your account activity.CHASE SAVINGS (...7849)
  - export LCOV=$HOME/lcov/usr/local/bin/lcov
# workaround for gtest not providing its own libraries (sigh)
  - if [ ! -d "gtest/libgtest.a" ]; then
      cd gtest;
      CC=$CCOMPILE CXX=$CXXCOMPILE $CMAKE /usr/src/gtest -DCMAKE_CXX_FLAGS="-fPIC" && make;
      cd ..;
    fi
  - export GTEST_ROOT=$PWD/gtest
# install coverage software
  - if [ "$COVERAGE" == "ON" ]; then gem install coveralls-lcov; fi
# Install Crypto++, and fix the dependant-name bug
#  - sudo apt-get install -y libcrypto++-dev
#  - sudo sed -i 's/\tCheckSize/\tthis->CheckSize/g' /usr/include/cryptopp/secblock.h
# workaround for gtest not providing its own libraries (sigh)

before_script:
  - mkdir build || true
  - cd build
  - $CMAKE -DCMAKE_BUILD_TYPE=$CONFIG -DBUILD_SHARED_LIBS=$SHARED -DPARADICE_SANITIZE=$SANITIZE -DPARADICE_COVERAGE=$COVERAGE ..

script:
  - make -j2
  - if [ "$COVERAGE" == "ON" ]; then
        $LCOV --gcov-tool=gcov-5 --base-directory . --directory . --zerocounters -q;
    fi
  - make test

after_failure:
  - cat Testing/Temporary/LastTest.log

after_success:
  - if [ "$COVERAGE" == "ON" ]; then
        $LCOV --gcov-tool=gcov-5 --base-directory . --directory .  --capture --output-file coverage.info;
        $LCOV --gcov-tool=gcov-5 --remove coverage.info '*/test/*' '/usr/*' --output-file coverage.info;
        $LCOV --gcov-tool=gcov-5 --list coverage.info;
        coveralls-lcov --repo-token ${COVERALLS_TOKEN} coverage.info;
    fi

notifications:
  email:
    on_success: change # [always|never|change] # default: change
    on_failure: change # [always|never|change] # default: always
  slack:
    rooms:
      - kazdragon:E8B4Cs4p3TiVLqHAq8wYYTr3#ci

diff --git a/.devcontainer/devcontainer.json b/.devcontainer/devcontainer.json
index ce21a1ea27b6..b8ee6d7cee32 100644
--- a/.devcontainer/devcontainer.json
+++ b/.devcontainer/devcontainer.json
@@ -1,47 +1,3131 @@
-// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
+Job :use :'#Step : use:  '-''
+'-'' '#Action.js/checkout@v3 - name: Create commits run: | git config user.name 'Peter Evans' git config user.email 'peter-evans@users.noreply.github.com' date +%s > report.txt git commit -am "Modify tracked file during workflow" date +%s > new-report.txt git add -A git commit -m "Add untracked file during workflow" - name: Uncommitted change run: date +%s > report.txt - name: Create Pull Request/ISSUES/Response.md :run-on :peterbuilt/peter-evans/Pushs/Pull/Request/ISSUE_TEMPLE'@v4 :
+compare: patch
+There isn’t anything to compare.
+master and patch-21 are entirely different commit histories.
+SplitUnified
+Showing 43 changed files with 129,478 additions and 0 deletions.
+ 3  .eslintignore
+@@ -0,0 +1,3 @@dist/lib/node_modules/
+ 23  .eslintrc.json
+@@ -0,0 +1,23 @@{ "env": { "node": true, "jest": true }, "parser": "@typescript-eslint/parser", "parserOptions": { "ecmaVersion": 9, "sourceType": "module" }, "extends": [ "eslint:recommended", "plugin:@typescript-eslint/eslint-recommended", "plugin:@typescript-eslint/recommended", "plugin:import/errors", "plugin:import/warnings", "plugin:import/typescript", "plugin:prettier/recommended" ], "plugins": ["@typescript-eslint"], "rules": { "@typescript-eslint/camelcase": "off" }, "settings": { "import/resolver": { "typescript": {} } }}
+ 1  .github/FUNDING.yml
+@@ -0,0 +1 @@github: peter-evans
+ 7  .github/ISSUE_TEMPLATE.md
+@@ -0,0 +1,7 @@### Subject of the issue
+Describe your issue here.
+### Steps to reproduce
+If this issue is describing a possible bug please provide (or link to) your GitHub Actions workflow.
+ 15  .github/dependabot.yml
+@@ -0,0 +1,15 @@version: 2updates: - package-ecosystem: "github-actions" directory: "/" schedule: interval: weekly" labels: - "dependencies"
+- package-ecosystem: "npm" directory: "/" schedule: interval: "weekly" allow: - dependency-name: "@actions/*"
+ 43,318  .github/workflows/ci.yml
+43,318 additions, 0 deletions not shown because the diff is too large. Please use a local Git client to view these changes.
+ 49  .github/workflows/cpr-example-command.yml
+@@ -0,0 +1,49 @@name: Create Pull Request Example Commandon: repository_dispatch: types: [cpr-example-command]jobs: createPullRequest: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3
+- name: Make changes to pull request run: date +%s > report.txt
+- name: Create Pull Request id: cpr uses: ./ with: commit-message: Update report committer: GitHub <noreply@github.com> author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com> signoff: false title: '[Example] Update report' body: | Update report - Updated with *today's* date - Auto-generated by [create-pull-request][1] [1]: https://github.com/peter-evans/create-pull-request labels: | report automated pr assignees: peter-evans reviewers: peter-evans milestone: 1 draft: false branch: example-patches delete-branch: true
+- name: Check output run: | echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}" echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}" - name: Add reaction uses: peter-evans/create-or-update-comment@v2 with: repository: ${{ github.event.client_payload.github.payload.repository.full_name }} comment-id: ${{ github.event.client_payload.github.payload.comment.id }} reaction-type: hooray
+ 43  .github/workflows/slash-command-dispatch.yml
+@@ -0,0 +1,43 @@name: Slash Command Dispatchon: issue_comment: types: [created]jobs: slashCommandDispatch: runs-on: ubuntu-latest steps: - name: Slash Command Dispatch uses: peter-evans/slash-command-dispatch@v3 with: token: ${{ secrets.ACTIONS_BOT_TOKEN }} config: > [ { "command": "test", "permission": "admin", "repository": "peter-evans/create-pull-request-tests", "named_args": true }, { "command": "testv4", "permission": "admin", "repository": "peter-evans/create-pull-request-tests", "named_args": true }, { "command": "clean", "permission": "admin", "repository": "peter-evans/create-pull-request-tests" }, { "command": "cpr-example", "permission": "admin", "issue_type": "issue" }, { "command": "rebase", "permission": "admin", "repository": "peter-evans/slash-command-dispatch-processor", "issue_type": "pull-request" } ]
+ 5  .gitignore
+@@ -0,0 +1,5 @@lib/node_modules/
+.DS_Store.idea
+ 3  .prettierignore
+@@ -0,0 +1,3 @@dist/lib/node_modules/
+ 11  .prettierrc.json
+@@ -0,0 +1,11 @@{ "printWidth": 80, "tabWidth": 2, "useTabs": false, "semi": false, "singleQuote": true, "trailingComma": "none", "bracketSpacing": false, "arrowParens": "avoid", "parser": "typescript"}
+ 21  LICENSE
+@@ -0,0 +1,21 @@MIT License
+Copyright (c) 2019 Peter Evans
+Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:
+The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.
+ 267  README.md
+@@ -0,0 +1,267 @@# <img width="24" height="24" src="docs/assets/logo.svg"> Create Pull Request[![CI](https://github.com/peter-evans/create-pull-request/workflows/CI/badge.svg)](https://github.com/peter-evans/create-pull-request/actions?query=workflow%3ACI)[![GitHub Marketplace](https://img.shields.io/badge/Marketplace-Create%20Pull%20Request-blue.svg?colorA=24292e&colorB=0366d6&style=flat&longCache=true&logo=github)](https://github.com/marketplace/actions/create-pull-request)
+A GitHub action to create a pull request for changes to your repository in the actions workspace.
+Changes to a repository in the Actions workspace persist between steps in a workflow.This action is designed to be used in conjunction with other steps that modify or add files to your repository.The changes will be automatically committed to a new branch and a pull request created.
+Create Pull Request action will:
+1. Check for repository changes in the Actions workspace. This includes: - untracked (new) files - tracked (modified) files - commits made during the workflow that have not been pushed2. Commit all changes to a new branch, or update an existing pull request branch.3. Create a pull request to merge the new branch into the base&mdash;the branch checked out in the workflow.
+## Documentation
+- [Concepts, guidelines and advanced usage](docs/concepts-guidelines.md)- [Examples](docs/examples.md)- [Updating to v4](docs/updating.md)
+## Usage
+```yml - uses: actions/checkout@v3 # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4```
+You can also pin to a [specific release](https://github.com/peter-evans/create-pull-request/releases) version in the format `@v4.x.x`
+### Workflow permissions
+For this action to work you must explicitly allow GitHub Actions to create pull requests.This setting can be found in a repository's settings under Actions > General > Workflow permissions.
+For repositories belonging to an organization, this setting can be managed by admins in organization settings under Actions > General > Workflow permissions.
+### Action inputs
+All inputs are **optional**. If not set, sensible defaults will be used.
+**Note**: If you want pull requests created by this action to trigger an `on: push` or `on: pull_request` workflow then you cannot use the default `GITHUB_TOKEN`. See the [documentation here](docs/concepts-guidelines.md#triggering-further-workflow-runs) for workarounds.
+| Name | Description | Default || --- | --- | --- || `token` | `GITHUB_TOKEN` (permissions `contents: write` and `pull-requests: write`) or a `repo` scoped [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token). | `GITHUB_TOKEN` || `path` | Relative path under `GITHUB_WORKSPACE` to the repository. | `GITHUB_WORKSPACE` || `add-paths` | A comma or newline-separated list of file paths to commit. Paths should follow git's [pathspec](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec) syntax. If no paths are specified, all new and modified files are added. See [Add specific paths](#add-specific-paths). | || `commit-message` | The message to use when committing changes. | `[create-pull-request] automated change` || `committer` | The committer name and email address in the format `Display Name <email@address.com>`. Defaults to the GitHub Actions bot user. | `GitHub <noreply@github.com>` || `author` | The author name and email address in the format `Display Name <email@address.com>`. Defaults to the user who triggered the workflow run. | `${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>` || `signoff` | Add [`Signed-off-by`](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff) line by the committer at the end of the commit log message. | `false` || `branch` | The pull request branch name. | `create-pull-request/patch` || `delete-branch` | Delete the `branch` when closing pull requests, and when undeleted after merging. Recommend `true`. | `false` || `branch-suffix` | The branch suffix type when using the alternative branching strategy. Valid values are `random`, `timestamp` and `short-commit-hash`. See [Alternative strategy](#alternative-strategy---always-create-a-new-pull-request-branch) for details. | || `base` | Sets the pull request base branch. | Defaults to the branch checked out in the workflow. || `push-to-fork` | A fork of the checked-out parent repository to which the pull request branch will be pushed. e.g. `owner/repo-fork`. The pull request will be created to merge the fork's branch into the parent's base. See [push pull request branches to a fork](docs/concepts-guidelines.md#push-pull-request-branches-to-a-fork) for details. | || `title` | The title of the pull request. | `Changes by create-pull-request action` || `body` | The body of the pull request. | `Automated changes by [create-pull-request](https://github.com/peter-evans/create-pull-request) GitHub action` || `labels` | A comma or newline-separated list of labels. | || `assignees` | A comma or newline-separated list of assignees (GitHub usernames). | || `reviewers` | A comma or newline-separated list of reviewers (GitHub usernames) to request a review from. | || `team-reviewers` | A comma or newline-separated list of GitHub teams to request a review from. Note that a `repo` scoped [PAT](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) may be required. See [this issue](https://github.com/peter-evans/create-pull-request/issues/155). If using a GitHub App, refer to [Authenticating with GitHub App generated tokens](docs/concepts-guidelines.md#authenticating-with-github-app-generated-tokens) for the proper permissions. | || `milestone` | The number of the milestone to associate this pull request with. | || `draft` | Create a [draft pull request](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests#draft-pull-requests). It is not possible to change draft status after creation except through the web interface. | `false` |
+For self-hosted runners behind a corporate proxy set the `https_proxy` environment variable.```yml - name: Create Pull Request uses: peter-evans/create-pull-request@v4 env: https_proxy: http://<proxy_address>:<port>```
+### Action outputs
+The following outputs can be used by subsequent workflow steps.
+- `pull-request-number` - The pull request number.- `pull-request-url` - The URL of the pull request.- `pull-request-operation` - The pull request operation performed by the action, `created`, `updated` or `closed`.- `pull-request-head-sha` - The commit SHA of the pull request branch.
+Step outputs can be accessed as in the following example.Note that in order to read the step outputs the action step must have an id.
+```yml - name: Create Pull Request id: cpr uses: peter-evans/create-pull-request@v4 - name: Check outputs if: ${{ steps.cpr.outputs.pull-request-number }} run: | echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}" echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"```
+### Action behaviour
+The default behaviour of the action is to create a pull request that will be continually updated with new changes until it is merged or closed.Changes are committed and pushed to a fixed-name branch, the name of which can be configured with the `branch` input.Any subsequent changes will be committed to the *same* branch and reflected in the open pull request.
+How the action behaves:
+- If there are changes (i.e. a diff exists with the checked-out base branch), the changes will be pushed to a new `branch` and a pull request created.- If there are no changes (i.e. no diff exists with the checked-out base branch), no pull request will be created and the action exits silently.- If a pull request already exists it will be updated if necessary. Local changes in the Actions workspace, or changes on the base branch, can cause an update. If no update is required the action exits silently.- If a pull request exists and new changes on the base branch make the pull request unnecessary (i.e. there is no longer a diff between the pull request branch and the base), the pull request is automatically closed. Additionally, if `delete-branch` is set to `true` the `branch` will be deleted.
+For further details about how the action works and usage guidelines, see [Concepts, guidelines and advanced usage](docs/concepts-guidelines.md).
+#### Alternative strategy - Always create a new pull request branch
+For some use cases it may be desirable to always create a new unique branch each time there are changes to be committed.This strategy is *not recommended* because if not used carefully it could result in multiple pull requests being created unnecessarily. If in doubt, use the [default strategy](#action-behaviour) of creating an updating a fixed-name branch.
+To use this strategy, set input `branch-suffix` with one of the following options.
+- `random` - Commits will be made to a branch suffixed with a random alpha-numeric string. e.g. `create-pull-request/patch-6qj97jr`, `create-pull-request/patch-5jrjhvd`
+- `timestamp` - Commits will be made to a branch suffixed by a timestamp. e.g. `create-pull-request/patch-1569322532`, `create-pull-request/patch-1569322552`
+- `short-commit-hash` - Commits will be made to a branch suffixed with the short SHA1 commit hash. e.g. `create-pull-request/patch-fcdfb59`, `create-pull-request/patch-394710b`
+### Controlling committed files
+The action defaults to adding all new and modified files.If there are files that should not be included in the pull request, you can use the following methods to control the committed content.
+#### Remove files
+The most straightforward way to handle unwanted files is simply to remove them in a step before the action runs.
+```yml - run: | rm -rf temp-dir rm temp-file.txt```
+#### Ignore files
+If there are files or directories you want to ignore you can simply add them to a `.gitignore` file at the root of your repository. The action will respect this file.
+#### Add specific paths
+You can control which files are committed with the `add-paths` input.Paths should follow git's [pathspec](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec) syntax.All file changes that do not match one of the paths will be discarded.
+```yml - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: add-paths: | *.java docs/*.md```
+#### Create your own commits
+As well as relying on the action to handle uncommitted changes, you can additionally make your own commits before the action runs.Note that the repository must be checked out on a branch with a remote, it won't work for [events which checkout a commit](docs/concepts-guidelines.md#events-which-checkout-a-commit).
+```yml steps: - uses: actions/checkout@v3 - name: Create commits run: | git config user.name 'Peter Evans' git config user.email 'peter-evans@users.noreply.github.com' date +%s > report.txt git commit -am "Modify tracked file during workflow" date +%s > new-report.txt git add -A git commit -m "Add untracked file during workflow" - name: Uncommitted change run: date +%s > report.txt - name: Create Pull Request uses: peter-evans/create-pull-request@v4```
+### Create a project card
+To create a project card for the pull request, pass the `pull-request-number` step output to [create-or-update-project-card](https://github.com/peter-evans/create-or-update-project-card) action.
+```yml - name: Create Pull Request id: cpr uses: peter-evans/create-pull-request@v4 - name: Create or Update Project Card if: ${{ steps.cpr.outputs.pull-request-number }} uses: peter-evans/create-or-update-project-card@v2 with: project-name: My project column-name: My column issue-number: ${{ steps.cpr.outputs.pull-request-number }}```
+### Auto-merge
+Auto-merge can be enabled on a pull request allowing it to be automatically merged once requirements have been satisfied.See [enable-pull-request-automerge](https://github.com/peter-evans/enable-pull-request-automerge) action for usage details.
+## Reference Example
+The following workflow sets many of the action's inputs for reference purposes.Check the [defaults](#action-inputs) to avoid setting inputs unnecessarily.
+See [examples](docs/examples.md) for more realistic use cases.
+```ymljobs: createPullRequest: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Make changes to pull request run: date +%s > report.txt - name: Create Pull Request id: cpr uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} commit-message: Update report committer: GitHub <noreply@github.com> author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com> signoff: false branch: example-patches delete-branch: true title: '[Example] Update report' body: | Update report - Updated with *today's* date - Auto-generated by [create-pull-request][1] [1]: https://github.com/peter-evans/create-pull-request labels: | report automated pr assignees: peter-evans reviewers: peter-evans team-reviewers: | owners maintainers milestone: 1 draft: false```
+An example based on the above reference configuration creates pull requests that look like this:
+![Pull Request Example](docs/assets/pull-request-example.png)
+## License
+[MIT](LICENSE)
+
+ 2,074  __test__/create-or-update-branch.int.test.ts
+
+@@ -0,0 +1,2074 @@import { createOrUpdateBranch, tryFetch, getWorkingBaseAndType} from '../lib/create-or-update-branch'import * as fs from 'fs'import {GitCommandManager} from '../lib/git-command-manager'import * as path from 'path'import {v4 as uuidv4} from 'uuid'
+const REPO_PATH = '/git/local/test-base'const REMOTE_NAME = 'origin'
+const TRACKED_FILE = 'a/tracked-file.txt'const UNTRACKED_FILE = 'b/untracked-file.txt'
+const DEFAULT_BRANCH = 'tests/main'const NOT_BASE_BRANCH = 'tests/branch-that-is-not-the-base'const NOT_EXIST_BRANCH = 'tests/branch-that-does-not-exist'
+const INIT_COMMIT_MESSAGE = 'Add file to be a tracked file for tests'const BRANCH = 'tests/create-pull-request/patch'const BASE = DEFAULT_BRANCH
+const FORK_REMOTE_URL = 'git://127.0.0.1/test-fork.git'const FORK_REMOTE_NAME = 'fork'
+const ADD_PATHS_DEFAULT = []const ADD_PATHS_MULTI = ['a', 'b']const ADD_PATHS_WILDCARD = ['a/*.txt', 'b/*.txt']
+async function createFile(filename: string, content?: string): Promise<string> { const _content = content ? content : uuidv4() const filepath = path.join(REPO_PATH, filename) await fs.promises.mkdir(path.dirname(filepath), {recursive: true}) await fs.promises.writeFile(filepath, _content, {encoding: 'utf8'}) return _content}
+async function getFileContent(filename: string): Promise<string> { const filepath = path.join(REPO_PATH, filename) return await fs.promises.readFile(filepath, {encoding: 'utf8'})}
+interface ChangeContent { tracked: string untracked: string}
+async function createChanges( trackedContent?: string, untrackedContent?: string): Promise<ChangeContent> { return { tracked: await createFile(TRACKED_FILE, trackedContent), untracked: await createFile(UNTRACKED_FILE, untrackedContent) }}
+interface Commits { changes: ChangeContent commitMsgs: string[]}
+async function createCommits( git: GitCommandManager, number = 2, finalTrackedContent?: string, finalUntrackedContent?: string): Promise<Commits> { let result: Commits = { changes: {tracked: '', untracked: ''}, commitMsgs: [] } for (let i = 1; i <= number; i++) { if (i == number) { result.changes = await createChanges( finalTrackedContent, finalUntrackedContent ) } else { result.changes = await createChanges() } const commitMessage = uuidv4() await git.exec(['add', '-A']) await git.commit(['-m', commitMessage]) result.commitMsgs.unshift(commitMessage) } return result}
+describe('create-or-update-branch tests', () => { let git: GitCommandManager let initCommitHash: string
+beforeAll(async () => { git = await GitCommandManager.create(REPO_PATH) git.setIdentityGitOptions([ '-c', 'author.name=Author Name', '-c', 'author.email=author@example.com', '-c', 'committer.name=Committer Name', '-c', 'committer.email=committer@example.com' ]) // Check there are no local changes that might be destroyed by running these tests expect(await git.isDirty(true)).toBeFalsy() // Fetch the default branch await git.fetch(['main:refs/remotes/origin/main'])
+// Create a "not base branch" for the test run await git.checkout('main') await git.checkout(NOT_BASE_BRANCH, 'HEAD') await createFile(TRACKED_FILE) await git.exec(['add', '-A']) await git.commit(['-m', 'This commit should not appear in pr branches']) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${NOT_BASE_BRANCH}` ])
+// Create a new default branch for the test run with a tracked file await git.checkout('main') await git.checkout(DEFAULT_BRANCH, 'HEAD') await createFile(TRACKED_FILE) await git.exec(['add', '-A']) await git.commit(['-m', INIT_COMMIT_MESSAGE]) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ]) initCommitHash = await git.revParse('HEAD')
+// Add a remote for the fork await git.exec(['remote', 'add', FORK_REMOTE_NAME, FORK_REMOTE_URL]) })
+async function beforeTest(): Promise<void> { await git.checkout(DEFAULT_BRANCH) }
+async function afterTest(deleteRemote = true): Promise<void> { await git.checkout(DEFAULT_BRANCH) try { // Get the upstream branch if it exists const result = await git.exec([ 'for-each-ref', `--format=%(upstream:short)`, `refs/heads/${BRANCH}` ]) const upstreamBranch = result.stdout.trim() // Delete the local branch await git.exec(['branch', '--delete', '--force', BRANCH]) // Delete the remote branch if (deleteRemote && upstreamBranch) { const remote = upstreamBranch.split('/')[0] await git.push(['--delete', '--force', remote, `refs/heads/${BRANCH}`]) } } catch { /* empty */ } }
+beforeEach(async () => { await beforeTest() })
+afterEach(async () => { await afterTest() // Reset default branch if it was committed to during the test if ((await git.revParse('HEAD')) != initCommitHash) { await git.exec(['reset', '--hard', initCommitHash]) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ]) } })
+async function gitLogMatches(expectedCommitMsgs: string[]): Promise<boolean> { const count = expectedCommitMsgs.length const result = await git.exec(['log', `-${count}`, '--format=%s']) const commitMsgs = result.stdout .split('\n') .map(s => s.trim()) .filter(x => x !== '') for (var index in expectedCommitMsgs) { if (expectedCommitMsgs[index] != commitMsgs[index]) { return false } } return true }
+it('tests if a branch exists and can be fetched', async () => { expect(await tryFetch(git, REMOTE_NAME, NOT_BASE_BRANCH)).toBeTruthy() expect(await tryFetch(git, REMOTE_NAME, NOT_EXIST_BRANCH)).toBeFalsy() })
+it('tests getWorkingBaseAndType on a checked out ref', async () => { const [workingBase, workingBaseType] = await getWorkingBaseAndType(git) expect(workingBase).toEqual(BASE) expect(workingBaseType).toEqual('branch') })
+it('tests getWorkingBaseAndType on a checked out commit', async () => { // Checkout the HEAD commit SHA const headSha = await git.revParse('HEAD') await git.exec(['checkout', headSha]) const [workingBase, workingBaseType] = await getWorkingBaseAndType(git) expect(workingBase).toEqual(headSha) expect(workingBaseType).toEqual('commit') })
+it('tests no changes resulting in no new branch being created', async () => { const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('none') expect(await gitLogMatches([INIT_COMMIT_MESSAGE])).toBeTruthy() })
+it('tests create and update with a tracked file change', async () => { // Create a tracked file change const trackedContent = await createFile(TRACKED_FILE) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(trackedContent) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create a tracked file change const _trackedContent = await createFile(TRACKED_FILE) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_trackedContent) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with an untracked file change', async () => { // Create an untracked file change const untrackedContent = await createFile(UNTRACKED_FILE) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(UNTRACKED_FILE)).toEqual(untrackedContent) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create an untracked file change const _untrackedContent = await createFile(UNTRACKED_FILE) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(UNTRACKED_FILE)).toEqual(_untrackedContent) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with identical changes', async () => { // The pull request branch will not be updated
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create identical tracked and untracked file changes await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('not-updated') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with commits on the base inbetween', async () => { // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commits = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and then an update with no changes', async () => { // This effectively reverts the branch back to match the base and results in no diff
+// Save the default branch tracked content const defaultTrackedContent = await getFileContent(TRACKED_FILE)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Running with no update effectively reverts the branch back to match the base const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(defaultTrackedContent) expect(await gitLogMatches([INIT_COMMIT_MESSAGE])).toBeTruthy() })
+it('tests create, commits on the base, and update with identical changes to the base', async () => { // The changes on base effectively revert the branch back to match the base and results in no diff
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commits = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Create the same tracked and untracked file changes that were made to the base const _changes = await createChanges( commits.changes.tracked, commits.changes.untracked ) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create, squash merge, and update with identical changes', async () => { // Branches that have been squash merged appear to have a diff with the base due to // different commits for the same changes. To prevent creating pull requests // unnecessarily we reset (rebase) the pull request branch when a reset would result // in no diff with the base. This will reset any undeleted branches after merging.
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create a commit on the base with the same changes as the branch // This simulates squash merge of the pull request const commits = await createCommits( git, 1, changes.tracked, changes.untracked ) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Create the same tracked and untracked file changes (no change on update) const _changes = await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create, force push of base branch, and update with identical changes', async () => { // If the base branch is force pushed to a different commit when there is an open // pull request, the branch must be reset to rebase the changes on the base.
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Force push the base branch to a different commit const amendedCommitMessage = uuidv4() await git.commit(['--amend', '-m', amendedCommitMessage]) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Create the same tracked and untracked file changes (no change on update) const _changes = await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, amendedCommitMessage]) ).toBeTruthy() })
+it('tests create and update with commits on the working base (during the workflow)', async () => { // Create commits on the working base const commits = await createCommits(git) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(commits.changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual( commits.changes.untracked ) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the working base const _commits = await createCommits(git) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_commits.changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual( _commits.changes.untracked ) expect( await gitLogMatches([..._commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with changes and commits on the working base (during the workflow)', async () => { // Create commits on the working base const commits = await createCommits(git) // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([ commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the working base const _commits = await createCommits(git) // Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ..._commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and update with changes and commits on the working base (during the workflow), and commits on the base inbetween', async () => { // Create commits on the working base const commits = await createCommits(git) // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([ commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commitsOnBase = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Create commits on the working base const _commits = await createCommits(git) // Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ..._commits.commitMsgs, ...commitsOnBase.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and update using a different remote from the base', async () => { // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, FORK_REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', FORK_REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, FORK_REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with signoff on commit', async () => { // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, true, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() // Check signoff in commit body const commitBody = ( await git.exec(['log', `-1`, '--format=%b']) ).stdout.trim() expect(commitBody).toEqual( 'Signed-off-by: Committer Name <committer@example.com>' )
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, true, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() // Check signoff in commit body const _commitBody = ( await git.exec(['log', `-1`, '--format=%b']) ).stdout.trim() expect(_commitBody).toEqual( 'Signed-off-by: Committer Name <committer@example.com>' ) })
+it('tests create and update with multiple add-paths', async () => { // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_MULTI ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_MULTI ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with wildcard add-paths', async () => { // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_WILDCARD ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_WILDCARD ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create with add-paths resolving to no changes when other changes exist', async () => { // Create tracked and untracked file changes await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ['nonexistent/*'] ) expect(result.action).toEqual('none') expect(await gitLogMatches([INIT_COMMIT_MESSAGE])).toBeTruthy() })
+// Working Base is Not Base (WBNB)
+it('tests no changes resulting in no new branch being created (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('none') expect(await gitLogMatches([INIT_COMMIT_MESSAGE])).toBeTruthy() })
+it('tests create and update with a tracked file change (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create a tracked file change const trackedContent = await createFile(TRACKED_FILE) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(trackedContent) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create a tracked file change const _trackedContent = await createFile(TRACKED_FILE) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_trackedContent) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with an untracked file change (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create an untracked file change const untrackedContent = await createFile(UNTRACKED_FILE) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(UNTRACKED_FILE)).toEqual(untrackedContent) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create an untracked file change const _untrackedContent = await createFile(UNTRACKED_FILE) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(UNTRACKED_FILE)).toEqual(_untrackedContent) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with identical changes (WBNB)', async () => { // The pull request branch will not be updated
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create identical tracked and untracked file changes await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('not-updated') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with commits on the base inbetween (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commits = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and then an update with no changes (WBNB)', async () => { // This effectively reverts the branch back to match the base and results in no diff
+// Save the default branch tracked content const defaultTrackedContent = await getFileContent(TRACKED_FILE)
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Running with no update effectively reverts the branch back to match the base const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(defaultTrackedContent) expect(await gitLogMatches([INIT_COMMIT_MESSAGE])).toBeTruthy() })
+it('tests create, commits on the base, and update with identical changes to the base (WBNB)', async () => { // The changes on base effectively revert the branch back to match the base and results in no diff // This scenario will cause cherrypick to fail due to an empty commit. // The commit is empty because the changes now exist on the base.
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commits = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create the same tracked and untracked file changes that were made to the base const _changes = await createChanges( commits.changes.tracked, commits.changes.untracked ) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create, squash merge, and update with identical changes (WBNB)', async () => { // Branches that have been squash merged appear to have a diff with the base due to // different commits for the same changes. To prevent creating pull requests // unnecessarily we reset (rebase) the pull request branch when a reset would result // in no diff with the base. This will reset any undeleted branches after merging.
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create a commit on the base with the same changes as the branch // This simulates squash merge of the pull request const commits = await createCommits( git, 1, changes.tracked, changes.untracked ) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create the same tracked and untracked file changes (no change on update) const _changes = await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create, force push of base branch, and update with identical changes (WBNB)', async () => { // If the base branch is force pushed to a different commit when there is an open // pull request, the branch must be reset to rebase the changes on the base.
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Force push the base branch to a different commit const amendedCommitMessage = uuidv4() await git.commit(['--amend', '-m', amendedCommitMessage]) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create the same tracked and untracked file changes (no change on update) const _changes = await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, amendedCommitMessage]) ).toBeTruthy() })
+it('tests create and update with commits on the working base (during the workflow) (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const commits = await createCommits(git) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(commits.changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual( commits.changes.untracked ) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const _commits = await createCommits(git) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_commits.changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual( _commits.changes.untracked ) expect( await gitLogMatches([..._commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with changes and commits on the working base (during the workflow) (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const commits = await createCommits(git) // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([ commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const _commits = await createCommits(git) // Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ..._commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and update with changes and commits on the working base (during the workflow), and commits on the base inbetween (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const commits = await createCommits(git) // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([ commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commitsOnBase = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const _commits = await createCommits(git) // Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ..._commits.commitMsgs, ...commitsOnBase.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and update using a different remote from the base (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, FORK_REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', FORK_REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, FORK_REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+// Working Base is Not a Ref (WBNR) // A commit is checked out leaving the repository in a "detached HEAD" state
+it('tests create and update in detached HEAD state (WBNR)', async () => { // Checkout the HEAD commit SHA const headSha = await git.revParse('HEAD') await git.checkout(headSha)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Checkout the HEAD commit SHA const _headSha = await git.revParse('HEAD') await git.checkout(_headSha)
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with commits on the base inbetween, in detached HEAD state (WBNR)', async () => { // Checkout the HEAD commit SHA const headSha = await git.revParse('HEAD') await git.checkout(headSha)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commitsOnBase = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Checkout the HEAD commit SHA const _headSha = await git.revParse('HEAD') await git.checkout(_headSha)
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ...commitsOnBase.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+// This failure mode is a limitation of the action. Controlling your own commits cannot be used in detached HEAD state. // https://github.com/peter-evans/create-pull-request/issues/902 it('tests failure to create with commits on the working base (during the workflow) in detached HEAD state (WBNR)', async () => { // Checkout the HEAD commit SHA const headSha = await git.revParse('HEAD') await git.checkout(headSha)
+// Create commits on the working base const commits = await createCommits(git) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) // The action cannot successfully create the branch expect(result.action).toEqual('none') })})
+ 41  __test__/entrypoint.sh
+@@ -0,0 +1,41 @@#!/bin/sh -lset -euo pipefail
+# Save the working directoryWORKINGDIR=$PWD
+# Create and serve a remote repomkdir -p /git/remotegit config --global init.defaultBranch maingit init --bare /git/remote/test-base.gitgit daemon --verbose --enable=receive-pack --base-path=/git/remote --export-all /git/remote &>/dev/null &
+# Give the daemon time to startsleep 2
+# Create a local clone and make an initial commitmkdir -p /git/localgit clone git://127.0.0.1/test-base.git /git/local/test-basecd /git/local/test-basegit config --global user.email "you@example.com"git config --global user.name "Your Name"echo "#test-base" > README.mdgit add .git commit -m "initial commit"git push -ugit log -1 --pretty=onelinegit config --global --unset user.emailgit config --global --unset user.namegit config -l
+# Clone a server-side fork of the base repocd $WORKINGDIRgit clone --mirror git://127.0.0.1/test-base.git /git/remote/test-fork.gitcd /git/remote/test-fork.gitgit log -1 --pretty=oneline
+# Restore the working directorycd $WORKINGDIR
+# Execute integration testsjest int --runInBand
+ 49  __test__/git-auth-helper.int.test.ts
+@@ -0,0 +1,49 @@import {GitCommandManager} from '../lib/git-command-manager'import {GitAuthHelper} from '../lib/git-auth-helper'
+const REPO_PATH = '/git/local/test-base'
+const extraheaderConfigKey = 'http.https://github.com/.extraheader'
+describe('git-auth-helper tests', () => { let git: GitCommandManager let gitAuthHelper: GitAuthHelper
+beforeAll(async () => { git = await GitCommandManager.create(REPO_PATH) gitAuthHelper = new GitAuthHelper(git) })
+it('tests save and restore with no persisted auth', async () => { await gitAuthHelper.savePersistedAuth() await gitAuthHelper.restorePersistedAuth() })
+it('tests configure and removal of auth', async () => { await gitAuthHelper.configureToken('github-token') expect(await git.configExists(extraheaderConfigKey)).toBeTruthy() expect(await git.getConfigValue(extraheaderConfigKey)).toEqual( 'AUTHORIZATION: basic eC1hY2Nlc3MtdG9rZW46Z2l0aHViLXRva2Vu' )
+await gitAuthHelper.removeAuth() expect(await git.configExists(extraheaderConfigKey)).toBeFalsy() })
+it('tests save and restore of persisted auth', async () => { const extraheaderConfigValue = 'AUTHORIZATION: basic ***persisted-auth***' await git.config(extraheaderConfigKey, extraheaderConfigValue)
+await gitAuthHelper.savePersistedAuth()
+const exists = await git.configExists(extraheaderConfigKey) expect(exists).toBeFalsy()
+await gitAuthHelper.restorePersistedAuth()
+const configValue = await git.getConfigValue(extraheaderConfigKey) expect(configValue).toEqual(extraheaderConfigValue)
+await gitAuthHelper.removeAuth() })})
+ 23  __test__/integration-tests.sh
+@@ -0,0 +1,23 @@#!/usr/bin/env bashset -euo pipefail
+IMAGE="cpr-integration-tests:latest"ARG1=${1:-}
+if [[ "$(docker images -q $IMAGE 2> /dev/null)" == "" || $ARG1 == "build" ]]; then echo "Building Docker image $IMAGE ..."
+cat > Dockerfile << EOFFROM node:16-alpineRUN apk --no-cache add git git-daemonRUN npm install jest jest-environment-jsdom --globalWORKDIR /cprCOPY __test__/entrypoint.sh /entrypoint.shENTRYPOINT ["/entrypoint.sh"]EOF
+docker build --no-cache -t $IMAGE . rm Dockerfilefi
+docker run -v $PWD:/cpr $IMAGE
+ 165  __test__/utils.unit.test.ts
+@@ -0,0 +1,165 @@import * as path from 'path'import * as utils from '../lib/utils'
+const originalGitHubWorkspace = process.env['GITHUB_WORKSPACE']
+describe('utils tests', () => { beforeAll(() => { // GitHub workspace process.env['GITHUB_WORKSPACE'] = __dirname })
+afterAll(() => { // Restore GitHub workspace delete process.env['GITHUB_WORKSPACE'] if (originalGitHubWorkspace) { process.env['GITHUB_WORKSPACE'] = originalGitHubWorkspace } })
+test('getStringAsArray splits string input by newlines and commas', async () => { const array = utils.getStringAsArray('1, 2, 3\n4, 5, 6') expect(array.length).toEqual(6)
+const array2 = utils.getStringAsArray('') expect(array2.length).toEqual(0) })
+test('getRepoPath successfully returns the path to the repository', async () => { expect(utils.getRepoPath()).toEqual(process.env['GITHUB_WORKSPACE']) expect(utils.getRepoPath('foo')).toEqual( path.resolve(process.env['GITHUB_WORKSPACE'] || '', 'foo') ) })
+test('getRemoteDetail successfully parses remote URLs', async () => { const remote1 = utils.getRemoteDetail( 'https://github.com/peter-evans/create-pull-request' ) expect(remote1.protocol).toEqual('HTTPS') expect(remote1.repository).toEqual('peter-evans/create-pull-request')
+const remote2 = utils.getRemoteDetail( 'https://xxx:x-oauth-basic@github.com/peter-evans/create-pull-request' ) expect(remote2.protocol).toEqual('HTTPS') expect(remote2.repository).toEqual('peter-evans/create-pull-request')
+const remote3 = utils.getRemoteDetail( 'git@github.com:peter-evans/create-pull-request.git' ) expect(remote3.protocol).toEqual('SSH') expect(remote3.repository).toEqual('peter-evans/create-pull-request')
+const remote4 = utils.getRemoteDetail( 'https://github.com/peter-evans/create-pull-request.git' ) expect(remote4.protocol).toEqual('HTTPS') expect(remote4.repository).toEqual('peter-evans/create-pull-request')
+const remote5 = utils.getRemoteDetail( 'https://github.com/peter-evans/ungit' ) expect(remote5.protocol).toEqual('HTTPS') expect(remote5.repository).toEqual('peter-evans/ungit')
+const remote6 = utils.getRemoteDetail( 'https://github.com/peter-evans/ungit.git' ) expect(remote6.protocol).toEqual('HTTPS') expect(remote6.repository).toEqual('peter-evans/ungit')
+const remote7 = utils.getRemoteDetail( 'git@github.com:peter-evans/ungit.git' ) expect(remote7.protocol).toEqual('SSH') expect(remote7.repository).toEqual('peter-evans/ungit') })
+test('getRemoteDetail fails to parse a remote URL', async () => { const remoteUrl = 'https://github.com/peter-evans' try { utils.getRemoteDetail(remoteUrl) // Fail the test if an error wasn't thrown expect(true).toEqual(false) } catch (e: any) { expect(e.message).toEqual( `The format of '${remoteUrl}' is not a valid GitHub repository URL` ) } })
+test('getRemoteUrl successfully returns remote URLs', async () => { const url1 = utils.getRemoteUrl( 'HTTPS', 'github.com', 'peter-evans/create-pull-request' ) expect(url1).toEqual('https://github.com/peter-evans/create-pull-request')
+const url2 = utils.getRemoteUrl( 'SSH', 'github.com', 'peter-evans/create-pull-request' ) expect(url2).toEqual('git@github.com:peter-evans/create-pull-request.git')
+const url3 = utils.getRemoteUrl( 'HTTPS', 'mygithubserver.com', 'peter-evans/create-pull-request' ) expect(url3).toEqual( 'https://mygithubserver.com/peter-evans/create-pull-request' ) })
+test('secondsSinceEpoch returns the number of seconds since the Epoch', async () => { const seconds = `${utils.secondsSinceEpoch()}` expect(seconds.length).toEqual(10) })
+test('randomString returns strings of length 7', async () => { for (let i = 0; i < 1000; i++) { expect(utils.randomString().length).toEqual(7) } })
+test('parseDisplayNameEmail successfully parses display name email formats', async () => { const parsed1 = utils.parseDisplayNameEmail('abc def <abc@def.com>') expect(parsed1.name).toEqual('abc def') expect(parsed1.email).toEqual('abc@def.com')
+const parsed2 = utils.parseDisplayNameEmail( 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>' ) expect(parsed2.name).toEqual('github-actions[bot]') expect(parsed2.email).toEqual( '41898282+github-actions[bot]@users.noreply.github.com' ) })
+test('parseDisplayNameEmail fails to parse display name email formats', async () => { const displayNameEmail1 = 'abc@def.com' try { utils.parseDisplayNameEmail(displayNameEmail1) // Fail the test if an error wasn't thrown expect(true).toEqual(false) } catch (e: any) { expect(e.message).toEqual( `The format of '${displayNameEmail1}' is not a valid email address with display name` ) }
+const displayNameEmail2 = ' < >' try { utils.parseDisplayNameEmail(displayNameEmail2) // Fail the test if an error wasn't thrown expect(true).toEqual(false) } catch (e: any) { expect(e.message).toEqual( `The format of '${displayNameEmail2}' is not a valid email address with display name` ) } })})
+ 86  action.ymlJob :use :'#Step : use:  '-''
+'-'' '#Action.js/checkout@v3 - name: Create commits run: | git config user.name 'Peter Evans' git config user.email 'peter-evans@users.noreply.github.com' date +%s > report.txt git commit -am "Modify tracked file during workflow" date +%s > new-report.txt git add -A git commit -m "Add untracked file during workflow" - name: Uncommitted change run: date +%s > report.txt - name: Create Pull Request/ISSUES/Response.md :run-on :peterbuilt/peter-evans/Pushs/Pull/Request/ISSUE_TEMPLE'@v4 :
+Skip to content
+
+Pull requestsIssuesCodespaces
+
+Marketplace
+
+Explore
+
+ 
+
+￼ 
+
+Your account has been flagged.
+
+Because of that, your profile is hidden from the public. If you believe this is a mistake, contact support to have your account status reviewed.
+
+zakwarlord7/ci-CIPublic
+
+generated from zakwarlord7/peter-evans-create-pull-request
+
+Pin
+
+ Unwatch 0 
+
+Fork 0
+
+ Star 0
+
+Code
+
+Issues
+
+Pull requests
+
+Actions
+
+Projects
+
+Wiki
+
+Security
+
+Insights
+
+Settings
+
+Comparing changes
+
+Choose two branches to see what’s changed or to start a new pull request. If you need to, you can also compare across forks.
+
+base: master 
+
+  
+
+compare: patch-21 
+
+There isn’t anything to compare.
+
+master and patch-21 are entirely different commit histories.
+
+SplitUnified
+
+Showing 43 changed files with 129,478 additions and 0 deletions.
+
+ 3  .eslintignore
+
+@@ -0,0 +1,3 @@dist/lib/node_modules/
+
+ 23  .eslintrc.json
+
+@@ -0,0 +1,23 @@{ "env": { "node": true, "jest": true }, "parser": "@typescript-eslint/parser", "parserOptions": { "ecmaVersion": 9, "sourceType": "module" }, "extends": [ "eslint:recommended", "plugin:@typescript-eslint/eslint-recommended", "plugin:@typescript-eslint/recommended", "plugin:import/errors", "plugin:import/warnings", "plugin:import/typescript", "plugin:prettier/recommended" ], "plugins": ["@typescript-eslint"], "rules": { "@typescript-eslint/camelcase": "off" }, "settings": { "import/resolver": { "typescript": {} } }}
+
+ 1  .github/FUNDING.yml
+
+@@ -0,0 +1 @@github: peter-evans
+
+ 7  .github/ISSUE_TEMPLATE.md
+
+@@ -0,0 +1,7 @@### Subject of the issue
+Describe your issue here.
+### Steps to reproduce
+If this issue is describing a possible bug please provide (or link to) your GitHub Actions workflow.
+
+ 15  .github/dependabot.yml
+
+@@ -0,0 +1,15 @@version: 2updates: - package-ecosystem: "github-actions" directory: "/" schedule: interval: "weekly" labels: - "dependencies"
+- package-ecosystem: "npm" directory: "/" schedule: interval: "weekly" allow: - dependency-name: "@actions/*"
+
+ 43,318  .github/workflows/ci.yml
+
+43,318 additions, 0 deletions not shown because the diff is too large. Please use a local Git client to view these changes.
+
+ 49  .github/workflows/cpr-example-command.yml
+
+@@ -0,0 +1,49 @@name: Create Pull Request Example Commandon: repository_dispatch: types: [cpr-example-command]jobs: createPullRequest: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3
+- name: Make changes to pull request run: date +%s > report.txt
+- name: Create Pull Request id: cpr uses: ./ with: commit-message: Update report committer: GitHub <noreply@github.com> author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com> signoff: false title: '[Example] Update report' body: | Update report - Updated with *today's* date - Auto-generated by [create-pull-request][1] [1]: https://github.com/peter-evans/create-pull-request labels: | report automated pr assignees: peter-evans reviewers: peter-evans milestone: 1 draft: false branch: example-patches delete-branch: true
+- name: Check output run: | echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}" echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}" - name: Add reaction uses: peter-evans/create-or-update-comment@v2 with: repository: ${{ github.event.client_payload.github.payload.repository.full_name }} comment-id: ${{ github.event.client_payload.github.payload.comment.id }} reaction-type: hooray
+
+ 43  .github/workflows/slash-command-dispatch.yml
+
+@@ -0,0 +1,43 @@name: Slash Command Dispatchon: issue_comment: types: [created]jobs: slashCommandDispatch: runs-on: ubuntu-latest steps: - name: Slash Command Dispatch uses: peter-evans/slash-command-dispatch@v3 with: token: ${{ secrets.ACTIONS_BOT_TOKEN }} config: > [ { "command": "test", "permission": "admin", "repository": "peter-evans/create-pull-request-tests", "named_args": true }, { "command": "testv4", "permission": "admin", "repository": "peter-evans/create-pull-request-tests", "named_args": true }, { "command": "clean", "permission": "admin", "repository": "peter-evans/create-pull-request-tests" }, { "command": "cpr-example", "permission": "admin", "issue_type": "issue" }, { "command": "rebase", "permission": "admin", "repository": "peter-evans/slash-command-dispatch-processor", "issue_type": "pull-request" } ]
+
+ 5  .gitignore
+
+@@ -0,0 +1,5 @@lib/node_modules/
+.DS_Store.idea
+
+ 3  .prettierignore
+
+@@ -0,0 +1,3 @@dist/lib/node_modules/
+
+ 11  .prettierrc.json
+
+@@ -0,0 +1,11 @@{ "printWidth": 80, "tabWidth": 2, "useTabs": false, "semi": false, "singleQuote": true, "trailingComma": "none", "bracketSpacing": false, "arrowParens": "avoid", "parser": "typescript"}
+
+ 21  LICENSE
+
+@@ -0,0 +1,21 @@MIT License
+Copyright (c) 2019 Peter Evans
+Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:
+The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.
+
+ 267  README.md
+
+@@ -0,0 +1,267 @@# <img width="24" height="24" src="docs/assets/logo.svg"> Create Pull Request[![CI](https://github.com/peter-evans/create-pull-request/workflows/CI/badge.svg)](https://github.com/peter-evans/create-pull-request/actions?query=workflow%3ACI)[![GitHub Marketplace](https://img.shields.io/badge/Marketplace-Create%20Pull%20Request-blue.svg?colorA=24292e&colorB=0366d6&style=flat&longCache=true&logo=github)](https://github.com/marketplace/actions/create-pull-request)
+A GitHub action to create a pull request for changes to your repository in the actions workspace.
+Changes to a repository in the Actions workspace persist between steps in a workflow.This action is designed to be used in conjunction with other steps that modify or add files to your repository.The changes will be automatically committed to a new branch and a pull request created.
+Create Pull Request action will:
+1. Check for repository changes in the Actions workspace. This includes: - untracked (new) files - tracked (modified) files - commits made during the workflow that have not been pushed2. Commit all changes to a new branch, or update an existing pull request branch.3. Create a pull request to merge the new branch into the base&mdash;the branch checked out in the workflow.
+## Documentation
+- [Concepts, guidelines and advanced usage](docs/concepts-guidelines.md)- [Examples](docs/examples.md)- [Updating to v4](docs/updating.md)
+## Usage
+```yml - uses: actions/checkout@v3 # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4```
+You can also pin to a [specific release](https://github.com/peter-evans/create-pull-request/releases) version in the format `@v4.x.x`
+### Workflow permissions
+For this action to work you must explicitly allow GitHub Actions to create pull requests.This setting can be found in a repository's settings under Actions > General > Workflow permissions.
+For repositories belonging to an organization, this setting can be managed by admins in organization settings under Actions > General > Workflow permissions.
+### Action inputs
+All inputs are **optional**. If not set, sensible defaults will be used.
+**Note**: If you want pull requests created by this action to trigger an `on: push` or `on: pull_request` workflow then you cannot use the default `GITHUB_TOKEN`. See the [documentation here](docs/concepts-guidelines.md#triggering-further-workflow-runs) for workarounds.
+| Name | Description | Default || --- | --- | --- || `token` | `GITHUB_TOKEN` (permissions `contents: write` and `pull-requests: write`) or a `repo` scoped [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token). | `GITHUB_TOKEN` || `path` | Relative path under `GITHUB_WORKSPACE` to the repository. | `GITHUB_WORKSPACE` || `add-paths` | A comma or newline-separated list of file paths to commit. Paths should follow git's [pathspec](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec) syntax. If no paths are specified, all new and modified files are added. See [Add specific paths](#add-specific-paths). | || `commit-message` | The message to use when committing changes. | `[create-pull-request] automated change` || `committer` | The committer name and email address in the format `Display Name <email@address.com>`. Defaults to the GitHub Actions bot user. | `GitHub <noreply@github.com>` || `author` | The author name and email address in the format `Display Name <email@address.com>`. Defaults to the user who triggered the workflow run. | `${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>` || `signoff` | Add [`Signed-off-by`](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff) line by the committer at the end of the commit log message. | `false` || `branch` | The pull request branch name. | `create-pull-request/patch` || `delete-branch` | Delete the `branch` when closing pull requests, and when undeleted after merging. Recommend `true`. | `false` || `branch-suffix` | The branch suffix type when using the alternative branching strategy. Valid values are `random`, `timestamp` and `short-commit-hash`. See [Alternative strategy](#alternative-strategy---always-create-a-new-pull-request-branch) for details. | || `base` | Sets the pull request base branch. | Defaults to the branch checked out in the workflow. || `push-to-fork` | A fork of the checked-out parent repository to which the pull request branch will be pushed. e.g. `owner/repo-fork`. The pull request will be created to merge the fork's branch into the parent's base. See [push pull request branches to a fork](docs/concepts-guidelines.md#push-pull-request-branches-to-a-fork) for details. | || `title` | The title of the pull request. | `Changes by create-pull-request action` || `body` | The body of the pull request. | `Automated changes by [create-pull-request](https://github.com/peter-evans/create-pull-request) GitHub action` || `labels` | A comma or newline-separated list of labels. | || `assignees` | A comma or newline-separated list of assignees (GitHub usernames). | || `reviewers` | A comma or newline-separated list of reviewers (GitHub usernames) to request a review from. | || `team-reviewers` | A comma or newline-separated list of GitHub teams to request a review from. Note that a `repo` scoped [PAT](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) may be required. See [this issue](https://github.com/peter-evans/create-pull-request/issues/155). If using a GitHub App, refer to [Authenticating with GitHub App generated tokens](docs/concepts-guidelines.md#authenticating-with-github-app-generated-tokens) for the proper permissions. | || `milestone` | The number of the milestone to associate this pull request with. | || `draft` | Create a [draft pull request](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests#draft-pull-requests). It is not possible to change draft status after creation except through the web interface. | `false` |
+For self-hosted runners behind a corporate proxy set the `https_proxy` environment variable.```yml - name: Create Pull Request uses: peter-evans/create-pull-request@v4 env: https_proxy: http://<proxy_address>:<port>```
+### Action outputs
+The following outputs can be used by subsequent workflow steps.
+- `pull-request-number` - The pull request number.- `pull-request-url` - The URL of the pull request.- `pull-request-operation` - The pull request operation performed by the action, `created`, `updated` or `closed`.- `pull-request-head-sha` - The commit SHA of the pull request branch.
+Step outputs can be accessed as in the following example.Note that in order to read the step outputs the action step must have an id.
+```yml - name: Create Pull Request id: cpr uses: peter-evans/create-pull-request@v4 - name: Check outputs if: ${{ steps.cpr.outputs.pull-request-number }} run: | echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}" echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"```
+### Action behaviour
+The default behaviour of the action is to create a pull request that will be continually updated with new changes until it is merged or closed.Changes are committed and pushed to a fixed-name branch, the name of which can be configured with the `branch` input.Any subsequent changes will be committed to the *same* branch and reflected in the open pull request.
+How the action behaves:
+- If there are changes (i.e. a diff exists with the checked-out base branch), the changes will be pushed to a new `branch` and a pull request created.- If there are no changes (i.e. no diff exists with the checked-out base branch), no pull request will be created and the action exits silently.- If a pull request already exists it will be updated if necessary. Local changes in the Actions workspace, or changes on the base branch, can cause an update. If no update is required the action exits silently.- If a pull request exists and new changes on the base branch make the pull request unnecessary (i.e. there is no longer a diff between the pull request branch and the base), the pull request is automatically closed. Additionally, if `delete-branch` is set to `true` the `branch` will be deleted.
+For further details about how the action works and usage guidelines, see [Concepts, guidelines and advanced usage](docs/concepts-guidelines.md).
+#### Alternative strategy - Always create a new pull request branch
+For some use cases it may be desirable to always create a new unique branch each time there are changes to be committed.This strategy is *not recommended* because if not used carefully it could result in multiple pull requests being created unnecessarily. If in doubt, use the [default strategy](#action-behaviour) of creating an updating a fixed-name branch.
+To use this strategy, set input `branch-suffix` with one of the following options.
+- `random` - Commits will be made to a branch suffixed with a random alpha-numeric string. e.g. `create-pull-request/patch-6qj97jr`, `create-pull-request/patch-5jrjhvd`
+- `timestamp` - Commits will be made to a branch suffixed by a timestamp. e.g. `create-pull-request/patch-1569322532`, `create-pull-request/patch-1569322552`
+- `short-commit-hash` - Commits will be made to a branch suffixed with the short SHA1 commit hash. e.g. `create-pull-request/patch-fcdfb59`, `create-pull-request/patch-394710b`
+### Controlling committed files
+The action defaults to adding all new and modified files.If there are files that should not be included in the pull request, you can use the following methods to control the committed content.
+#### Remove files
+The most straightforward way to handle unwanted files is simply to remove them in a step before the action runs.
+```yml - run: | rm -rf temp-dir rm temp-file.txt```
+#### Ignore files
+If there are files or directories you want to ignore you can simply add them to a `.gitignore` file at the root of your repository. The action will respect this file.
+#### Add specific paths
+You can control which files are committed with the `add-paths` input.Paths should follow git's [pathspec](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec) syntax.All file changes that do not match one of the paths will be discarded.
+```yml - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: add-paths: | *.java docs/*.md```
+#### Create your own commits
+As well as relying on the action to handle uncommitted changes, you can additionally make your own commits before the action runs.Note that the repository must be checked out on a branch with a remote, it won't work for [events which checkout a commit](docs/concepts-guidelines.md#events-which-checkout-a-commit).
+```yml steps: - uses: actions/checkout@v3 - name: Create commits run: | git config user.name 'Peter Evans' git config user.email 'peter-evans@users.noreply.github.com' date +%s > report.txt git commit -am "Modify tracked file during workflow" date +%s > new-report.txt git add -A git commit -m "Add untracked file during workflow" - name: Uncommitted change run: date +%s > report.txt - name: Create Pull Request uses: peter-evans/create-pull-request@v4```
+### Create a project card
+To create a project card for the pull request, pass the `pull-request-number` step output to [create-or-update-project-card](https://github.com/peter-evans/create-or-update-project-card) action.
+```yml - name: Create Pull Request id: cpr uses: peter-evans/create-pull-request@v4 - name: Create or Update Project Card if: ${{ steps.cpr.outputs.pull-request-number }} uses: peter-evans/create-or-update-project-card@v2 with: project-name: My project column-name: My column issue-number: ${{ steps.cpr.outputs.pull-request-number }}```
+### Auto-merge
+Auto-merge can be enabled on a pull request allowing it to be automatically merged once requirements have been satisfied.See [enable-pull-request-automerge](https://github.com/peter-evans/enable-pull-request-automerge) action for usage details.
+## Reference Example
+The following workflow sets many of the action's inputs for reference purposes.Check the [defaults](#action-inputs) to avoid setting inputs unnecessarily.
+See [examples](docs/examples.md) for more realistic use cases.
+```ymljobs: createPullRequest: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Make changes to pull request run: date +%s > report.txt - name: Create Pull Request id: cpr uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} commit-message: Update report committer: GitHub <noreply@github.com> author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com> signoff: false branch: example-patches delete-branch: true title: '[Example] Update report' body: | Update report - Updated with *today's* date - Auto-generated by [create-pull-request][1] [1]: https://github.com/peter-evans/create-pull-request labels: | report automated pr assignees: peter-evans reviewers: peter-evans team-reviewers: | owners maintainers milestone: 1 draft: false```
+An example based on the above reference configuration creates pull requests that look like this:
+![Pull Request Example](docs/assets/pull-request-example.png)
+## License
+[MIT](LICENSE)
+
+ 2,074  __test__/create-or-update-branch.int.test.ts
+
+@@ -0,0 +1,2074 @@import { createOrUpdateBranch, tryFetch, getWorkingBaseAndType} from '../lib/create-or-update-branch'import * as fs from 'fs'import {GitCommandManager} from '../lib/git-command-manager'import * as path from 'path'import {v4 as uuidv4} from 'uuid'
+const REPO_PATH = '/git/local/test-base'const REMOTE_NAME = 'origin'
+const TRACKED_FILE = 'a/tracked-file.txt'const UNTRACKED_FILE = 'b/untracked-file.txt'
+const DEFAULT_BRANCH = 'tests/main'const NOT_BASE_BRANCH = 'tests/branch-that-is-not-the-base'const NOT_EXIST_BRANCH = 'tests/branch-that-does-not-exist'
+const INIT_COMMIT_MESSAGE = 'Add file to be a tracked file for tests'const BRANCH = 'tests/create-pull-request/patch'const BASE = DEFAULT_BRANCH
+const FORK_REMOTE_URL = 'git://127.0.0.1/test-fork.git'const FORK_REMOTE_NAME = 'fork'
+const ADD_PATHS_DEFAULT = []const ADD_PATHS_MULTI = ['a', 'b']const ADD_PATHS_WILDCARD = ['a/*.txt', 'b/*.txt']
+async function createFile(filename: string, content?: string): Promise<string> { const _content = content ? content : uuidv4() const filepath = path.join(REPO_PATH, filename) await fs.promises.mkdir(path.dirname(filepath), {recursive: true}) await fs.promises.writeFile(filepath, _content, {encoding: 'utf8'}) return _content}
+async function getFileContent(filename: string): Promise<string> { const filepath = path.join(REPO_PATH, filename) return await fs.promises.readFile(filepath, {encoding: 'utf8'})}
+interface ChangeContent { tracked: string untracked: string}
+async function createChanges( trackedContent?: string, untrackedContent?: string): Promise<ChangeContent> { return { tracked: await createFile(TRACKED_FILE, trackedContent), untracked: await createFile(UNTRACKED_FILE, untrackedContent) }}
+interface Commits { changes: ChangeContent commitMsgs: string[]}
+async function createCommits( git: GitCommandManager, number = 2, finalTrackedContent?: string, finalUntrackedContent?: string): Promise<Commits> { let result: Commits = { changes: {tracked: '', untracked: ''}, commitMsgs: [] } for (let i = 1; i <= number; i++) { if (i == number) { result.changes = await createChanges( finalTrackedContent, finalUntrackedContent ) } else { result.changes = await createChanges() } const commitMessage = uuidv4() await git.exec(['add', '-A']) await git.commit(['-m', commitMessage]) result.commitMsgs.unshift(commitMessage) } return result}
+describe('create-or-update-branch tests', () => { let git: GitCommandManager let initCommitHash: string
+beforeAll(async () => { git = await GitCommandManager.create(REPO_PATH) git.setIdentityGitOptions([ '-c', 'author.name=Author Name', '-c', 'author.email=author@example.com', '-c', 'committer.name=Committer Name', '-c', 'committer.email=committer@example.com' ]) // Check there are no local changes that might be destroyed by running these tests expect(await git.isDirty(true)).toBeFalsy() // Fetch the default branch await git.fetch(['main:refs/remotes/origin/main'])
+// Create a "not base branch" for the test run await git.checkout('main') await git.checkout(NOT_BASE_BRANCH, 'HEAD') await createFile(TRACKED_FILE) await git.exec(['add', '-A']) await git.commit(['-m', 'This commit should not appear in pr branches']) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${NOT_BASE_BRANCH}` ])
+// Create a new default branch for the test run with a tracked file await git.checkout('main') await git.checkout(DEFAULT_BRANCH, 'HEAD') await createFile(TRACKED_FILE) await git.exec(['add', '-A']) await git.commit(['-m', INIT_COMMIT_MESSAGE]) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ]) initCommitHash = await git.revParse('HEAD')
+// Add a remote for the fork await git.exec(['remote', 'add', FORK_REMOTE_NAME, FORK_REMOTE_URL]) })
+async function beforeTest(): Promise<void> { await git.checkout(DEFAULT_BRANCH) }
+async function afterTest(deleteRemote = true): Promise<void> { await git.checkout(DEFAULT_BRANCH) try { // Get the upstream branch if it exists const result = await git.exec([ 'for-each-ref', `--format=%(upstream:short)`, `refs/heads/${BRANCH}` ]) const upstreamBranch = result.stdout.trim() // Delete the local branch await git.exec(['branch', '--delete', '--force', BRANCH]) // Delete the remote branch if (deleteRemote && upstreamBranch) { const remote = upstreamBranch.split('/')[0] await git.push(['--delete', '--force', remote, `refs/heads/${BRANCH}`]) } } catch { /* empty */ } }
+beforeEach(async () => { await beforeTest() })
+afterEach(async () => { await afterTest() // Reset default branch if it was committed to during the test if ((await git.revParse('HEAD')) != initCommitHash) { await git.exec(['reset', '--hard', initCommitHash]) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ]) } })
+async function gitLogMatches(expectedCommitMsgs: string[]): Promise<boolean> { const count = expectedCommitMsgs.length const result = await git.exec(['log', `-${count}`, '--format=%s']) const commitMsgs = result.stdout .split('\n') .map(s => s.trim()) .filter(x => x !== '') for (var index in expectedCommitMsgs) { if (expectedCommitMsgs[index] != commitMsgs[index]) { return false } } return true }
+it('tests if a branch exists and can be fetched', async () => { expect(await tryFetch(git, REMOTE_NAME, NOT_BASE_BRANCH)).toBeTruthy() expect(await tryFetch(git, REMOTE_NAME, NOT_EXIST_BRANCH)).toBeFalsy() })
+it('tests getWorkingBaseAndType on a checked out ref', async () => { const [workingBase, workingBaseType] = await getWorkingBaseAndType(git) expect(workingBase).toEqual(BASE) expect(workingBaseType).toEqual('branch') })
+it('tests getWorkingBaseAndType on a checked out commit', async () => { // Checkout the HEAD commit SHA const headSha = await git.revParse('HEAD') await git.exec(['checkout', headSha]) const [workingBase, workingBaseType] = await getWorkingBaseAndType(git) expect(workingBase).toEqual(headSha) expect(workingBaseType).toEqual('commit') })
+it('tests no changes resulting in no new branch being created', async () => { const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('none') expect(await gitLogMatches([INIT_COMMIT_MESSAGE])).toBeTruthy() })
+it('tests create and update with a tracked file change', async () => { // Create a tracked file change const trackedContent = await createFile(TRACKED_FILE) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(trackedContent) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create a tracked file change const _trackedContent = await createFile(TRACKED_FILE) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_trackedContent) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with an untracked file change', async () => { // Create an untracked file change const untrackedContent = await createFile(UNTRACKED_FILE) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(UNTRACKED_FILE)).toEqual(untrackedContent) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create an untracked file change const _untrackedContent = await createFile(UNTRACKED_FILE) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(UNTRACKED_FILE)).toEqual(_untrackedContent) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with identical changes', async () => { // The pull request branch will not be updated
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create identical tracked and untracked file changes await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('not-updated') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with commits on the base inbetween', async () => { // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commits = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and then an update with no changes', async () => { // This effectively reverts the branch back to match the base and results in no diff
+// Save the default branch tracked content const defaultTrackedContent = await getFileContent(TRACKED_FILE)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Running with no update effectively reverts the branch back to match the base const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(defaultTrackedContent) expect(await gitLogMatches([INIT_COMMIT_MESSAGE])).toBeTruthy() })
+it('tests create, commits on the base, and update with identical changes to the base', async () => { // The changes on base effectively revert the branch back to match the base and results in no diff
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commits = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Create the same tracked and untracked file changes that were made to the base const _changes = await createChanges( commits.changes.tracked, commits.changes.untracked ) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create, squash merge, and update with identical changes', async () => { // Branches that have been squash merged appear to have a diff with the base due to // different commits for the same changes. To prevent creating pull requests // unnecessarily we reset (rebase) the pull request branch when a reset would result // in no diff with the base. This will reset any undeleted branches after merging.
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create a commit on the base with the same changes as the branch // This simulates squash merge of the pull request const commits = await createCommits( git, 1, changes.tracked, changes.untracked ) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Create the same tracked and untracked file changes (no change on update) const _changes = await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create, force push of base branch, and update with identical changes', async () => { // If the base branch is force pushed to a different commit when there is an open // pull request, the branch must be reset to rebase the changes on the base.
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Force push the base branch to a different commit const amendedCommitMessage = uuidv4() await git.commit(['--amend', '-m', amendedCommitMessage]) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Create the same tracked and untracked file changes (no change on update) const _changes = await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, amendedCommitMessage]) ).toBeTruthy() })
+it('tests create and update with commits on the working base (during the workflow)', async () => { // Create commits on the working base const commits = await createCommits(git) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(commits.changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual( commits.changes.untracked ) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the working base const _commits = await createCommits(git) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_commits.changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual( _commits.changes.untracked ) expect( await gitLogMatches([..._commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with changes and commits on the working base (during the workflow)', async () => { // Create commits on the working base const commits = await createCommits(git) // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([ commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the working base const _commits = await createCommits(git) // Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ..._commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and update with changes and commits on the working base (during the workflow), and commits on the base inbetween', async () => { // Create commits on the working base const commits = await createCommits(git) // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([ commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commitsOnBase = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Create commits on the working base const _commits = await createCommits(git) // Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ..._commits.commitMsgs, ...commitsOnBase.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and update using a different remote from the base', async () => { // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, FORK_REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', FORK_REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, FORK_REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with signoff on commit', async () => { // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, true, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() // Check signoff in commit body const commitBody = ( await git.exec(['log', `-1`, '--format=%b']) ).stdout.trim() expect(commitBody).toEqual( 'Signed-off-by: Committer Name <committer@example.com>' )
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, true, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() // Check signoff in commit body const _commitBody = ( await git.exec(['log', `-1`, '--format=%b']) ).stdout.trim() expect(_commitBody).toEqual( 'Signed-off-by: Committer Name <committer@example.com>' ) })
+it('tests create and update with multiple add-paths', async () => { // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_MULTI ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_MULTI ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with wildcard add-paths', async () => { // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_WILDCARD ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, '', BRANCH, REMOTE_NAME, false, ADD_PATHS_WILDCARD ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create with add-paths resolving to no changes when other changes exist', async () => { // Create tracked and untracked file changes await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, '', BRANCH, REMOTE_NAME, false, ['nonexistent/*'] ) expect(result.action).toEqual('none') expect(await gitLogMatches([INIT_COMMIT_MESSAGE])).toBeTruthy() })
+// Working Base is Not Base (WBNB)
+it('tests no changes resulting in no new branch being created (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('none') expect(await gitLogMatches([INIT_COMMIT_MESSAGE])).toBeTruthy() })
+it('tests create and update with a tracked file change (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create a tracked file change const trackedContent = await createFile(TRACKED_FILE) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(trackedContent) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create a tracked file change const _trackedContent = await createFile(TRACKED_FILE) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_trackedContent) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with an untracked file change (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create an untracked file change const untrackedContent = await createFile(UNTRACKED_FILE) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(UNTRACKED_FILE)).toEqual(untrackedContent) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create an untracked file change const _untrackedContent = await createFile(UNTRACKED_FILE) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(UNTRACKED_FILE)).toEqual(_untrackedContent) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with identical changes (WBNB)', async () => { // The pull request branch will not be updated
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create identical tracked and untracked file changes await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('not-updated') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with commits on the base inbetween (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commits = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and then an update with no changes (WBNB)', async () => { // This effectively reverts the branch back to match the base and results in no diff
+// Save the default branch tracked content const defaultTrackedContent = await getFileContent(TRACKED_FILE)
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Running with no update effectively reverts the branch back to match the base const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(defaultTrackedContent) expect(await gitLogMatches([INIT_COMMIT_MESSAGE])).toBeTruthy() })
+it('tests create, commits on the base, and update with identical changes to the base (WBNB)', async () => { // The changes on base effectively revert the branch back to match the base and results in no diff // This scenario will cause cherrypick to fail due to an empty commit. // The commit is empty because the changes now exist on the base.
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commits = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create the same tracked and untracked file changes that were made to the base const _changes = await createChanges( commits.changes.tracked, commits.changes.untracked ) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create, squash merge, and update with identical changes (WBNB)', async () => { // Branches that have been squash merged appear to have a diff with the base due to // different commits for the same changes. To prevent creating pull requests // unnecessarily we reset (rebase) the pull request branch when a reset would result // in no diff with the base. This will reset any undeleted branches after merging.
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create a commit on the base with the same changes as the branch // This simulates squash merge of the pull request const commits = await createCommits( git, 1, changes.tracked, changes.untracked ) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create the same tracked and untracked file changes (no change on update) const _changes = await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeFalsy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create, force push of base branch, and update with identical changes (WBNB)', async () => { // If the base branch is force pushed to a different commit when there is an open // pull request, the branch must be reset to rebase the changes on the base.
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Force push the base branch to a different commit const amendedCommitMessage = uuidv4() await git.commit(['--amend', '-m', amendedCommitMessage]) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create the same tracked and untracked file changes (no change on update) const _changes = await createChanges(changes.tracked, changes.untracked) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, amendedCommitMessage]) ).toBeTruthy() })
+it('tests create and update with commits on the working base (during the workflow) (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const commits = await createCommits(git) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(commits.changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual( commits.changes.untracked ) expect( await gitLogMatches([...commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const _commits = await createCommits(git) const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_commits.changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual( _commits.changes.untracked ) expect( await gitLogMatches([..._commits.commitMsgs, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with changes and commits on the working base (during the workflow) (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const commits = await createCommits(git) // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([ commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const _commits = await createCommits(git) // Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ..._commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and update with changes and commits on the working base (during the workflow), and commits on the base inbetween (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const commits = await createCommits(git) // Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([ commitMessage, ...commits.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commitsOnBase = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create commits on the working base const _commits = await createCommits(git) // Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ..._commits.commitMsgs, ...commitsOnBase.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+it('tests create and update using a different remote from the base (WBNB)', async () => { // Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, FORK_REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', FORK_REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Set the working base to a branch that is not the pull request base await git.checkout(NOT_BASE_BRANCH)
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, FORK_REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+// Working Base is Not a Ref (WBNR) // A commit is checked out leaving the repository in a "detached HEAD" state
+it('tests create and update in detached HEAD state (WBNR)', async () => { // Checkout the HEAD commit SHA const headSha = await git.revParse('HEAD') await git.checkout(headSha)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Checkout the HEAD commit SHA const _headSha = await git.revParse('HEAD') await git.checkout(_headSha)
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([_commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy() })
+it('tests create and update with commits on the base inbetween, in detached HEAD state (WBNR)', async () => { // Checkout the HEAD commit SHA const headSha = await git.revParse('HEAD') await git.checkout(headSha)
+// Create tracked and untracked file changes const changes = await createChanges() const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(result.action).toEqual('created') expect(await getFileContent(TRACKED_FILE)).toEqual(changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(changes.untracked) expect( await gitLogMatches([commitMessage, INIT_COMMIT_MESSAGE]) ).toBeTruthy()
+// Push pull request branch to remote await git.push([ '--force-with-lease', REMOTE_NAME, `HEAD:refs/heads/${BRANCH}` ])
+await afterTest(false) await beforeTest()
+// Create commits on the base const commitsOnBase = await createCommits(git) await git.push([ '--force', REMOTE_NAME, `HEAD:refs/heads/${DEFAULT_BRANCH}` ])
+// Checkout the HEAD commit SHA const _headSha = await git.revParse('HEAD') await git.checkout(_headSha)
+// Create tracked and untracked file changes const _changes = await createChanges() const _commitMessage = uuidv4() const _result = await createOrUpdateBranch( git, _commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) expect(_result.action).toEqual('updated') expect(_result.hasDiffWithBase).toBeTruthy() expect(await getFileContent(TRACKED_FILE)).toEqual(_changes.tracked) expect(await getFileContent(UNTRACKED_FILE)).toEqual(_changes.untracked) expect( await gitLogMatches([ _commitMessage, ...commitsOnBase.commitMsgs, INIT_COMMIT_MESSAGE ]) ).toBeTruthy() })
+// This failure mode is a limitation of the action. Controlling your own commits cannot be used in detached HEAD state. // https://github.com/peter-evans/create-pull-request/issues/902 it('tests failure to create with commits on the working base (during the workflow) in detached HEAD state (WBNR)', async () => { // Checkout the HEAD commit SHA const headSha = await git.revParse('HEAD') await git.checkout(headSha)
+// Create commits on the working base const commits = await createCommits(git) const commitMessage = uuidv4() const result = await createOrUpdateBranch( git, commitMessage, BASE, BRANCH, REMOTE_NAME, false, ADD_PATHS_DEFAULT ) // The action cannot successfully create the branch expect(result.action).toEqual('none') })})
+
+ 41  __test__/entrypoint.sh
+
+@@ -0,0 +1,41 @@#!/bin/sh -lset -euo pipefail
+# Save the working directoryWORKINGDIR=$PWD
+# Create and serve a remote repomkdir -p /git/remotegit config --global init.defaultBranch maingit init --bare /git/remote/test-base.gitgit daemon --verbose --enable=receive-pack --base-path=/git/remote --export-all /git/remote &>/dev/null &
+# Give the daemon time to startsleep 2
+# Create a local clone and make an initial commitmkdir -p /git/localgit clone git://127.0.0.1/test-base.git /git/local/test-basecd /git/local/test-basegit config --global user.email "you@example.com"git config --global user.name "Your Name"echo "#test-base" > README.mdgit add .git commit -m "initial commit"git push -ugit log -1 --pretty=onelinegit config --global --unset user.emailgit config --global --unset user.namegit config -l
+# Clone a server-side fork of the base repocd $WORKINGDIRgit clone --mirror git://127.0.0.1/test-base.git /git/remote/test-fork.gitcd /git/remote/test-fork.gitgit log -1 --pretty=oneline
+# Restore the working directorycd $WORKINGDIR
+# Execute integration testsjest int --runInBand
+
+ 49  __test__/git-auth-helper.int.test.ts
+
+@@ -0,0 +1,49 @@import {GitCommandManager} from '../lib/git-command-manager'import {GitAuthHelper} from '../lib/git-auth-helper'
+const REPO_PATH = '/git/local/test-base'
+const extraheaderConfigKey = 'http.https://github.com/.extraheader'
+describe('git-auth-helper tests', () => { let git: GitCommandManager let gitAuthHelper: GitAuthHelper
+beforeAll(async () => { git = await GitCommandManager.create(REPO_PATH) gitAuthHelper = new GitAuthHelper(git) })
+it('tests save and restore with no persisted auth', async () => { await gitAuthHelper.savePersistedAuth() await gitAuthHelper.restorePersistedAuth() })
+it('tests configure and removal of auth', async () => { await gitAuthHelper.configureToken('github-token') expect(await git.configExists(extraheaderConfigKey)).toBeTruthy() expect(await git.getConfigValue(extraheaderConfigKey)).toEqual( 'AUTHORIZATION: basic eC1hY2Nlc3MtdG9rZW46Z2l0aHViLXRva2Vu' )
+await gitAuthHelper.removeAuth() expect(await git.configExists(extraheaderConfigKey)).toBeFalsy() })
+it('tests save and restore of persisted auth', async () => { const extraheaderConfigValue = 'AUTHORIZATION: basic ***persisted-auth***' await git.config(extraheaderConfigKey, extraheaderConfigValue)
+await gitAuthHelper.savePersistedAuth()
+const exists = await git.configExists(extraheaderConfigKey) expect(exists).toBeFalsy()
+await gitAuthHelper.restorePersistedAuth()
+const configValue = await git.getConfigValue(extraheaderConfigKey) expect(configValue).toEqual(extraheaderConfigValue)
+await gitAuthHelper.removeAuth() })})
+
+ 23  __test__/integration-tests.sh
+
+@@ -0,0 +1,23 @@#!/usr/bin/env bashset -euo pipefail
+IMAGE="cpr-integration-tests:latest"ARG1=${1:-}
+if [[ "$(docker images -q $IMAGE 2> /dev/null)" == "" || $ARG1 == "build" ]]; then echo "Building Docker image $IMAGE ..."
+cat > Dockerfile << EOFFROM node:16-alpineRUN apk --no-cache add git git-daemonRUN npm install jest jest-environment-jsdom --globalWORKDIR /cprCOPY __test__/entrypoint.sh /entrypoint.shENTRYPOINT ["/entrypoint.sh"]EOF
+docker build --no-cache -t $IMAGE . rm Dockerfilefi
+docker run -v $PWD:/cpr $IMAGE
+
+ 165  __test__/utils.unit.test.ts
+
+@@ -0,0 +1,165 @@import * as path from 'path'import * as utils from '../lib/utils'
+const originalGitHubWorkspace = process.env['GITHUB_WORKSPACE']
+describe('utils tests', () => { beforeAll(() => { // GitHub workspace process.env['GITHUB_WORKSPACE'] = __dirname })
+afterAll(() => { // Restore GitHub workspace delete process.env['GITHUB_WORKSPACE'] if (originalGitHubWorkspace) { process.env['GITHUB_WORKSPACE'] = originalGitHubWorkspace } })
+test('getStringAsArray splits string input by newlines and commas', async () => { const array = utils.getStringAsArray('1, 2, 3\n4, 5, 6') expect(array.length).toEqual(6)
+const array2 = utils.getStringAsArray('') expect(array2.length).toEqual(0) })
+test('getRepoPath successfully returns the path to the repository', async () => { expect(utils.getRepoPath()).toEqual(process.env['GITHUB_WORKSPACE']) expect(utils.getRepoPath('foo')).toEqual( path.resolve(process.env['GITHUB_WORKSPACE'] || '', 'foo') ) })
+test('getRemoteDetail successfully parses remote URLs', async () => { const remote1 = utils.getRemoteDetail( 'https://github.com/peter-evans/create-pull-request' ) expect(remote1.protocol).toEqual('HTTPS') expect(remote1.repository).toEqual('peter-evans/create-pull-request')
+const remote2 = utils.getRemoteDetail( 'https://xxx:x-oauth-basic@github.com/peter-evans/create-pull-request' ) expect(remote2.protocol).toEqual('HTTPS') expect(remote2.repository).toEqual('peter-evans/create-pull-request')
+const remote3 = utils.getRemoteDetail( 'git@github.com:peter-evans/create-pull-request.git' ) expect(remote3.protocol).toEqual('SSH') expect(remote3.repository).toEqual('peter-evans/create-pull-request')
+const remote4 = utils.getRemoteDetail( 'https://github.com/peter-evans/create-pull-request.git' ) expect(remote4.protocol).toEqual('HTTPS') expect(remote4.repository).toEqual('peter-evans/create-pull-request')
+const remote5 = utils.getRemoteDetail( 'https://github.com/peter-evans/ungit' ) expect(remote5.protocol).toEqual('HTTPS') expect(remote5.repository).toEqual('peter-evans/ungit')
+const remote6 = utils.getRemoteDetail( 'https://github.com/peter-evans/ungit.git' ) expect(remote6.protocol).toEqual('HTTPS') expect(remote6.repository).toEqual('peter-evans/ungit')
+const remote7 = utils.getRemoteDetail( 'git@github.com:peter-evans/ungit.git' ) expect(remote7.protocol).toEqual('SSH') expect(remote7.repository).toEqual('peter-evans/ungit') })
+test('getRemoteDetail fails to parse a remote URL', async () => { const remoteUrl = 'https://github.com/peter-evans' try { utils.getRemoteDetail(remoteUrl) // Fail the test if an error wasn't thrown expect(true).toEqual(false) } catch (e: any) { expect(e.message).toEqual( `The format of '${remoteUrl}' is not a valid GitHub repository URL` ) } })
+test('getRemoteUrl successfully returns remote URLs', async () => { const url1 = utils.getRemoteUrl( 'HTTPS', 'github.com', 'peter-evans/create-pull-request' ) expect(url1).toEqual('https://github.com/peter-evans/create-pull-request')
+const url2 = utils.getRemoteUrl( 'SSH', 'github.com', 'peter-evans/create-pull-request' ) expect(url2).toEqual('git@github.com:peter-evans/create-pull-request.git')
+const url3 = utils.getRemoteUrl( 'HTTPS', 'mygithubserver.com', 'peter-evans/create-pull-request' ) expect(url3).toEqual( 'https://mygithubserver.com/peter-evans/create-pull-request' ) })
+test('secondsSinceEpoch returns the number of seconds since the Epoch', async () => { const seconds = `${utils.secondsSinceEpoch()}` expect(seconds.length).toEqual(10) })
+test('randomString returns strings of length 7', async () => { for (let i = 0; i < 1000; i++) { expect(utils.randomString().length).toEqual(7) } })
+test('parseDisplayNameEmail successfully parses display name email formats', async () => { const parsed1 = utils.parseDisplayNameEmail('abc def <abc@def.com>') expect(parsed1.name).toEqual('abc def') expect(parsed1.email).toEqual('abc@def.com')
+const parsed2 = utils.parseDisplayNameEmail( 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>' ) expect(parsed2.name).toEqual('github-actions[bot]') expect(parsed2.email).toEqual( '41898282+github-actions[bot]@users.noreply.github.com' ) })
+test('parseDisplayNameEmail fails to parse display name email formats', async () => { const displayNameEmail1 = 'abc@def.com' try { utils.parseDisplayNameEmail(displayNameEmail1) // Fail the test if an error wasn't thrown expect(true).toEqual(false) } catch (e: any) { expect(e.message).toEqual( `The format of '${displayNameEmail1}' is not a valid email address with display name` ) }
+const displayNameEmail2 = ' < >' try { utils.parseDisplayNameEmail(displayNameEmail2) // Fail the test if an error wasn't thrown expect(true).toEqual(false) } catch (e: any) { expect(e.message).toEqual( `The format of '${displayNameEmail2}' is not a valid email address with display name` ) } })})
+
+ 86  action.yml
+
+@@ -0,0 +1,86 @@name: 'Create Pull Request'description: 'Creates a pull request for changes to your repository in the actions workspace'inputs: token: description: 'GITHUB_TOKEN or a `repo` scoped Personal Access Token (PAT)' default: ${{ github.token }} path: description: > Relative path under $GITHUB_WORKSPACE to the repository. Defaults to $GITHUB_WORKSPACE. add-paths: description: > A comma or newline-separated list of file paths to commit. Paths should follow git's pathspec syntax. Defaults to adding all new and modified files. commit-message: description: 'The message to use when committing changes.' default: '[create-pull-request] automated change' committer: description: > The committer name and email address in the format `Display Name <email@address.com>`. Defaults to the GitHub Actions bot user. default: 'GitHub <noreply@github.com>' author: description: > The author name and email address in the format `Display Name <email@address.com>`. Defaults to the user who triggered the workflow run. default: '${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>' signoff: description: 'Add `Signed-off-by` line by the committer at the end of the commit log message.' default: false branch: description: 'The pull request branch name.' default: 'create-pull-request/patch' delete-branch: description: > Delete the `branch` when closing pull requests, and when undeleted after merging. Recommend `true`. default: false branch-suffix: description: 'The branch suffix type when using the alternative branching strategy.' base: description: > The pull request base branch. Defaults to the branch checked out in the workflow. push-to-fork: description: > A fork of the checked out parent repository to which the pull request branch will be pushed. e.g. `owner/repo-fork`. The pull request will be created to merge the fork's branch into the parent's base. title: description: 'The title of the pull request.' default: 'Changes by create-pull-request action' body: description: 'The body of the pull request.' default: 'Automated changes by [create-pull-request](https://github.com/peter-evans/create-pull-request) GitHub action' labels: description: 'A comma or newline separated list of labels.' assignees: description: 'A comma or newline separated list of assignees (GitHub usernames).' reviewers: description: 'A comma or newline separated list of reviewers (GitHub usernames) to request a review from.' team-reviewers: description: > A comma or newline separated list of GitHub teams to request a review from. Note that a `repo` scoped Personal Access Token (PAT) may be required. milestone: description: 'The number of the milestone to associate the pull request with.' draft: description: 'Create a draft pull request. It is not possible to change draft status after creation except through the web interface' default: falseoutputs: pull-request-number: description: 'The pull request number' pull-request-url: description: 'The URL of the pull request.' pull-request-operation: description: 'The pull request operation performed by the action, `created`, `updated` or `closed`.' pull-request-head-sha: description: 'The commit SHA of the pull request branch.'runs: using: 'node16' main: 'dist/index.js'branding: icon: 'git-pull-request' color: 'gray-dark'
+
+ 1,010  dist/bridge.js
+
+Load diff
+
+Large diffs are not rendered by default.
+
+ 977  dist/events.js
+
+Load diff
+
+Large diffs are not rendered by default.
+
+ 63,547  dist/index.js
+
+Load diff
+
+Large diffs are not rendered by default.
+
+ 469  dist/setup-node-sandbox.js
+
+Load diff
+
+Large diffs are not rendered by default.
+
+ 457  dist/setup-sandbox.js
+
+Load diff
+
+Large diffs are not rendered by default.
+
+ 68  docs/assets/cpr-gitgraph.htm
+
+@@ -0,0 +1,68 @@<!DOCTYPE html><html lang="en">
+<head> <meta charset="UTF-8"> <title>create-pull-request GitHub action</title></head>
+<body> <!-- partial:index.partial.html --> <div id="graph-container"></div> <!-- partial --> <script src='https://cdn.jsdelivr.net/npm/@gitgraph/js'></script> <script> const graphContainer = document.getElementById("graph-container");
+const customTemplate = GitgraphJS.templateExtend(GitgraphJS.TemplateName.Metro, { commit: { message: { displayAuthor: false, displayHash: false, }, }, });
+// Instantiate the graph. const gitgraph = GitgraphJS.createGitgraph(graphContainer, { template: customTemplate, orientation: "vertical-reverse" });
+const main = gitgraph.branch("main"); main.commit("Last commit on base"); const localMain = gitgraph.branch("<#1> main (local)"); localMain.commit({ subject: "<uncommitted changes>", body: "Changes to the local base during the workflow", }) const remotePatch = gitgraph.branch("create-pull-request/patch"); remotePatch.merge({ branch: localMain, commitOptions: { subject: "[create-pull-request] automated change", body: "Changes pushed to create the remote branch", }, }); main.commit("New commit on base");
+const localMain2 = gitgraph.branch("<#2> main (local)"); localMain2.commit({ subject: "<uncommitted changes>", body: "Changes to the updated local base during the workflow", }) remotePatch.merge({ branch: localMain2, commitOptions: { subject: "[create-pull-request] automated change", body: "Changes force pushed to update the remote branch", }, });
+main.merge(remotePatch);
+</script>
+</body>
+</html>
+
+ BIN +108 KB docs/assets/cpr-gitgraph.png
+
+Unable to render rich display
+
+ 6  docs/assets/logo.svg
+
+Unable to render rich display
+
+ BIN +327 KB docs/assets/pull-request-example.png
+
+Unable to render rich display
+
+ 371  docs/concepts-guidelines.md
+
+@@ -0,0 +1,371 @@# Concepts, guidelines and advanced usage
+This document covers terminology, how the action works, general usage guidelines, and advanced usage.
+- [Terminology](#terminology)- [Events and checkout](#events-and-checkout)- [How the action works](#how-the-action-works)- [Guidelines](#guidelines) - [Providing a consistent base](#providing-a-consistent-base) - [Events which checkout a commit](#events-which-checkout-a-commit) - [Restrictions on repository forks](#restrictions-on-repository-forks) - [Triggering further workflow runs](#triggering-further-workflow-runs) - [Security](#security)- [Advanced usage](#advanced-usage) - [Creating pull requests in a remote repository](#creating-pull-requests-in-a-remote-repository) - [Push using SSH (deploy keys)](#push-using-ssh-deploy-keys) - [Push pull request branches to a fork](#push-pull-request-branches-to-a-fork) - [Authenticating with GitHub App generated tokens](#authenticating-with-github-app-generated-tokens) - [GPG commit signature verification](#gpg-commit-signature-verification) - [Running in a container or on self-hosted runners](#running-in-a-container-or-on-self-hosted-runners)
+## Terminology
+[Pull requests](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests#about-pull-requests) are proposed changes to a repository branch that can be reviewed by a repository's collaborators before being accepted or rejected. 
+A pull request references two branches:
+- The `base` of a pull request is the branch you intend to change once the proposed changes are merged.- The `branch` of a pull request represents what you intend the `base` to look like when merged. It is the `base` branch *plus* changes that have been made to it.
+## Events and checkout
+This action expects repositories to be checked out with the official GitHub Actions [checkout](https://github.com/actions/checkout) action.For each [event type](https://docs.github.com/en/actions/reference/events-that-trigger-workflows) there is a default `GITHUB_SHA` that will be checked out.
+The default can be overridden by specifying a `ref` on checkout.
+```yml - uses: actions/checkout@v3 with: ref: develop```
+## How the action works
+Unless the `base` input is supplied, the action expects the target repository to be checked out on the pull request `base`&mdash;the branch you intend to modify with the proposed changes.
+Workflow steps:
+1. Checkout the `base` branch2. Make changes3. Execute `create-pull-request` action
+The following git diagram shows how the action creates and updates a pull request branch.
+![Create Pull Request GitGraph](assets/cpr-gitgraph.png)
+## Guidelines
+### Providing a consistent base
+For the action to work correctly it should be executed in a workflow that checks out a *consistent* base branch. This will be the base of the pull request unless overridden with the `base` input.
+This means your workflow should be consistently checking out the branch that you intend to modify once the PR is merged.
+In the following example, the [`push`](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#push) and [`create`](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#create) events both trigger the same workflow. This will cause the checkout action to checkout inconsistent branches and commits. Do *not* do this. It will cause multiple pull requests to be created for each additional `base` the action is executed against.
+```ymlon: push: create:jobs: example: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3```
+There may be use cases where it makes sense to execute the workflow on a branch that is not the base of the pull request. In these cases, the base branch can be specified with the `base` action input. The action will attempt to rebase changes made during the workflow on to the actual base.
+### Events which checkout a commit
+The [default checkout](#events-and-checkout) for the majority of events will leave the repository checked out on a branch.However, some events such as `release` and `pull_request` will leave the repository in a "detached HEAD" state.This is because they checkout a commit, not a branch.In these cases, you *must supply* the `base` input so the action can rebase changes made during the workflow for the pull request.
+Workflows triggered by [`pull_request`](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#pull_request) events will by default check out a merge commit. Set the `base` input as follows to base the new pull request on the current pull request's branch.
+```yml - uses: peter-evans/create-pull-request@v4 with: base: ${{ github.head_ref }}```
+Workflows triggered by [`release`](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#release) events will by default check out a tag. For most use cases, you will need to set the `base` input to the branch name of the tagged commit.
+```yml - uses: peter-evans/create-pull-request@v4 with: base: main```
+### Restrictions on repository forks
+GitHub Actions have imposed restrictions on workflow runs triggered by public repository forks.Private repositories can be configured to [enable workflows](https://docs.github.com/en/github/administering-a-repository/disabling-or-limiting-github-actions-for-a-repository#enabling-workflows-for-private-repository-forks) from forks to run without restriction.
+The restrictions apply to the `pull_request` event triggered by a fork opening a pull request in the upstream repository.
+- Events from forks cannot access secrets, except for the default `GITHUB_TOKEN`. > With the exception of GITHUB_TOKEN, secrets are not passed to the runner when a workflow is triggered from a forked repository. [GitHub Actions: Using encrypted secrets in a workflow](https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets#using-encrypted-secrets-in-a-workflow)
+- The `GITHUB_TOKEN` has read-only access when an event is triggered by a forked repository.
+[GitHub Actions: Permissions for the GITHUB_TOKEN](https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token#permissions-for-the-github_token)
+These restrictions mean that during a `pull_request` event triggered by a forked repository, actions have no write access to GitHub resources and will fail on any attempt.
+A job condition can be added to prevent workflows from executing when triggered by a repository fork.
+```ymlon: pull_requestjobs: example: runs-on: ubuntu-latest # Check if the event is not triggered by a fork if: github.event.pull_request.head.repo.full_name == github.repository```
+For further reading regarding the security of pull requests, see this GitHub blog post titled [Keeping your GitHub Actions and workflows secure: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)
+### Triggering further workflow runs
+Pull requests created by the action using the default `GITHUB_TOKEN` cannot trigger other workflows. If you have `on: pull_request` or `on: push` workflows acting as checks on pull requests, they will not run.
+> When you use the repository's `GITHUB_TOKEN` to perform tasks, events triggered by the `GITHUB_TOKEN` will not create a new workflow run. This prevents you from accidentally creating recursive workflow runs. For example, if a workflow run pushes code using the repository's `GITHUB_TOKEN`, a new workflow will not run even when the repository contains a workflow configured to run when `push` events occur.[GitHub Actions: Triggering a workflow from a workflow](https://docs.github.com/en/actions/using-workflows/triggering-a-workflow#triggering-a-workflow-from-a-workflow)
+#### Workarounds to trigger further workflow runs
+There are a number of workarounds with different pros and cons.
+- Use the default `GITHUB_TOKEN` and allow the action to create pull requests that have no checks enabled. Manually close pull requests and immediately reopen them. This will enable `on: pull_request` workflows to run and be added as checks. To prevent merging of pull requests without checks erroneously, use [branch protection rules](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests).
+- Use a `repo` scoped [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) created on an account that has write access to the repository that pull requests are being created in. This is the standard workaround and [recommended by GitHub](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token). However, the PAT cannot be scoped to a specific repository so the token becomes a very sensitive secret. If this is a concern, the PAT can instead be created for a dedicated [machine account](https://docs.github.com/en/github/site-policy/github-terms-of-service#3-account-requirements) that has collaborator access to the repository. Also note that because the account that owns the PAT will be the creator of pull requests, that user account will be unable to perform actions such as request changes or approve the pull request.
+- Use [SSH (deploy keys)](#push-using-ssh-deploy-keys) to push the pull request branch. This is arguably more secure than using a PAT because deploy keys can be set per repository. However, this method will only trigger `on: push` workflows.
+- Use a [machine account that creates pull requests from its own fork](#push-pull-request-branches-to-a-fork). This is the most secure because the PAT created only grants access to the machine account's fork, not the main repository. This method will trigger `on: pull_request` workflows to run. Workflows triggered `on: push` will not run because the push event is in the fork.
+- Use a [GitHub App to generate a token](#authenticating-with-github-app-generated-tokens) that can be used with this action. GitHub App generated tokens are more secure than using a PAT because GitHub App access permissions can be set with finer granularity and are scoped to only repositories where the App is installed. This method will trigger both `on: push` and `on: pull_request` workflows.
+### Security
+From a security perspective it's good practice to fork third-party actions, review the code, and use your fork of the action in workflows.By using third-party actions directly the risk exists that it could be modified to do something malicious, such as capturing secrets.
+Alternatively, use the action directly and reference the commit hash for the version you want to target.```yml - uses: thirdparty/foo-action@172ec762f2ac8e050062398456fccd30444f8f30```
+This action uses [ncc](https://github.com/vercel/ncc) to compile the Node.js code and dependencies into a single JavaScript file under the [dist](https://github.com/peter-evans/create-pull-request/tree/main/dist) directory.
+## Advanced usage
+### Creating pull requests in a remote repository
+Checking out a branch from a different repository from where the workflow is executing will make *that repository* the target for the created pull request. In this case, a `repo` scoped [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) is required.
+```yml - uses: actions/checkout@v3 with: token: ${{ secrets.PAT }} repository: owner/repo # Make changes to pull request here - uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }}```
+### Push using SSH (deploy keys)
+[Deploy keys](https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys) can be set per repository and so are arguably more secure than using a `repo` scoped [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token).Allowing the action to push with a configured deploy key will trigger `on: push` workflows. This makes it an alternative to using a PAT to trigger checks for pull requests.Note that you cannot use deploy keys alone to [create a pull request in a remote repository](#creating-pull-requests-in-a-remote-repository) because then using a PAT would become a requirement. This method only makes sense if creating a pull request in the repository where the workflow is running.
+How to use SSH (deploy keys) with create-pull-request action:
+1. [Create a new SSH key pair](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key) for your repository. Do not set a passphrase.2. Copy the contents of the public key (.pub file) to a new repository [deploy key](https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys) and check the box to "Allow write access."3. Add a secret to the repository containing the entire contents of the private key.4. As shown in the example below, configure `actions/checkout` to use the deploy key you have created.
+```yml steps: - uses: actions/checkout@v3 with: ssh-key: ${{ secrets.SSH_PRIVATE_KEY }} # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4```
+### Push pull request branches to a fork
+Instead of pushing pull request branches to the repository you want to update, you can push them to a fork of that repository.This allows you to employ the [principle of least privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege) by using a dedicated user acting as a [machine account](https://docs.github.com/en/github/site-policy/github-terms-of-service#3-account-requirements).This user only has `read` access to the main repository.It will use their own fork to push code and create the pull request.Note that if you choose to use this method (not give the machine account `write` access to the repository) the following inputs cannot be used: `labels`, `assignees`, `reviewers`, `team-reviewers` and `milestone`.
+1. Create a new GitHub user and login.2. Fork the repository that you will be creating pull requests in.3. Create a [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token).4. Logout and log back into your main user account.5. Add a secret to your repository containing the above PAT.6. As shown in the following example workflow, set the `push-to-fork` input to the full repository name of the fork.
+```yaml - uses: actions/checkout@v3 # Make changes to pull request here - uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.MACHINE_USER_PAT }} push-to-fork: machine-user/fork-of-repository```
+### Authenticating with GitHub App generated tokens
+A GitHub App can be created for the sole purpose of generating tokens for use with GitHub actions.These tokens can be used in place of `GITHUB_TOKEN` or a [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token).GitHub App generated tokens are more secure than using a PAT because GitHub App access permissions can be set with finer granularity and are scoped to only repositories where the App is installed.
+1. Create a minimal [GitHub App](https://docs.github.com/en/developers/apps/creating-a-github-app), setting the following fields:
+- Set `GitHub App name`. - Set `Homepage URL` to anything you like, such as your GitHub profile page. - Uncheck `Active` under `Webhook`. You do not need to enter a `Webhook URL`. - Under `Repository permissions: Contents` select `Access: Read & write`. - Under `Repository permissions: Pull requests` select `Access: Read & write`. - Under `Organization permissions: Members` select `Access: Read-only`. - **NOTE**: Only needed if you would like add teams as reviewers to PRs.
+2. Create a Private key from the App settings page and store it securely.
+3. Install the App on any repository where workflows will run requiring tokens.
+4. Set secrets on your repository containing the GitHub App ID, and the private key you created in step 2. e.g. `APP_ID`, `APP_PRIVATE_KEY`.
+5. The following example workflow shows how to use [tibdex/github-app-token](https://github.com/tibdex/github-app-token) to generate a token for use with this action.
+```yaml steps: - uses: actions/checkout@v3 - uses: tibdex/github-app-token@v1 id: generate-token with: app_id: ${{ secrets.APP_ID }} private_key: ${{ secrets.APP_PRIVATE_KEY }} # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ steps.generate-token.outputs.token }}```
+### GPG commit signature verification
+The action can use GPG to sign commits with a GPG key that you generate yourself.
+1. Follow GitHub's guide to [generate a new GPG key](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-gpg-key).
+2. [Add the public key](https://docs.github.com/en/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account) to the user account associated with the [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) that you will use with the action.
+3. Copy the private key to your clipboard, replacing `email@example.com` with the email address of your GPG key. ``` # macOS gpg --armor --export-secret-key email@example.com | pbcopy ```
+4. Paste the private key into a repository secret where the workflow will run. e.g. `GPG_PRIVATE_KEY`
+5. Create another repository secret for the key's passphrase, if applicable. e.g. `GPG_PASSPHRASE`
+6. The following example workflow shows how to use [crazy-max/ghaction-import-gpg](https://github.com/crazy-max/ghaction-import-gpg) to import your GPG key and allow the action to sign commits.
+Note that the `committer` email address *MUST* match the email address used to create your GPG key.
+```yaml steps: - uses: actions/checkout@v3 - uses: crazy-max/ghaction-import-gpg@v3 with: gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} passphrase: ${{ secrets.GPG_PASSPHRASE }} git-user-signingkey: true git-commit-gpgsign: true # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} committer: example <email@example.com>```
+### Running in a container or on self-hosted runners
+This action can be run inside a container, or on [self-hosted runners](https://docs.github.com/en/actions/hosting-your-own-runners), by installing the necessary dependencies.
+This action requires `git` to be installed and on the `PATH`. Note that `actions/checkout` requires Git 2.18 or higher to be installed, otherwise it will just download the source of the repository instead of cloning it.
+The following examples of running in a container show the dependencies being installed during the workflow, but they could also be pre-installed in a custom image.
+**Alpine container example:**```ymljobs: createPullRequestAlpine: runs-on: ubuntu-latest container: image: alpine steps: - name: Install dependencies run: apk --no-cache add git - uses: actions/checkout@v3 # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4```
+**Ubuntu container example:**```ymljobs: createPullRequestAlpine: runs-on: ubuntu-latest container: image: ubuntu steps: - name: Install dependencies run: | apt-get update apt-get install -y software-properties-common add-apt-repository -y ppa:git-core/ppa apt-get install -y git - uses: actions/checkout@v3 # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4```
+
+ 634  docs/examples.md
+
+@@ -0,0 +1,634 @@# Examples
+- [Use case: Create a pull request to update X on push](#use-case-create-a-pull-request-to-update-x-on-push) - [Update project authors](#update-project-authors) - [Keep a branch up-to-date with another](#keep-a-branch-up-to-date-with-another)- [Use case: Create a pull request to update X on release](#use-case-create-a-pull-request-to-update-x-on-release) - [Update changelog](#update-changelog)- [Use case: Create a pull request to update X periodically](#use-case-create-a-pull-request-to-update-x-periodically) - [Update NPM dependencies](#update-npm-dependencies) - [Update Gradle dependencies](#update-gradle-dependencies) - [Update Cargo dependencies](#update-cargo-dependencies) - [Update SwaggerUI for GitHub Pages](#update-swaggerui-for-github-pages) - [Keep a fork up-to-date with its upstream](#keep-a-fork-up-to-date-with-its-upstream) - [Spider and download a website](#spider-and-download-a-website)- [Use case: Create a pull request to update X by calling the GitHub API](#use-case-create-a-pull-request-to-update-x-by-calling-the-github-api) - [Call the GitHub API from an external service](#call-the-github-api-from-an-external-service) - [Call the GitHub API from another GitHub Actions workflow](#call-the-github-api-from-another-github-actions-workflow)- [Use case: Create a pull request to modify/fix pull requests](#use-case-create-a-pull-request-to-modifyfix-pull-requests) - [autopep8](#autopep8)- [Misc workflow tips](#misc-workflow-tips) - [Filtering push events](#filtering-push-events) - [Dynamic configuration using variables](#dynamic-configuration-using-variables) - [Setting the pull request body from a file](#setting-the-pull-request-body-from-a-file) - [Using a markdown template](#using-a-markdown-template) - [Debugging GitHub Actions](#debugging-github-actions)
+
+## Use case: Create a pull request to update X on push
+This pattern will work well for updating any kind of static content based on pushed changes. Care should be taken when using this pattern in repositories with a high frequency of commits.
+### Update project authors
+Raises a pull request to update a file called `AUTHORS` with the git user names and email addresses of contributors.
+```ymlname: Update AUTHORSon: push: branches: - mainjobs: updateAuthors: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: fetch-depth: 0 - name: Update AUTHORS run: | git log --format='%aN <%aE>%n%cN <%cE>' | sort -u > AUTHORS - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: commit-message: update authors title: Update AUTHORS body: Credit new contributors by updating AUTHORS branch: update-authors```### Keep a branch up-to-date with anotherThis is a use case where a branch should be kept up to date with another by opening a pull request to update it. The pull request should then be updated with new changes until it is merged or closed.In this example scenario, a branch called `production` should be updated via pull request to keep it in sync with `main`. Merging the pull request is effectively promoting those changes to production.```ymlname: Create production promotion pull requeston: push: branches: - mainjobs: productionPromotion: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: ref: production - name: Reset promotion branch run: | git fetch origin main:main git reset --hard main - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: branch: production-promotion```## Use case: Create a pull request to update X on releaseThis pattern will work well for updating any kind of static content based on the tagged commit of a release. Note that because `release` is one of the [events which checkout a commit](concepts-guidelines.md#events-which-checkout-a-commit) it is necessary to supply the `base` input to the action.### Update changelogRaises a pull request to update the `CHANGELOG.md` file based on the tagged commit of the release.Note that [git-chglog](https://github.com/git-chglog/git-chglog/) requires some configuration files to exist in the repository before this workflow will work.This workflow assumes the tagged release was made on a default branch called `main`.```ymlname: Update Changelogon: release: types: [published]jobs: updateChangelog: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: fetch-depth: 0 - name: Update Changelog run: | curl -o git-chglog -L https://github.com/git-chglog/git-chglog/releases/download/0.9.1/git-chglog_linux_amd64 chmod u+x git-chglog ./git-chglog -o CHANGELOG.md rm git-chglog - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: commit-message: update changelog title: Update Changelog body: Update changelog to reflect release changes branch: update-changelog base: main```## Use case: Create a pull request to update X periodicallyThis pattern will work well for updating any kind of static content from an external source. The workflow executes on a schedule and raises a pull request when there are changes.### Update NPM dependenciesThis workflow will create a pull request for npm dependencies.It works best in combination with a build workflow triggered on `push` and `pull_request`.A [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) can be used in order for the creation of the pull request to trigger further workflows. See the [documentation here](concepts-guidelines.md#triggering-further-workflow-runs) for further details.```ymlname: Update Dependencieson: schedule: - cron: '0 10 * * 1'jobs: update-dep: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-node@v3 with: node-version: '16.x' - name: Update dependencies run: | npx -p npm-check-updates ncu -u npm install - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} commit-message: Update dependencies title: Update dependencies body: | - Dependency updates Auto-generated by [create-pull-request][1] [1]: https://github.com/peter-evans/create-pull-request branch: update-dependencies```The above workflow works best in combination with a build workflow triggered on `push` and `pull_request`.```ymlname: CIon: push: branches: [main] pull_request: branches: [main]jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-node@v3 with: node-version: 16.x - run: npm ci - run: npm run test - run: npm run build```### Update Gradle dependenciesThe following workflow will create a pull request for Gradle dependencies.It requires first configuring your project to use Gradle lockfiles.See [here](https://github.com/peter-evans/gradle-auto-dependency-updates) for how to configure your project and use the following workflow.```ymlname: Update Dependencieson: schedule: - cron: '0 1 * * 1'jobs: update-dep: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-java@v2 with: distribution: 'temurin' java-version: 1.8 - name: Grant execute permission for gradlew run: chmod +x gradlew - name: Perform dependency resolution and write new lockfiles run: ./gradlew dependencies --write-locks - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} commit-message: Update dependencies title: Update dependencies body: | - Dependency updates Auto-generated by [create-pull-request][1] [1]: https://github.com/peter-evans/create-pull-request branch: update-dependencies```### Update Cargo dependenciesThe following workflow will create a pull request for Cargo dependencies.It optionally uses [`cargo-edit`](https://github.com/killercup/cargo-edit) to update `Cargo.toml` and keep it in sync with `Cargo.lock`.```ymlname: Update Dependencieson: schedule: - cron: '0 1 * * 1'jobs: update-dep: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Update dependencies run: | cargo install cargo-edit cargo update cargo upgrade --to-lockfile - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} commit-message: Update dependencies title: Update dependencies body: | - Dependency updates Auto-generated by [create-pull-request][1] [1]: https://github.com/peter-evans/create-pull-request branch: update-dependencies```### Update SwaggerUI for GitHub PagesWhen using [GitHub Pages to host Swagger documentation](https://github.com/peter-evans/swagger-github-pages), this workflow updates the repository with the latest distribution of [SwaggerUI](https://github.com/swagger-api/swagger-ui).You must create a file called `swagger-ui.version` at the root of your repository before running.```ymlname: Update Swagger UIon: schedule: - cron: '0 10 * * *'jobs: updateSwagger: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Get Latest Swagger UI Release id: swagger-ui run: | release_tag=$(curl -sL https://api.github.com/repos/swagger-api/swagger-ui/releases/latest | jq -r ".tag_name") echo "release_tag=$release_tag" >> $GITHUB_OUTPUT current_tag=$(<swagger-ui.version) echo "current_tag=$current_tag" >> $GITHUB_OUTPUT - name: Update Swagger UI if: steps.swagger-ui.outputs.current_tag != steps.swagger-ui.outputs.release_tag env: RELEASE_TAG: ${{ steps.swagger-ui.outputs.release_tag }} SWAGGER_YAML: "swagger.yaml" run: | # Delete the dist directory and index.html rm -fr dist index.html # Download the release curl -sL -o $RELEASE_TAG https://api.github.com/repos/swagger-api/swagger-ui/tarball/$RELEASE_TAG # Extract the dist directory tar -xzf $RELEASE_TAG --strip-components=1 $(tar -tzf $RELEASE_TAG | head -1 | cut -f1 -d"/")/dist rm $RELEASE_TAG # Move index.html to the root mv dist/index.html . # Fix references in index.html sed -i "s|https://petstore.swagger.io/v2/swagger.json|$SWAGGER_YAML|g" index.html sed -i "s|href=\"./|href=\"dist/|g" index.html sed -i "s|src=\"./|src=\"dist/|g" index.html # Update current release echo ${{ steps.swagger-ui.outputs.release_tag }} > swagger-ui.version - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: commit-message: Update swagger-ui to ${{ steps.swagger-ui.outputs.release_tag }} title: Update SwaggerUI to ${{ steps.swagger-ui.outputs.release_tag }} body: | Updates [swagger-ui][1] to ${{ steps.swagger-ui.outputs.release_tag }} Auto-generated by [create-pull-request][2] [1]: https://github.com/swagger-api/swagger-ui [2]: https://github.com/peter-evans/create-pull-request labels: dependencies, automated pr branch: swagger-ui-updates```### Keep a fork up-to-date with its upstreamThis example is designed to be run in a seperate repository from the fork repository itself.The aim of this is to prevent committing anything to the fork's default branch would cause it to differ from the upstream.In the following example workflow, `owner/repo` is the upstream repository and `fork-owner/repo` is the fork. It assumes the default branch of the upstream repository is called `main`.The [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) should have `repo` scope. Additionally, if the upstream makes changes to the `.github/workflows` directory, the action will be unable to push the changes to a branch and throw the error "_(refusing to allow a GitHub App to create or update workflow `.github/workflows/xxx.yml` without `workflows` permission)_". To allow these changes to be pushed to the fork, add the `workflow` scope to the PAT. Of course, allowing this comes with the risk that the workflow changes from the upstream could run and do something unexpected. Disabling GitHub Actions in the fork is highly recommended to prevent this.When you merge the pull request make sure to choose the [`Rebase and merge`](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-merges#rebase-and-merge-your-pull-request-commits) option. This will make the fork's commits match the commits on the upstream.```ymlname: Update forkon: schedule: - cron: '0 0 * * 0'jobs: updateFork: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: repository: fork-owner/repo - name: Reset the default branch with upstream changes run: | git remote add upstream https://github.com/owner/repo.git git fetch upstream main:upstream-main git reset --hard upstream-main - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} branch: upstream-changes```### Spider and download a websiteThis workflow spiders a website and downloads the content. Any changes to the website will be raised in a pull request.```ymlname: Download Websiteon: schedule: - cron: '0 10 * * *'jobs: format: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Download website run: | wget \ --recursive \ --level=2 \ --wait=1 \ --no-clobber \ --page-requisites \ --html-extension \ --convert-links \ --domains quotes.toscrape.com \ http://quotes.toscrape.com/ - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: commit-message: update local website copy title: Automated Updates to Local Website Copy body: This is an auto-generated PR with website updates. branch: website-updates```## Use case: Create a pull request to update X by calling the GitHub APIYou can use the GitHub API to trigger a webhook event called [`repository_dispatch`](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch) when you want to trigger a workflow for any activity that happens outside of GitHub.This pattern will work well for updating any kind of static content from an external source.You can modify any of the examples in the previous section to work in this fashion.Set the workflow to execute `on: repository_dispatch`.```ymlon: repository_dispatch: types: [create-pull-request]```### Call the GitHub API from an external serviceAn `on: repository_dispatch` workflow can be triggered by a call to the GitHub API as follows.- `[username]` is a GitHub username- `[token]` is a `repo` scoped [Personal Access Token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)- `[repository]` is the name of the repository the workflow resides in.```curl -XPOST -u "[username]:[token]" \ -H "Accept: application/vnd.github.everest-preview+json" \ -H "Content-Type: application/json" \ https://api.github.com/repos/[username]/[repository]/dispatches \ --data '{"event_type": "create-pull-request"}'```### Call the GitHub API from another GitHub Actions workflowAn `on: repository_dispatch` workflow can be triggered from another workflow with [repository-dispatch](https://github.com/peter-evans/repository-dispatch) action.```yml- name: Repository Dispatch uses: peter-evans/repository-dispatch@v2 with: token: ${{ secrets.REPO_ACCESS_TOKEN }} repository: username/my-repo event-type: create-pull-request client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'```## Use case: Create a pull request to modify/fix pull requests**Note**: While the following approach does work, my strong recommendation would be to use a slash command style "ChatOps" solution for operations on pull requests. See [slash-command-dispatch](https://github.com/peter-evans/slash-command-dispatch) for such a solution.This is a pattern that lends itself to automated code linting and fixing. A pull request can be created to fix or modify something during an `on: pull_request` workflow. The pull request containing the fix will be raised with the original pull request as the base. This can be then be merged to update the original pull request and pass any required tests.Note that due to [token restrictions on public repository forks](https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token#permissions-for-the-github_token), workflows for this use case do not work for pull requests raised from forks.Private repositories can be configured to [enable workflows](https://docs.github.com/en/github/administering-a-repository/disabling-or-limiting-github-actions-for-a-repository#enabling-workflows-for-private-repository-forks) from forks to run without restriction. ### autopep8The following is an example workflow for a use case where [autopep8 action](https://github.com/peter-evans/autopep8) runs as both a check on pull requests and raises a further pull request to apply code fixes.How it works:1. When a pull request is raised the workflow executes as a check2. If autopep8 makes any fixes a pull request will be raised for those fixes to be merged into the current pull request branch. The workflow then deliberately causes the check to fail.3. When the pull request containing the fixes is merged the workflow runs again. This time autopep8 makes no changes and the check passes.4. The original pull request can now be merged.```ymlname: autopep8on: pull_requestjobs: autopep8: # Check if the PR is not raised by this workflow and is not from a fork if: startsWith(github.head_ref, 'autopep8-patches') == false && github.event.pull_request.head.repo.full_name == github.repository runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: ref: ${{ github.head_ref }} - name: autopep8 id: autopep8 uses: peter-evans/autopep8@v1 with: args: --exit-code --recursive --in-place --aggressive --aggressive . - name: Set autopep8 branch name id: vars run: | branch-name="autopep8-patches/${{ github.head_ref }}" echo "branch-name=$branch-name" >> $GITHUB_OUTPUT - name: Create Pull Request if: steps.autopep8.outputs.exit-code == 2 uses: peter-evans/create-pull-request@v4 with: commit-message: autopep8 action fixes title: Fixes by autopep8 action body: This is an auto-generated PR with fixes by autopep8. labels: autopep8, automated pr branch: ${{ steps.vars.outputs.branch-name }} - name: Fail if autopep8 made changes if: steps.autopep8.outputs.exit-code == 2 run: exit 1```## Misc workflow tips### Filtering push eventsFor workflows using `on: push` you may want to ignore push events for tags and only execute for branches. Specifying `branches` causes only events on branches to trigger the workflow. The `'**'` wildcard will match any branch name.```ymlon: push: branches: - '**' ```If you have a workflow that contains jobs to handle push events on branches as well as tags, you can make sure that the job where you use `create-pull-request` action only executes when `github.ref` is a branch by using an `if` condition as follows.```ymlon: pushjobs: createPullRequest: if: startsWith(github.ref, 'refs/heads/') runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 ... someOtherJob: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 ...```### Dynamic configuration using variablesThe following examples show how configuration for the action can be dynamically defined in a previous workflow step.Note that the step where output variables are defined must have an id.```yml - name: Set output variables id: vars run: | pr_title="[Test] Add report file $(date +%d-%m-%Y)" pr_body="This PR was auto-generated on $(date +%d-%m-%Y) \ by [create-pull-request](https://github.com/peter-evans/create-pull-request)." echo "pr_title=$pr_title" >> $GITHUB_OUTPUT echo "pr_body=$pr_body" >> $GITHUB_OUTPUT - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: title: ${{ steps.vars.outputs.pr_title }} body: ${{ steps.vars.outputs.pr_body }}```### Setting the pull request body from a fileThis example shows how file content can be read into a variable and passed to the action.```yml - id: get-pr-body run: | body=$(cat pr-body.txt) delimiter="$(openssl rand -hex 8)" echo "body<<$delimiter" >> $GITHUB_OUTPUT echo "$body" >> $GITHUB_OUTPUT echo "$delimiter" >> $GITHUB_OUTPUT - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: body: ${{ steps.get-pr-body.outputs.body }}```### Using a markdown templateIn this example, a markdown template file is added to the repository at `.github/pull-request-template.md` with the following content.```This is a test pull request templateRender template variables such as {{ .foo }} and {{ .bar }}.```The template is rendered using the [render-template](https://github.com/chuhlomin/render-template) action and the result is used to create the pull request.```yml - name: Render template id: template uses: chuhlomin/render-template@v1.4 with: template: .github/pull-request-template.md vars: | foo: this bar: that - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: body: ${{ steps.template.outputs.result }}```### Debugging GitHub Actions#### Runner Diagnostic Logging[Runner diagnostic logging](https://docs.github.com/en/actions/configuring-and-managing-workflows/managing-a-workflow-run#enabling-runner-diagnostic-logging) provides additional log files that contain information about how a runner is executing an action.To enable runner diagnostic logging, set the secret `ACTIONS_RUNNER_DEBUG` to `true` in the repository that contains the workflow.#### Step Debug Logging[Step debug logging](https://docs.github.com/en/actions/configuring-and-managing-workflows/managing-a-workflow-run#enabling-step-debug-logging) increases the verbosity of a job's logs during and after a job's execution.To enable step debug logging set the secret `ACTIONS_STEP_DEBUG` to `true` in the repository that contains the workflow.#### Output Various Contexts```yml steps: - name: Dump GitHub context env: GITHUB_CONTEXT: ${{ toJson(github) }} run: echo "$GITHUB_CONTEXT" - name: Dump job context env: JOB_CONTEXT: ${{ toJson(job) }} run: echo "$JOB_CONTEXT" - name: Dump steps context env: STEPS_CONTEXT: ${{ toJson(steps) }} run: echo "$STEPS_CONTEXT" - name: Dump runner context env: RUNNER_CONTEXT: ${{ toJson(runner) }} run: echo "$RUNNER_CONTEXT" - name: Dump strategy context env: STRATEGY_CONTEXT: ${{ toJson(strategy) }} run: echo "$STRATEGY_CONTEXT" - name: Dump matrix context env: MATRIX_CONTEXT: ${{ toJson(matrix) }} run: echo "$MATRIX_CONTEXT"```
+
+ 87  docs/updating.md
+
+@@ -0,0 +1,87 @@## Updating from `v3` to `v4`
+### Breaking changes
+- The `add-paths` input no longer accepts `-A` as a valid value. When committing all new and modified files the `add-paths` input should be omitted.
+- If using self-hosted runners or GitHub Enterprise Server, there are minimum requirements for `v4` to run. See "What's new" below for details.
+### What's new
+- Updated runtime to Node.js 16 - The action now requires a minimum version of v2.285.0 for the [Actions Runner](https://github.com/actions/runner/releases/tag/v2.285.0). - If using GitHub Enterprise Server, the action requires [GHES 3.4](https://docs.github.com/en/enterprise-server@3.4/admin/release-notes) or later.
+## Updating from `v2` to `v3`
+### Breaking changes
+- The `author` input now defaults to the user who triggered the workflow run. This default is set via [action.yml](../action.yml) as `${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>`, where `github.actor` is the GitHub user account associated with the run. For example, `peter-evans <peter-evans@users.noreply.github.com>`.
+To continue to use the `v2` default, set the `author` input as follows. ```yaml - uses: peter-evans/create-pull-request@v3 with: author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com> ```
+- The `author` and `committer` inputs are no longer cross-used if only one is supplied. Additionally, when neither input is set, the `author` and `committer` are no longer determined from an existing identity set in git config. In both cases, the inputs will fall back to their default set in [action.yml](../action.yml).
+- Deprecated inputs `project` and `project-column` have been removed in favour of an additional action step. See [Create a project card](https://github.com/peter-evans/create-pull-request#create-a-project-card) for details.
+- Deprecated output `pr_number` has been removed in favour of `pull-request-number`.
+- Input `request-to-parent` has been removed in favour of `push-to-fork`. This greatly simplifies pushing the pull request branch to a fork of the parent repository. See [Push pull request branches to a fork](concepts-guidelines.md#push-pull-request-branches-to-a-fork) for details.
+e.g. ```yaml - uses: actions/checkout@v2 # Make changes to pull request here - uses: peter-evans/create-pull-request@v3 with: token: ${{ secrets.MACHINE_USER_PAT }} push-to-fork: machine-user/fork-of-repository ```
+### What's new
+- The action has been converted to Typescript giving it a significant performance improvement.
+- If you run this action in a container, or on [self-hosted runners](https://docs.github.com/en/actions/hosting-your-own-runners), `python` and `pip` are no longer required dependencies. See [Running in a container or on self-hosted runners](concepts-guidelines.md#running-in-a-container-or-on-self-hosted-runners) for details.
+- Inputs `labels`, `assignees`, `reviewers` and `team-reviewers` can now be newline separated, or comma separated. e.g. ```yml labels: | chore dependencies automated ```
+## Updating from `v1` to `v2`
+### Breaking changes
+- `v2` now expects repositories to be checked out with `actions/checkout@v2`
+To use `actions/checkout@v1` the following step to checkout the branch is necessary. ```yml - uses: actions/checkout@v1 - name: Checkout branch run: git checkout "${GITHUB_REF:11}" ```
+- The two branch naming strategies have been swapped. Fixed-branch naming strategy is now the default. i.e. `branch-suffix: none` is now the default and should be removed from configuration if set.
+- `author-name`, `author-email`, `committer-name`, `committer-email` have been removed in favour of `author` and `committer`. They can both be set in the format `Display Name <email@address.com>`
+If neither `author` or `committer` are set the action will default to making commits as the GitHub Actions bot user.
+### What's new
+- Unpushed commits made during the workflow before the action runs will now be considered as changes to be raised in the pull request. See [Create your own commits](https://github.com/peter-evans/create-pull-request#create-your-own-commits) for details.- New commits made to the pull request base will now be taken into account when pull requests are updated.- If an updated pull request no longer differs from its base it will automatically be closed and the pull request branch deleted.
+
+ 11  jest.config.js
+
+@@ -0,0 +1,11 @@module.exports = { clearMocks: true, moduleFileExtensions: ['js', 'ts'], testEnvironment: 'node', testMatch: ['**/*.test.ts'], testRunner: 'jest-circus/runner', transform: { '^.+\\.ts$': 'ts-jest' }, verbose: true}
+
+ 14,160  package-lock.json
+
+Load diff
+
+Large diffs are not rendered by default.
+
+ 58  package.json
+
+@@ -0,0 +1,58 @@{ "name": "create-pull-request", "version": "4.0.0", "private": true, "description": "Creates a pull request for changes to your repository in the actions workspace", "main": "lib/main.js", "scripts": { "build": "tsc && ncc build", "format": "prettier --write '**/*.ts'", "format-check": "prettier --check '**/*.ts'", "lint": "eslint src/**/*.ts", "test:unit": "jest unit", "test:int": "__test__/integration-tests.sh", "test": "npm run test:unit && npm run test:int" }, "repository": { "type": "git", "url": "git+https://github.com/peter-evans/create-pull-request.git" }, "keywords": [ "actions", "pull", "request" ], "author": "Peter Evans", "license": "MIT", "bugs": { "url": "https://github.com/peter-evans/create-pull-request/issues" }, "homepage": "https://github.com/peter-evans/create-pull-request", "dependencies": { "@actions/core": "^1.10.0", "@actions/exec": "^1.1.1", "@octokit/core": "^3.5.1", "@octokit/plugin-paginate-rest": "^2.17.0", "@octokit/plugin-rest-endpoint-methods": "^5.13.0", "proxy-agent": "^5.0.0", "uuid": "^8.3.2" }, "devDependencies": { "@types/jest": "^27.5.0", "@types/node": "^16.11.11", "@typescript-eslint/parser": "^5.5.0", "@vercel/ncc": "^0.32.0", "eslint": "^8.3.0", "eslint-import-resolver-typescript": "^2.5.0", "eslint-plugin-github": "^4.3.5", "eslint-plugin-import": "^2.25.3", "eslint-plugin-jest": "^26.1.5", "jest": "^28.1.0", "jest-circus": "^28.1.0", "jest-environment-jsdom": "^28.1.0", "js-yaml": "^4.1.0", "prettier": "^2.5.0", "ts-jest": "^28.0.2", "typescript": "^4.5.2" }}
+
+ 294  src/create-or-update-branch.ts
+
+@@ -0,0 +1,294 @@import * as core from '@actions/core'import {GitCommandManager} from './git-command-manager'import {v4 as uuidv4} from 'uuid'
+const CHERRYPICK_EMPTY = 'The previous cherry-pick is now empty, possibly due to conflict resolution.'const NOTHING_TO_COMMIT = 'nothing to commit, working tree clean'
+export enum WorkingBaseType { Branch = 'branch', Commit = 'commit'}
+export async function getWorkingBaseAndType( git: GitCommandManager): Promise<[string, WorkingBaseType]> { const symbolicRefResult = await git.exec( ['symbolic-ref', 'HEAD', '--short'], true ) if (symbolicRefResult.exitCode == 0) { // A ref is checked out return [symbolicRefResult.stdout.trim(), WorkingBaseType.Branch] } else { // A commit is checked out (detached HEAD) const headSha = await git.revParse('HEAD') return [headSha, WorkingBaseType.Commit] }}
+export async function tryFetch( git: GitCommandManager, remote: string, branch: string): Promise<boolean> { try { await git.fetch([`${branch}:refs/remotes/${remote}/${branch}`], remote, [ '--force' ]) return true } catch { return false }}
+// Return the number of commits that branch2 is ahead of branch1async function commitsAhead( git: GitCommandManager, branch1: string, branch2: string): Promise<number> { const result = await git.revList( [`${branch1}...${branch2}`], ['--right-only', '--count'] ) return Number(result)}
+// Return true if branch2 is ahead of branch1async function isAhead( git: GitCommandManager, branch1: string, branch2: string): Promise<boolean> { return (await commitsAhead(git, branch1, branch2)) > 0}
+// Return the number of commits that branch2 is behind branch1async function commitsBehind( git: GitCommandManager, branch1: string, branch2: string): Promise<number> { const result = await git.revList( [`${branch1}...${branch2}`], ['--left-only', '--count'] ) return Number(result)}
+// Return true if branch2 is behind branch1async function isBehind( git: GitCommandManager, branch1: string, branch2: string): Promise<boolean> { return (await commitsBehind(git, branch1, branch2)) > 0}
+// Return true if branch2 is even with branch1async function isEven( git: GitCommandManager, branch1: string, branch2: string): Promise<boolean> { return ( !(await isAhead(git, branch1, branch2)) && !(await isBehind(git, branch1, branch2)) )}
+function splitLines(multilineString: string): string[] { return multilineString .split('\n') .map(s => s.trim()) .filter(x => x !== '')}
+export async function createOrUpdateBranch( git: GitCommandManager, commitMessage: string, base: string, branch: string, branchRemoteName: string, signoff: boolean, addPaths: string[]): Promise<CreateOrUpdateBranchResult> { // Get the working base. // When a ref, it may or may not be the actual base. // When a commit, we must rebase onto the actual base. const [workingBase, workingBaseType] = await getWorkingBaseAndType(git) core.info(`Working base is ${workingBaseType} '${workingBase}'`) if (workingBaseType == WorkingBaseType.Commit && !base) { throw new Error(`When in 'detached HEAD' state, 'base' must be supplied.`) }
+// If the base is not specified it is assumed to be the working base. base = base ? base : workingBase const baseRemote = 'origin'
+// Set the default return values const result: CreateOrUpdateBranchResult = { action: 'none', base: base, hasDiffWithBase: false, headSha: '' }
+// Save the working base changes to a temporary branch const tempBranch = uuidv4() await git.checkout(tempBranch, 'HEAD') // Commit any uncommitted changes if (await git.isDirty(true, addPaths)) { core.info('Uncommitted changes found. Adding a commit.') const aopts = ['add'] if (addPaths.length > 0) { aopts.push(...['--', ...addPaths]) } else { aopts.push('-A') } await git.exec(aopts, true) const popts = ['-m', commitMessage] if (signoff) { popts.push('--signoff') } const commitResult = await git.commit(popts, true) // 'nothing to commit' can occur when core.autocrlf is set to true if ( commitResult.exitCode != 0 && !commitResult.stdout.includes(NOTHING_TO_COMMIT) ) { throw new Error(`Unexpected error: ${commitResult.stderr}`) } }
+// Remove uncommitted tracked and untracked changes await git.exec(['reset', '--hard']) await git.exec(['clean', '-f', '-d'])
+// Perform fetch and reset the working base // Commits made during the workflow will be removed if (workingBaseType == WorkingBaseType.Branch) { core.info(`Resetting working base branch '${workingBase}'`) if (branchRemoteName == 'fork') { // If pushing to a fork we must fetch with 'unshallow' to avoid the following error on git push // ! [remote rejected] HEAD -> tests/push-branch-to-fork (shallow update not allowed) await git.fetch([`${workingBase}:${workingBase}`], baseRemote, [ '--force' ]) } else { // If the remote is 'origin' we can git reset await git.checkout(workingBase) await git.exec(['reset', '--hard', `${baseRemote}/${workingBase}`]) } }
+// If the working base is not the base, rebase the temp branch commits // This will also be true if the working base type is a commit if (workingBase != base) { core.info( `Rebasing commits made to ${workingBaseType} '${workingBase}' on to base branch '${base}'` ) // Checkout the actual base await git.fetch([`${base}:${base}`], baseRemote, ['--force']) await git.checkout(base) // Cherrypick commits from the temporary branch starting from the working base const commits = await git.revList( [`${workingBase}..${tempBranch}`, '.'], ['--reverse'] ) for (const commit of splitLines(commits)) { const result = await git.cherryPick( ['--strategy=recursive', '--strategy-option=theirs', commit], true ) if (result.exitCode != 0 && !result.stderr.includes(CHERRYPICK_EMPTY)) { throw new Error(`Unexpected error: ${result.stderr}`) } } // Reset the temp branch to the working index await git.checkout(tempBranch, 'HEAD') // Reset the base await git.fetch([`${base}:${base}`], baseRemote, ['--force']) }
+// Try to fetch the pull request branch if (!(await tryFetch(git, branchRemoteName, branch))) { // The pull request branch does not exist core.info(`Pull request branch '${branch}' does not exist yet.`) // Create the pull request branch await git.checkout(branch, tempBranch) // Check if the pull request branch is ahead of the base result.hasDiffWithBase = await isAhead(git, base, branch) if (result.hasDiffWithBase) { result.action = 'created' core.info(`Created branch '${branch}'`) } else { core.info( `Branch '${branch}' is not ahead of base '${base}' and will not be created` ) } } else { // The pull request branch exists core.info( `Pull request branch '${branch}' already exists as remote branch '${branchRemoteName}/${branch}'` ) // Checkout the pull request branch await git.checkout(branch)
+// Reset the branch if one of the following conditions is true. // - If the branch differs from the recreated temp branch. // - If the recreated temp branch is not ahead of the base. This means there will be // no pull request diff after the branch is reset. This will reset any undeleted // branches after merging. In particular, it catches a case where the branch was // squash merged but not deleted. We need to reset to make sure it doesn't appear // to have a diff with the base due to different commits for the same changes. // - If the number of commits ahead of the base branch differs between the branch and // temp branch. This catches a case where the base branch has been force pushed to // a new commit. // For changes on base this reset is equivalent to a rebase of the pull request branch. const tempBranchCommitsAhead = await commitsAhead(git, base, tempBranch) const branchCommitsAhead = await commitsAhead(git, base, branch) if ( (await git.hasDiff([`${branch}..${tempBranch}`])) || branchCommitsAhead != tempBranchCommitsAhead || !(tempBranchCommitsAhead > 0) // !isAhead ) { core.info(`Resetting '${branch}'`) // Alternatively, git switch -C branch tempBranch await git.checkout(branch, tempBranch) }
+// Check if the pull request branch has been updated // If the branch was reset or updated it will be ahead // It may be behind if a reset now results in no diff with the base if (!(await isEven(git, `${branchRemoteName}/${branch}`, branch))) { result.action = 'updated' core.info(`Updated branch '${branch}'`) } else { result.action = 'not-updated' core.info( `Branch '${branch}' is even with its remote and will not be updated` ) }
+// Check if the pull request branch is ahead of the base result.hasDiffWithBase = await isAhead(git, base, branch) }
+// Get the pull request branch SHA result.headSha = await git.revParse('HEAD')
+// Delete the temporary branch await git.exec(['branch', '--delete', '--force', tempBranch])
+return result}
+interface CreateOrUpdateBranchResult { action: string base: string hasDiffWithBase: boolean headSha: string}
+
+ 260  src/create-pull-request.ts
+
+@@ -0,0 +1,260 @@import * as core from '@actions/core'import { createOrUpdateBranch, getWorkingBaseAndType, WorkingBaseType} from './create-or-update-branch'import {GitHubHelper} from './github-helper'import {GitCommandManager} from './git-command-manager'import {GitAuthHelper} from './git-auth-helper'import * as utils from './utils'
+export interface Inputs { token: string path: string addPaths: string[] commitMessage: string committer: string author: string signoff: boolean branch: string deleteBranch: boolean branchSuffix: string base: string pushToFork: string title: string body: string labels: string[] assignees: string[] reviewers: string[] teamReviewers: string[] milestone: number draft: boolean}
+export async function createPullRequest(inputs: Inputs): Promise<void> { let gitAuthHelper try { if (!inputs.token) { throw new Error(`Input 'token' not supplied. Unable to continue.`) }
+// Get the repository path const repoPath = utils.getRepoPath(inputs.path) // Create a git command manager const git = await GitCommandManager.create(repoPath)
+// Save and unset the extraheader auth config if it exists core.startGroup('Save persisted git credentials') gitAuthHelper = new GitAuthHelper(git) await gitAuthHelper.savePersistedAuth() core.endGroup()
+// Init the GitHub client const githubHelper = new GitHubHelper(inputs.token)
+core.startGroup('Determining the base and head repositories') // Determine the base repository from git config const remoteUrl = await git.tryGetRemoteUrl() const baseRemote = utils.getRemoteDetail(remoteUrl) // Determine the head repository; the target for the pull request branch const branchRemoteName = inputs.pushToFork ? 'fork' : 'origin' const branchRepository = inputs.pushToFork ? inputs.pushToFork : baseRemote.repository if (inputs.pushToFork) { // Check if the supplied fork is really a fork of the base core.info( `Checking if '${branchRepository}' is a fork of '${baseRemote.repository}'` ) const parentRepository = await githubHelper.getRepositoryParent( branchRepository ) if (parentRepository != baseRemote.repository) { throw new Error( `Repository '${branchRepository}' is not a fork of '${baseRemote.repository}'. Unable to continue.` ) } // Add a remote for the fork const remoteUrl = utils.getRemoteUrl( baseRemote.protocol, baseRemote.hostname, branchRepository ) await git.exec(['remote', 'add', 'fork', remoteUrl]) } core.endGroup() core.info( `Pull request branch target repository set to ${branchRepository}` )
+// Configure auth if (baseRemote.protocol == 'HTTPS') { core.startGroup('Configuring credential for HTTPS authentication') await gitAuthHelper.configureToken(inputs.token) core.endGroup() }
+core.startGroup('Checking the base repository state') const [workingBase, workingBaseType] = await getWorkingBaseAndType(git) core.info(`Working base is ${workingBaseType} '${workingBase}'`) // When in detached HEAD state (checked out on a commit), we need to // know the 'base' branch in order to rebase changes. if (workingBaseType == WorkingBaseType.Commit && !inputs.base) { throw new Error( `When the repository is checked out on a commit instead of a branch, the 'base' input must be supplied.` ) } // If the base is not specified it is assumed to be the working base. const base = inputs.base ? inputs.base : workingBase // Throw an error if the base and branch are not different branches // of the 'origin' remote. An identically named branch in the `fork` // remote is perfectly fine. if (branchRemoteName == 'origin' && base == inputs.branch) { throw new Error( `The 'base' and 'branch' for a pull request must be different branches. Unable to continue.` ) } // For self-hosted runners the repository state persists between runs. // This command prunes the stale remote ref when the pull request branch was // deleted after being merged or closed. Without this the push using // '--force-with-lease' fails due to "stale info." // https://github.com/peter-evans/create-pull-request/issues/633 await git.exec(['remote', 'prune', branchRemoteName]) core.endGroup()
+// Apply the branch suffix if set if (inputs.branchSuffix) { switch (inputs.branchSuffix) { case 'short-commit-hash': // Suffix with the short SHA1 hash inputs.branch = `${inputs.branch}-${await git.revParse('HEAD', [ '--short' ])}` break case 'timestamp': // Suffix with the current timestamp inputs.branch = `${inputs.branch}-${utils.secondsSinceEpoch()}` break case 'random': // Suffix with a 7 character random string inputs.branch = `${inputs.branch}-${utils.randomString()}` break default: throw new Error( `Branch suffix '${inputs.branchSuffix}' is not a valid value. Unable to continue.` ) } }
+// Output head branch core.info( `Pull request branch to create or update set to '${inputs.branch}'` )
+// Configure the committer and author core.startGroup('Configuring the committer and author') const parsedAuthor = utils.parseDisplayNameEmail(inputs.author) const parsedCommitter = utils.parseDisplayNameEmail(inputs.committer) git.setIdentityGitOptions([ '-c', `author.name=${parsedAuthor.name}`, '-c', `author.email=${parsedAuthor.email}`, '-c', `committer.name=${parsedCommitter.name}`, '-c', `committer.email=${parsedCommitter.email}` ]) core.info( `Configured git committer as '${parsedCommitter.name} <${parsedCommitter.email}>'` ) core.info( `Configured git author as '${parsedAuthor.name} <${parsedAuthor.email}>'` ) core.endGroup()
+// Create or update the pull request branch core.startGroup('Create or update the pull request branch') const result = await createOrUpdateBranch( git, inputs.commitMessage, inputs.base, inputs.branch, branchRemoteName, inputs.signoff, inputs.addPaths ) core.endGroup()
+if (['created', 'updated'].includes(result.action)) { // The branch was created or updated core.startGroup( `Pushing pull request branch to '${branchRemoteName}/${inputs.branch}'` ) await git.push([ '--force-with-lease', branchRemoteName, `HEAD:refs/heads/${inputs.branch}` ]) core.endGroup() }
+// Set the base. It would have been '' if not specified as an input inputs.base = result.base
+if (result.hasDiffWithBase) { // Create or update the pull request core.startGroup('Create or update the pull request') const pull = await githubHelper.createOrUpdatePullRequest( inputs, baseRemote.repository, branchRepository ) core.endGroup()
+// Set outputs core.startGroup('Setting outputs') core.setOutput('pull-request-number', pull.number) core.setOutput('pull-request-url', pull.html_url) if (pull.created) { core.setOutput('pull-request-operation', 'created') } else if (result.action == 'updated') { core.setOutput('pull-request-operation', 'updated') } core.setOutput('pull-request-head-sha', result.headSha) // Deprecated core.exportVariable('PULL_REQUEST_NUMBER', pull.number) core.endGroup() } else { // There is no longer a diff with the base // Check we are in a state where a branch exists if (['updated', 'not-updated'].includes(result.action)) { core.info( `Branch '${inputs.branch}' no longer differs from base branch '${inputs.base}'` ) if (inputs.deleteBranch) { core.info(`Deleting branch '${inputs.branch}'`) await git.push([ '--delete', '--force', branchRemoteName, `refs/heads/${inputs.branch}` ]) // Set outputs core.startGroup('Setting outputs') core.setOutput('pull-request-operation', 'closed') core.endGroup() } } } } catch (error) { core.setFailed(utils.getErrorMessage(error)) } finally { // Remove auth and restore persisted auth config if it existed core.startGroup('Restore persisted git credentials') await gitAuthHelper.removeAuth() await gitAuthHelper.restorePersistedAuth() core.endGroup() }}
+
+ 127  src/git-auth-helper.ts
+
+@@ -0,0 +1,127 @@import * as core from '@actions/core'import * as fs from 'fs'import {GitCommandManager} from './git-command-manager'import * as path from 'path'import {URL} from 'url'import * as utils from './utils'
+export class GitAuthHelper { private git: GitCommandManager private gitConfigPath: string private extraheaderConfigKey: string private extraheaderConfigPlaceholderValue = 'AUTHORIZATION: basic ***' private extraheaderConfigValueRegex = '^AUTHORIZATION:' private persistedExtraheaderConfigValue = ''
+constructor(git: GitCommandManager) { this.git = git this.gitConfigPath = path.join( this.git.getWorkingDirectory(), '.git', 'config' ) const serverUrl = this.getServerUrl() this.extraheaderConfigKey = `http.${serverUrl.origin}/.extraheader` }
+async savePersistedAuth(): Promise<void> { // Save and unset persisted extraheader credential in git config if it exists this.persistedExtraheaderConfigValue = await this.getAndUnset() }
+async restorePersistedAuth(): Promise<void> { if (this.persistedExtraheaderConfigValue) { try { await this.setExtraheaderConfig(this.persistedExtraheaderConfigValue) core.info('Persisted git credentials restored') } catch (e) { core.warning(utils.getErrorMessage(e)) } } }
+async configureToken(token: string): Promise<void> { // Encode and configure the basic credential for HTTPS access const basicCredential = Buffer.from( `x-access-token:${token}`, 'utf8' ).toString('base64') core.setSecret(basicCredential) const extraheaderConfigValue = `AUTHORIZATION: basic ${basicCredential}` await this.setExtraheaderConfig(extraheaderConfigValue) }
+async removeAuth(): Promise<void> { await this.getAndUnset() }
+private async setExtraheaderConfig( extraheaderConfigValue: string ): Promise<void> { // Configure a placeholder value. This approach avoids the credential being captured // by process creation audit events, which are commonly logged. For more information, // refer to https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing // See https://github.com/actions/checkout/blob/main/src/git-auth-helper.ts#L267-L274 await this.git.config( this.extraheaderConfigKey, this.extraheaderConfigPlaceholderValue ) // Replace the placeholder await this.gitConfigStringReplace( this.extraheaderConfigPlaceholderValue, extraheaderConfigValue ) }
+private async getAndUnset(): Promise<string> { let configValue = '' // Save and unset persisted extraheader credential in git config if it exists if ( await this.git.configExists( this.extraheaderConfigKey, this.extraheaderConfigValueRegex ) ) { configValue = await this.git.getConfigValue( this.extraheaderConfigKey, this.extraheaderConfigValueRegex ) if ( await this.git.tryConfigUnset( this.extraheaderConfigKey, this.extraheaderConfigValueRegex ) ) { core.info(`Unset config key '${this.extraheaderConfigKey}'`) } else { core.warning( `Failed to unset config key '${this.extraheaderConfigKey}'` ) } } return configValue }
+private async gitConfigStringReplace( find: string, replace: string ): Promise<void> { let content = (await fs.promises.readFile(this.gitConfigPath)).toString() const index = content.indexOf(find) if (index < 0 || index != content.lastIndexOf(find)) { throw new Error(`Unable to replace '${find}' in ${this.gitConfigPath}`) } content = content.replace(find, replace) await fs.promises.writeFile(this.gitConfigPath, content) }
+private getServerUrl(): URL { // todo: remove GITHUB_URL after support for GHES Alpha is no longer needed // See https://github.com/actions/checkout/blob/main/src/url-helper.ts#L22-L29 return new URL( process.env['GITHUB_SERVER_URL'] || process.env['GITHUB_URL'] || 'https://github.com' ) }}
+
+ 303  src/git-command-manager.ts
+
+@@ -0,0 +1,303 @@import * as exec from '@actions/exec'import * as io from '@actions/io'import * as utils from './utils'import * as path from 'path'
+const tagsRefSpec = '+refs/tags/*:refs/tags/*'
+export class GitCommandManager { private gitPath: string private workingDirectory: string // Git options used when commands require an identity private identityGitOptions?: string[]
+private constructor(workingDirectory: string, gitPath: string) { this.workingDirectory = workingDirectory this.gitPath = gitPath }
+static async create(workingDirectory: string): Promise<GitCommandManager> { const gitPath = await io.which('git', true) return new GitCommandManager(workingDirectory, gitPath) }
+setIdentityGitOptions(identityGitOptions: string[]): void { this.identityGitOptions = identityGitOptions }
+async checkout(ref: string, startPoint?: string): Promise<void> { const args = ['checkout', '--progress'] if (startPoint) { args.push('-B', ref, startPoint) } else { args.push(ref) } // https://github.com/git/git/commit/a047fafc7866cc4087201e284dc1f53e8f9a32d5 args.push('--') await this.exec(args) }
+async cherryPick( options?: string[], allowAllExitCodes = false ): Promise<GitOutput> { const args = ['cherry-pick'] if (this.identityGitOptions) { args.unshift(...this.identityGitOptions) }
+if (options) { args.push(...options) }
+return await this.exec(args, allowAllExitCodes) }
+async commit( options?: string[], allowAllExitCodes = false ): Promise<GitOutput> { const args = ['commit'] if (this.identityGitOptions) { args.unshift(...this.identityGitOptions) }
+if (options) { args.push(...options) }
+return await this.exec(args, allowAllExitCodes) }
+async config( configKey: string, configValue: string, globalConfig?: boolean ): Promise<void> { await this.exec([ 'config', globalConfig ? '--global' : '--local', configKey, configValue ]) }
+async configExists( configKey: string, configValue = '.', globalConfig?: boolean ): Promise<boolean> { const output = await this.exec( [ 'config', globalConfig ? '--global' : '--local', '--name-only', '--get-regexp', configKey, configValue ], true ) return output.exitCode === 0 }
+async fetch( refSpec: string[], remoteName?: string, options?: string[] ): Promise<void> { const args = ['-c', 'protocol.version=2', 'fetch'] if (!refSpec.some(x => x === tagsRefSpec)) { args.push('--no-tags') }
+args.push('--progress', '--no-recurse-submodules') if ( utils.fileExistsSync(path.join(this.workingDirectory, '.git', 'shallow')) ) { args.push('--unshallow') }
+if (options) { args.push(...options) }
+if (remoteName) { args.push(remoteName) } else { args.push('origin') } for (const arg of refSpec) { args.push(arg) }
+await this.exec(args) }
+async getConfigValue(configKey: string, configValue = '.'): Promise<string> { const output = await this.exec([ 'config', '--local', '--get-regexp', configKey, configValue ]) return output.stdout.trim().split(`${configKey} `)[1] }
+getWorkingDirectory(): string { return this.workingDirectory }
+async hasDiff(options?: string[]): Promise<boolean> { const args = ['diff', '--quiet'] if (options) { args.push(...options) } const output = await this.exec(args, true) return output.exitCode === 1 }
+async isDirty(untracked: boolean, pathspec?: string[]): Promise<boolean> { const pathspecArgs = pathspec ? ['--', ...pathspec] : [] // Check untracked changes const sargs = ['--porcelain', '-unormal'] sargs.push(...pathspecArgs) if (untracked && (await this.status(sargs))) { return true } // Check working index changes if (await this.hasDiff(pathspecArgs)) { return true } // Check staged changes const dargs = ['--staged'] dargs.push(...pathspecArgs) if (await this.hasDiff(dargs)) { return true } return false }
+async push(options?: string[]): Promise<void> { const args = ['push'] if (options) { args.push(...options) } await this.exec(args) }
+async revList( commitExpression: string[], options?: string[] ): Promise<string> { const args = ['rev-list'] if (options) { args.push(...options) } args.push(...commitExpression) const output = await this.exec(args) return output.stdout.trim() }
+async revParse(ref: string, options?: string[]): Promise<string> { const args = ['rev-parse'] if (options) { args.push(...options) } args.push(ref) const output = await this.exec(args) return output.stdout.trim() }
+async status(options?: string[]): Promise<string> { const args = ['status'] if (options) { args.push(...options) } const output = await this.exec(args) return output.stdout.trim() }
+async symbolicRef(ref: string, options?: string[]): Promise<string> { const args = ['symbolic-ref', ref] if (options) { args.push(...options) } const output = await this.exec(args) return output.stdout.trim() }
+async tryConfigUnset( configKey: string, configValue = '.', globalConfig?: boolean ): Promise<boolean> { const output = await this.exec( [ 'config', globalConfig ? '--global' : '--local', '--unset', configKey, configValue ], true ) return output.exitCode === 0 }
+async tryGetRemoteUrl(): Promise<string> { const output = await this.exec( ['config', '--local', '--get', 'remote.origin.url'], true )
+if (output.exitCode !== 0) { return '' }
+const stdout = output.stdout.trim() if (stdout.includes('\n')) { return '' }
+return stdout }
+async exec(args: string[], allowAllExitCodes = false): Promise<GitOutput> { const result = new GitOutput()
+const env = {} for (const key of Object.keys(process.env)) { env[key] = process.env[key] }
+const stdout: string[] = [] const stderr: string[] = []
+const options = { cwd: this.workingDirectory, env, ignoreReturnCode: allowAllExitCodes, listeners: { stdout: (data: Buffer) => { stdout.push(data.toString()) }, stderr: (data: Buffer) => { stderr.push(data.toString()) } } }
+result.exitCode = await exec.exec(`"${this.gitPath}"`, args, options) result.stdout = stdout.join('') result.stderr = stderr.join('') return result }}
+class GitOutput { stdout = '' stderr = '' exitCode = 0}
+
+ 183  src/github-helper.ts
+
+@@ -0,0 +1,183 @@import * as core from '@actions/core'import {Inputs} from './create-pull-request'import {Octokit, OctokitOptions} from './octokit-client'import * as utils from './utils'
+const ERROR_PR_REVIEW_FROM_AUTHOR = 'Review cannot be requested from pull request author'
+interface Repository { owner: string repo: string}
+interface Pull { number: number html_url: string created: boolean}
+export class GitHubHelper { private octokit: InstanceType<typeof Octokit>
+constructor(token: string) { const options: OctokitOptions = {} if (token) { options.auth = `${token}` } options.baseUrl = process.env['GITHUB_API_URL'] || 'https://api.github.com' this.octokit = new Octokit(options) }
+private parseRepository(repository: string): Repository { const [owner, repo] = repository.split('/') return { owner: owner, repo: repo } }
+private async createOrUpdate( inputs: Inputs, baseRepository: string, headRepository: string ): Promise<Pull> { const [headOwner] = headRepository.split('/') const headBranch = `${headOwner}:${inputs.branch}` const headBranchFull = `${headRepository}:${inputs.branch}`
+// Try to create the pull request try { core.info(`Attempting creation of pull request`) const {data: pull} = await this.octokit.rest.pulls.create({ ...this.parseRepository(baseRepository), title: inputs.title, head: headBranch, base: inputs.base, body: inputs.body, draft: inputs.draft }) core.info( `Created pull request #${pull.number} (${headBranch} => ${inputs.base})` ) return { number: pull.number, html_url: pull.html_url, created: true } } catch (e) { if ( utils.getErrorMessage(e).includes(`A pull request already exists for`) ) { core.info(`A pull request already exists for ${headBranch}`) } else { throw e } }
+// Update the pull request that exists for this branch and base core.info(`Fetching existing pull request`) const {data: pulls} = await this.octokit.rest.pulls.list({ ...this.parseRepository(baseRepository), state: 'open', head: headBranchFull, base: inputs.base }) core.info(`Attempting update of pull request`) const {data: pull} = await this.octokit.rest.pulls.update({ ...this.parseRepository(baseRepository), pull_number: pulls[0].number, title: inputs.title, body: inputs.body }) core.info( `Updated pull request #${pull.number} (${headBranch} => ${inputs.base})` ) return { number: pull.number, html_url: pull.html_url, created: false } }
+async getRepositoryParent(headRepository: string): Promise<string> { const {data: headRepo} = await this.octokit.rest.repos.get({ ...this.parseRepository(headRepository) }) if (!headRepo.parent) { throw new Error( `Repository '${headRepository}' is not a fork. Unable to continue.` ) } return headRepo.parent.full_name }
+async createOrUpdatePullRequest( inputs: Inputs, baseRepository: string, headRepository: string ): Promise<Pull> { // Create or update the pull request const pull = await this.createOrUpdate( inputs, baseRepository, headRepository )
+// Apply milestone if (inputs.milestone) { core.info(`Applying milestone '${inputs.milestone}'`) await this.octokit.rest.issues.update({ ...this.parseRepository(baseRepository), issue_number: pull.number, milestone: inputs.milestone }) } // Apply labels if (inputs.labels.length > 0) { core.info(`Applying labels '${inputs.labels}'`) await this.octokit.rest.issues.addLabels({ ...this.parseRepository(baseRepository), issue_number: pull.number, labels: inputs.labels }) } // Apply assignees if (inputs.assignees.length > 0) { core.info(`Applying assignees '${inputs.assignees}'`) await this.octokit.rest.issues.addAssignees({ ...this.parseRepository(baseRepository), issue_number: pull.number, assignees: inputs.assignees }) }
+// Request reviewers and team reviewers const requestReviewersParams = {} if (inputs.reviewers.length > 0) { requestReviewersParams['reviewers'] = inputs.reviewers core.info(`Requesting reviewers '${inputs.reviewers}'`) } if (inputs.teamReviewers.length > 0) { requestReviewersParams['team_reviewers'] = inputs.teamReviewers core.info(`Requesting team reviewers '${inputs.teamReviewers}'`) } if (Object.keys(requestReviewersParams).length > 0) { try { await this.octokit.rest.pulls.requestReviewers({ ...this.parseRepository(baseRepository), pull_number: pull.number, ...requestReviewersParams }) } catch (e) { if (utils.getErrorMessage(e).includes(ERROR_PR_REVIEW_FROM_AUTHOR)) { core.warning(ERROR_PR_REVIEW_FROM_AUTHOR) } else { throw e } } }
+return pull }}
+
+ 38  src/main.ts
+
+@@ -0,0 +1,38 @@import * as core from '@actions/core'import {Inputs, createPullRequest} from './create-pull-request'import {inspect} from 'util'import * as utils from './utils'
+async function run(): Promise<void> { try { const inputs: Inputs = { token: core.getInput('token'), path: core.getInput('path'), addPaths: utils.getInputAsArray('add-paths'), commitMessage: core.getInput('commit-message'), committer: core.getInput('committer'), author: core.getInput('author'), signoff: core.getBooleanInput('signoff'), branch: core.getInput('branch'), deleteBranch: core.getBooleanInput('delete-branch'), branchSuffix: core.getInput('branch-suffix'), base: core.getInput('base'), pushToFork: core.getInput('push-to-fork'), title: core.getInput('title'), body: core.getInput('body'), labels: utils.getInputAsArray('labels'), assignees: utils.getInputAsArray('assignees'), reviewers: utils.getInputAsArray('reviewers'), teamReviewers: utils.getInputAsArray('team-reviewers'), milestone: Number(core.getInput('milestone')), draft: core.getBooleanInput('draft') } core.debug(`Inputs: ${inspect(inputs)}`)
+await createPullRequest(inputs) } catch (error) { core.setFailed(utils.getErrorMessage(error)) }}
+run()
+
+ 28  src/octokit-client.ts
+
+@@ -0,0 +1,28 @@import {Octokit as Core} from '@octokit/core'import {paginateRest} from '@octokit/plugin-paginate-rest'import {restEndpointMethods} from '@octokit/plugin-rest-endpoint-methods'import ProxyAgent from 'proxy-agent'export {RestEndpointMethodTypes} from '@octokit/plugin-rest-endpoint-methods'export {OctokitOptions} from '@octokit/core/dist-types/types'
+export const Octokit = Core.plugin( paginateRest, restEndpointMethods, autoProxyAgent)
+// Octokit plugin to support the standard environment variables http_proxy, https_proxy and no_proxyfunction autoProxyAgent(octokit: Core) { const proxy = process.env.https_proxy || process.env.HTTPS_PROXY || process.env.http_proxy || process.env.HTTP_PROXY
+if (!proxy) return
+const agent = new ProxyAgent() octokit.hook.before('request', options => { options.request.agent = agent })}
+
+ 170  src/utils.ts
+
+@@ -0,0 +1,170 @@import * as core from '@actions/core'import * as fs from 'fs'import * as path from 'path'
+export function getInputAsArray( name: string, options?: core.InputOptions): string[] { return getStringAsArray(core.getInput(name, options))}
+export function getStringAsArray(str: string): string[] { return str .split(/[\n,]+/) .map(s => s.trim()) .filter(x => x !== '')}
+export function getRepoPath(relativePath?: string): string { let githubWorkspacePath = process.env['GITHUB_WORKSPACE'] if (!githubWorkspacePath) { throw new Error('GITHUB_WORKSPACE not defined') } githubWorkspacePath = path.resolve(githubWorkspacePath) core.debug(`githubWorkspacePath: ${githubWorkspacePath}`)
+let repoPath = githubWorkspacePath if (relativePath) repoPath = path.resolve(repoPath, relativePath)
+core.debug(`repoPath: ${repoPath}`) return repoPath}
+interface RemoteDetail { hostname: string protocol: string repository: string}
+export function getRemoteDetail(remoteUrl: string): RemoteDetail { // Parse the protocol and github repository from a URL // e.g. HTTPS, peter-evans/create-pull-request const githubUrl = process.env['GITHUB_SERVER_URL'] || 'https://github.com'
+const githubServerMatch = githubUrl.match(/^https?:\/\/(.+)$/i) if (!githubServerMatch) { throw new Error('Could not parse GitHub Server name') }
+const hostname = githubServerMatch[1]
+const httpsUrlPattern = new RegExp( '^https?://.*@?' + hostname + '/(.+/.+?)(\\.git)?$', 'i' ) const sshUrlPattern = new RegExp('^git@' + hostname + ':(.+/.+)\\.git$', 'i')
+const httpsMatch = remoteUrl.match(httpsUrlPattern) if (httpsMatch) { return { hostname, protocol: 'HTTPS', repository: httpsMatch[1] } }
+const sshMatch = remoteUrl.match(sshUrlPattern) if (sshMatch) { return { hostname, protocol: 'SSH', repository: sshMatch[1] } }
+throw new Error( `The format of '${remoteUrl}' is not a valid GitHub repository URL` )}
+export function getRemoteUrl( protocol: string, hostname: string, repository: string): string { return protocol == 'HTTPS' ? `https://${hostname}/${repository}` : `git@${hostname}:${repository}.git`}
+export function secondsSinceEpoch(): number { const now = new Date() return Math.round(now.getTime() / 1000)}
+export function randomString(): string { return Math.random().toString(36).substr(2, 7)}
+interface DisplayNameEmail { name: string email: string}
+export function parseDisplayNameEmail( displayNameEmail: string): DisplayNameEmail { // Parse the name and email address from a string in the following format // Display Name <email@address.com> const pattern = /^([^<]+)\s*<([^>]+)>$/i
+// Check we have a match const match = displayNameEmail.match(pattern) if (!match) { throw new Error( `The format of '${displayNameEmail}' is not a valid email address with display name` ) }
+// Check that name and email are not just whitespace const name = match[1].trim() const email = match[2].trim() if (!name || !email) { throw new Error( `The format of '${displayNameEmail}' is not a valid email address with display name` ) }
+return { name: name, email: email }}
+export function fileExistsSync(path: string): boolean { if (!path) { throw new Error("Arg 'path' must not be empty") }
+let stats: fs.Stats try { stats = fs.statSync(path) } catch (error) { if (hasErrorCode(error) && error.code === 'ENOENT') { return false }
+throw new Error( `Encountered an error when checking whether path '${path}' exists: ${getErrorMessage( error )}` ) }
+if (!stats.isDirectory()) { return true }
+return false}
+/* eslint-disable @typescript-eslint/no-explicit-any */function hasErrorCode(error: any): error is {code: string} { return typeof (error && error.code) === 'string'}
+export function getErrorMessage(error: unknown) { if (error instanceof Error) return error.message return String(error)}
+
+ 16  tsconfig.json
+
+@@ -0,0 +1,16 @@{ "compilerOptions": { "target": "es6", "module": "commonjs", "lib": [ "es6" ], "outDir": "./lib", "rootDir": "./src", "declaration": true, "strict": true, "noImplicitAny": false, "esModuleInterop": true }, "exclude": ["__test__", "lib", "node_modules"]}
+
+Footer
+
+© 2022 GitHub, Inc.
+
+Footer navigation
+
+Terms
+
+Privacy
+
+Security
+
+Status
+
+Docs
+
+Contact GitHub
+
+Pricing
+
+API
+
+Training
+
+Blog
+
+About
+
+Comparing master...patch-21 · zakwarlord7/ci-CI
+
+
+
+
+
+@@ -0,0 +1,86 @@name: 'Create Pull Request'description: 'Creates a pull request for changes to your repository in the actions workspace'inputs: token: description: 'GITHUB_TOKEN or a `repo` scoped Personal Access Token (PAT)' default: ${{ github.token }} path: description: > Relative path under $GITHUB_WORKSPACE to the repository. Defaults to $GITHUB_WORKSPACE. add-paths: description: > A comma or newline-separated list of file paths to // For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
 // https://github.com/microsoft/vscode-dev-containers/tree/v0.177.0/containers/javascript-node
 // -
-{
-	"name": "docs.github.com",
-	"build": {
-		"dockerfile": "Dockerfile",
-		// Update 'VARIANT' to pick a Node version: 12, 14, 16
-		"args": { "VARIANT": "16" }
-	},
-
-	// Set *default* container specific settings.json values on container create.
-	"settings": {
-		"terminal.integrated.shell.linux": "/bin/bash",
-		"cSpell.language": ",en"
-	},
-
-	// Install features. Type 'feature' in the VS Code command palette for a full list.
-	"features": {
-		"git-lfs": "latest",
-		"sshd": "latest"
-	 },
-
-	// Visual Studio Code extensions which help authoring for docs.github.com.
-	"extensions": [
-		"dbaeumer.vscode-eslint",
-		"sissel.shopify-liquid",
-		"davidanson.vscode-markdownlint",
-		"bierner.markdown-preview-github-styles",
-		"streetsidesoftware.code-spell-checker",
-		"alistairchristie.open-reusables"
-	],
-
-	// Use 'forwardPorts' to make a list of ports inside the container available locally.
-	"forwardPorts": [4000],
-		
-	"portsAttributes": {
-		"4000": {
-        		"label": "Preview",
-        		"onAutoForward": "openPreview"
-      		}
-	},
+'BEGIN :
+GLOW7 '*"*:#::'*"*'' '*"*'::'#'"'#'"':'"':'' '*"*'
+'#'"'!'''/'"'Users'"'/'''bin'"'/'"'Bash'"'/'"'bitore'"''.sig'"'' '"'ENV'"'' 
+'"'''"'ENV' RUNS' RUN' RUN RUNS ON RUNS-ON ON'"':'"'' ':''
+'ON''
+'RUN
+'RUN'' 
+'Runs''
+'Runs'' 
+'Script'' 
+'"':'Build':'"':'Runs'"':'"':'"'' :
+'Publish'"':''
+'Lunch'"':''
+'Release'"':''
+'Deployee'"':'' '"GitHub/doc/pk.js/package.json :-.it.git/Intuit/tools/.until/config.yml :
+Runs-on :OPEN.json/package.yam/API/Adk.Apk.Sdk.S.E.Jdk.J.C/Jinja.jar/jre : 
+J.P. Morgan                                                                    This Product Contains Sensitive Taxpayer Data 
+CountyKarnes County, TX
+Operator
+NASDAQ OPERATING COMPANY
+Production 
+Jun 2022 - Aug 2022
+Total Gross Profit :
+ProductionMinimum length:"CONSTRUCTION":"{{{{'$'' '{{[((c).(r))[12753750.[00]m](BITORE_34173.1337_18831)'' ')']}}'' '}}}}'"''
+:Build:: :
+Additional API information
+Reference
+PayPal.org
+Active 
+
+EARNINGS RELEASE FINANCIAL SUPPLEMENT
+FOURTH QUARTER 2020
+
+JPMORGAN CHASE & CO.
+TABLE OF CONTENTS
+
+Page(s)
+
+Consolidated Results
+Consolidated Financial Highlights 2â€“3
+Consolidated Statements of Income 4
+Consolidated Balance Sheets 5
+Condensed Average Balance Sheets and Annualized Yields 6
+Reconciliation from Reported to Managed Basis 7
+Segment Results - Managed Basis 8
+Capital and Other Selected Balance Sheet Items 9
+Earnings Per Share and Related Information 10
+Business Segment Results
+Consumer & Community Banking (â€œCCBâ€) 11â€“14
+Corporate & Investment Bank (â€œCIBâ€) 15â€“17
+Commercial Banking (â€œCBâ€) 18â€“19
+Asset & Wealth Management (â€œAWMâ€) 20â€“22
+Corporate 23
+Credit-Related Information 24â€“27
+Non-GAAP Financial Measures 28
+J.P. Morgan Wealth Management Reorganization 29
+Glossary of Terms and Acronyms (a)
+(a) Refer to the Glossary of Terms and Acronyms on pages 293â€“299 of JPMorgan Chase & Co.â€™s (the â€œFirmâ€™sâ€) Annual Report on Form 10-K for the year ended December 31, 2019 (the â€œ2019 Form 10-Kâ€) and
+the Glossary of Terms and Acronyms and Line of Business Metrics on pages 192-197 and pages 198-200, respectively, of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended September
+30, 2020.
+
+JPMORGAN CHASE & CO.
+CONSOLIDATED FINANCIAL HIGHLIGHTS
+(in millions, except per share and ratio data)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+SELECTED INCOME STATEMENT DATA 4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+Reported Basis
+Total net revenue (a) $ 29,224 $ 29,147 $ 32,980 $ 28,192 $ 28,285 â€” % 3 % $ 119,543 $ 115,399 4 %
+Total noninterest expense (a) 16,048 16,875 16,942 16,791 16,293 (5) (2) 66,656 65,269 2
+Pre-provision profit (b) 13,176 12,272 16,038 11,401 11,992 7 10 52,887 50,130 5
+Provision for credit losses (1,889) 611 10,473 8,285 1,427 NM NM 17,480 5,585 213
+NET INCOME 12,136 9,443 4,687 2,865 8,520 29 42 29,131 36,431 (20)
+Managed Basis (c)
+Total net revenue (a) 30,161 29,941 33,817 29,010 29,165 1 3 122,929 118,464 4
+Total noninterest expense (a) 16,048 16,875 16,942 16,791 16,293 (5) (2) 66,656 65,269 2
+Pre-provision profit (b) 14,113 13,066 16,875 12,219 12,872 8 10 56,273 53,195 6
+Provision for credit losses (1,889) 611 10,473 8,285 1,427 NM NM 17,480 5,585 213
+NET INCOME 12,136 9,443 4,687 2,865 8,520 29 42 29,131 36,431 (20)
+EARNINGS PER SHARE DATA
+Net income: Basic $ 3.80 $ 2.93 $ 1.39 $ 0.79 $ 2.58 30 47 $ 8.89 $ 10.75 (17)
+Diluted 3.79 2.92 1.38 0.78 2.57 30 47 8.88 10.72 (17)
+Average shares: Basic 3,079.7 3,077.8 3,076.3 3,095.8 3,140.7 â€” (2) 3,082.4 3,221.5 (4)
+Diluted 3,085.1 3,082.8 3,081.0 3,100.7 3,148.5 â€” (2) 3,087.4 3,230.4 (4)
+MARKET AND PER COMMON SHARE DATA
+Market capitalization $ 387,492 $ 293,451 $ 286,658 $ 274,323 $ 429,913 32 (10) $ 387,492 $ 429,913 (10)
+Common shares at period-end 3,049.4 3,048.2 3,047.6 3,047.0 3,084.0 â€” (1) 3,049.4 3,084.0 (1)
+Book value per share 81.75 79.08 76.91 75.88 75.98 3 8 81.75 75.98 8
+Tangible book value per share (â€œTBVPSâ€) (b) 66.11 63.93 61.76 60.71 60.98 3 8 66.11 60.98 8
+Cash dividends declared per share 0.90 0.90 0.90 0.90 0.90 â€” â€” 3.60 3.40 6
+FINANCIAL RATIOS (d)
+Return on common equity (â€œROEâ€) 19 % 15 % 7 % 4 % 14 % 12 % 15 %
+Return on tangible common equity (â€œROTCEâ€) (b) 24 19 9 5 17 14 19
+Return on assets 1.42 1.14 0.58 0.40 1.22 0.91 1.33
+CAPITAL RATIOS (e)
+Common equity Tier 1 (â€œCET1â€) capital ratio 13.1 % (f) 13.1 % 12.4 % 11.5 % 12.4 % 13.1 % (f) 12.4 %
+Tier 1 capital ratio 15.0 (f) 15.0 14.3 13.3 14.1 15.0 (f) 14.1
+Total capital ratio 17.3 (f) 17.3 16.7 15.5 16.0 17.3 (f) 16.0
+Tier 1 leverage ratio 7.0 (f) 7.0 6.9 7.5 7.9 7.0 (f) 7.9
+Supplementary leverage ratio (â€œSLRâ€) 6.9 (f) 7.0 6.8 6.0 6.3 6.9 (f) 6.3
+Effective January 1, 2020, the Firm adopted the Financial Instruments â€“ Credit Losses (â€œCECLâ€) accounting guidance, which resulted in a net increase to the allowance for credit losses of $4.3 billion and a decrease to retained earnings of $2.7 billion. Refer to Note 1 â€“ Basis of
+Presentation on pages 85-86 of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended March 31, 2020 for further information.
+(a) In the second quarter of 2020, the Firm reclassified certain spend-based credit card reward costs from marketing expense to be a reduction of card income, with no effect on net income. Prior-period amounts have been revised to conform with the current presentation.
+(b) Pre-provision profit, TBVPS and ROTCE are each non-GAAP financial measures. Tangible common equity (â€œTCEâ€) is also a non-GAAP financial measure; refer to page 9 for a reconciliation of common stockholdersâ€™ equity to TCE. Refer to page 28 for a further discussion of
+these measures.
+(c) Refer to Reconciliation from Reported to Managed Basis on page 7 for a further discussion of managed basis.
+(d) Quarterly ratios are based upon annualized amounts.
+(e) The capital metrics reflect the relief provided by the Federal Reserve Board (the â€œFederal Reserveâ€) in response to the COVID-19 pandemic, including the CECL capital transition provisions that became effective in the first quarter of 2020. For the periods ended December 31,
+2020, September 30, 2020, June 30, 2020 and March 31, 2020, the impact of the CECL capital transition provisions resulted in an increase to CET1 capital of $5.7 billion, $6.4 billion, $6.5 billion and $4.3 billion, respectively. The SLR reflects the temporary exclusions of U.S.
+Treasury securities and deposits at Federal Reserve Banks that became effective in the second quarter of 2020. Refer to Regulatory Developments Relating to the COVID-19 Pandemic on pages 11-12 and Capital Risk Management on pages 49-54 of the Firmâ€™s Quarterly
+Report on Form 10-Q for the quarterly period ended September 30, 2020 for additional information. Refer to Capital Risk Management on pages 85-92 of the Firmâ€™s 2019 Form 10-K for additional information on the Firmâ€™s capital metrics.
+(f) Estimated.
+
+Page 2
+
+JPMORGAN CHASE & CO.
+CONSOLIDATED FINANCIAL HIGHLIGHTS, CONTINUED
+(in millions, except ratio and headcount data)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+SELECTED BALANCE SHEET DATA (period-end)
+Total assets $ 3,386,071 $ 3,246,076 $ 3,213,616 (f) $ 3,139,431 $ 2,687,379 4 % 26 % $ 3,386,071 $ 2,687,379 26 %
+Loans:
+Consumer, excluding credit card loans (a)(b) 318,579 322,098 323,198 311,508 317,817 (1) â€” 318,579 317,817 â€”
+Credit card loans 144,216 140,377 141,656 154,021 168,924 3 (15) 144,216 168,924 (15)
+Wholesale loans (a)(b) 550,058 527,265 544,528 584,081 510,879 4 8 550,058 510,879 8
+Total Loans 1,012,853 989,740 1,009,382 1,049,610 997,620 2 2 1,012,853 997,620 2
+Deposits:
+U.S. offices:
+Noninterest-bearing 572,711 540,116 529,729 448,195 395,667 6 45 572,711 395,667 45
+Interest-bearing 1,197,032 1,117,149 1,061,093 1,026,603 876,156 7 37 1,197,032 876,156 37
+Non-U.S. offices:
+Noninterest-bearing 23,435 21,406 22,752 22,192 20,087 9 17 23,435 20,087 17
+Interest-bearing 351,079 322,745 317,455 339,019 270,521 9 30 351,079 270,521 30
+Total deposits 2,144,257 2,001,416 1,931,029 1,836,009 1,562,431 7 37 2,144,257 1,562,431 37
+Long-term debt 281,685 279,175 317,003 299,344 291,498 1 (3) 281,685 291,498 (3)
+Common stockholdersâ€™ equity 249,291 241,050 234,403 231,199 234,337 3 6 249,291 234,337 6
+Total stockholdersâ€™ equity 279,354 271,113 264,466 261,262 261,330 3 7 279,354 261,330 7
+Loans-to-deposits ratio (b) 47 % 49 % 52 % 57 % 64 % 47 % 64 %
+Headcount 255,351 256,358 256,710 256,720 256,981 â€” (1) 255,351 256,981 (1)
+95% CONFIDENCE LEVEL - TOTAL VaR (c)
+Average VaR $ 96 $ 90 $ 130 $ 59 $ 37 7 159
+LINE OF BUSINESS NET REVENUE (d)
+Consumer & Community Banking (e) $ 12,728 $ 12,895 $ 12,358 $ 13,287 $ 13,880 (1) (8) $ 51,268 $ 55,133 (7)
+Corporate & Investment Bank 11,352 11,546 16,383 10,003 9,703 (2) 17 49,284 39,265 26
+Commercial Banking 2,463 2,285 2,400 2,165 2,296 8 7 9,313 9,264 1
+Asset & Wealth Management 3,867 3,554 3,430 3,389 3,514 9 10 14,240 13,591 5
+Corporate (249) (339) (754) 166 (228) 27 (9) (1,176) 1,211 NM
+TOTAL NET REVENUE $ 30,161 $ 29,941 $ 33,817 $ 29,010 $ 29,165 1 3 $ 122,929 $ 118,464 4
+LINE OF BUSINESS NET INCOME/(LOSS)
+Consumer & Community Banking $ 4,325 $ 3,871 $ (176) $ 197 $ 4,200 12 3 $ 8,217 $ 16,541 (50)
+Corporate & Investment Bank 5,349 4,309 5,451 1,985 2,935 24 82 17,094 11,954 43
+Commercial Banking 2,034 1,086 (681) 139 945 87 115 2,578 3,958 (35)
+Asset & Wealth Management 786 876 661 669 801 (10) (2) 2,992 2,867 4
+Corporate (358) (699) (568) (125) (361) 49 1 (1,750) 1,111 NM
+NET INCOME $ 12,136 $ 9,443 $ 4,687 $ 2,865 $ 8,520 29 42 $ 29,131 $ 36,431 (20)
+In the fourth quarter of 2020, payment processing-only clients along with the associated revenue and expenses were realigned to CIBâ€™s Wholesale Payments business from CCB and CB. Prior-period amounts have been revised to conform with the current presentation. Refer to
+Business segment changes on page 21 of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended March 31, 2020 for further information.
+In the fourth quarter of 2020, the Firm realigned certain wealth management clients from AWM to CCB. Prior-period amounts have been revised to conform with the current presentation. Refer to page 29 for further information.
+(a) In conjunction with the adoption of CECL on January 1, 2020, the Firm reclassified risk-rated business banking and auto dealer loans held in CCB from the consumer, excluding credit card portfolio segment to the wholesale portfolio segment. Prior-period amounts have been
+revised to conform with the current presentation.
+(b) In the third quarter of 2020, the Firm reclassified certain fair value option elected lending-related positions from trading assets to loans. Prior-period amounts have been revised to conform with the current presentation.
+(c) Effective January 1, 2020, the Firm refined the scope of VaR to exclude positions related to the risk management of interest rate exposure from changes in the Firmâ€™s own credit spread on fair value option elected liabilities, and included these positions in other sensitivity-based
+measures. Additionally, effective July 1, 2020, the Firm refined the scope of VaR to exclude certain asset-backed fair value option elected loans, and included them in other sensitivity-based measures to more effectively measure the risk from these loans. In the absence of these
+refinements, the average Total VaR for the three months ended December 31, 2020, September 30, 2020, June 30, 2020 and March 31, 2020 would have been different by $27 million, $11 million, $(8) million and $6 million, respectively.
+(d) Refer to Reconciliation from Reported to Managed Basis on page 7 for a further discussion of managed basis.
+(e) In the second quarter of 2020, the Firm reclassified certain spend-based credit card reward costs from marketing expense to be a reduction of card income, with no effect on net income. Prior-period amounts have been revised to conform with the current presentation.
+(f) Prior-period amounts have been revised to conform with the current presentation.
+
+Page 3
+
+JPMORGAN CHASE & CO.
+CONSOLIDATED STATEMENTS OF INCOME
+(in millions, except per share and ratio data)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+REVENUE                                                                                                                                       4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+Investment banking fees                                                                                         $ 2,583 $ 2,187 $ 2,850 $ 1,866 $ 1,843 18 % 40 % $ 9,486 $ 7,501 26 %
+Principal transactions 3,321 4,142 7,621 2,937 2,779 (20) 20 18,021 14,018 29
+Lending- and deposit-related fees (a) 1,727 1,647 1,431 1,706 1,772 5 (3) 6,511 6,626 (2)
+Asset management, administration and commissions (a) 4,901 4,470 4,266 4,540 4,301 10 14 18,177 16,908 8
+Investment securities gains 70 473 26 233 123 (85) (43) 802 258 211
+Mortgage fees and related income 767 1,087 917 320 474 (29) 62 3,091 2,036 52
+Card income (b) 1,297 1,169 974 995 1,335 11 (3) 4,435 5,076 (13)
+Other income 1,300 959 1,042 1,156 1,492 36 (13) 4,457 5,731 (22)
+Noninterest revenue 15,966 16,134 19,127 13,753 14,119 (1) 13 64,980 58,154 12
+Interest income 14,550 14,700 16,112 19,161 19,927 (1) (27) 64,523 84,040 (23)
+Interest expense 1,292 1,687 2,259 4,722 5,761 (23) (78) 9,960 26,795 (63)
+Net interest income 13,258 13,013 13,853 14,439 14,166 2 (6) 54,563 57,245 (5)
+TOTAL NET REVENUE 29,224 29,147 32,980 28,192 28,285 â€” 3 119,543 115,399 4
+Provision for credit losses (1,889) 611 10,473 8,285 1,427 NM NM 17,480 5,585 213
+NONINTEREST EXPENSE
+Compensation expense 7,954 8,630 9,509 8,895 8,088 (8) (2) 34,988 34,155 2
+Occupancy expense 1,161 1,142 1,080 1,066 1,084 2 7 4,449 4,322 3
+Technology, communications and equipment expense 2,606 2,564 2,590 2,578 2,585 2 1 10,338 9,821 5
+Professional and outside services 2,259 2,178 1,999 2,028 2,226 4 1 8,464 8,533 (1)
+Marketing (b) 725 470 481 800 847 54 (14) 2,476 3,351 (26)
+Other expense (c) 1,343 1,891 1,283 1,424 1,463 (29) (8) 5,941 5,087 17
+TOTAL NONINTEREST EXPENSE 16,048 16,875 16,942 16,791 16,293 (5) (2) 66,656 65,269 2
+Income before income tax expense 15,065 11,661 5,565 3,116 10,565 29 43 35,407 44,545 (21)
+Income tax expense 2,929 2,218 878 251 2,045 32 43 6,276 8,114 (f) (23)
+NET INCOME $ 12,136 $ 9,443 $ 4,687 $ 2,865 $ 8,520 29 42 $ 29,131 $ 36,431 (20)
+NET INCOME PER COMMON SHARE DATA
+Basic earnings per share $ 3.80 $ 2.93 $ 1.39 $ 0.79 $ 2.58 30 47 $ 8.89 $ 10.75 (17)
+Diluted earnings per share 3.79 2.92 1.38 0.78 2.57 30 47 8.88 10.72 (17)
+FINANCIAL RATIOS
+Return on common equity (d) 19 % 15 % 7 % 4 % 14 % 12 % 15 %
+Return on tangible common equity (d)(e) 24 19 9 5 17 14 19
+Return on assets (d) 1.42 1.14 0.58 0.40 1.22 0.91 1.33
+Effective income tax rate 19.4 19.0 15.8 8.1 19.4 17.7 18.2 (f)
+Overhead ratio 55 58 51 60 58 56 57
+
+(a) In the first quarter of 2020, the Firm reclassified certain fees from asset management, administration and commissions to lending- and deposit-related fees. Prior-period amounts have been revised to conform with the current presentation.
+(b) In the second quarter of 2020, the Firm reclassified certain spend-based credit card reward costs from marketing expense to be a reduction of card income, with no effect on net income. Prior-period amounts have been revised to conform with the current presentation.
+(c) Included Firmwide legal expense/(benefit) of $276 million, $524 million, $118 million, $197 million and $241 million for the three months ended December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020, and December 31, 2019, respectively, and $1.1 billion and
+$239 million for the full year 2020 and 2019 respectively.
+(d) Quarterly ratios are based upon annualized amounts.
+(e) Refer to page 28 for further discussion of ROTCE.
+(f) The full year 2019 included income tax benefits of $1.1 billion due to the resolution of certain tax audits.
+
+Page 4
+
+JPMORGAN CHASE & CO.
+CONSOLIDATED BALANCE SHEETS
+(in millions)
+
+Dec 31, 2020
+Change
+Dec 31, Sep 30, Jun 30, Mar 31, Dec 31, Sep 30, Dec 31,
+2020 2020 2020 2020 2019 2020 2019
+
+ASSETS
+Cash and due from banks $ 24,874 $ 20,816 $ 20,544 $ 24,001 $ 21,704 19 % 15 %
+Deposits with banks 502,735 466,706 473,185 343,533 241,927 8 108
+Federal funds sold and securities purchased under
+resale agreements 296,284 319,849 256,980 248,580 249,157 (7) 19
+Securities borrowed 160,635 142,441 142,704 139,839 139,758 13 15
+Trading assets:
+Debt and equity instruments (a) 423,496 429,196 416,870 429,275 319,921 (1) 32
+Derivative receivables 79,630 76,626 74,846 81,648 49,766 4 60
+Available-for-sale (â€œAFSâ€) securities 388,178 389,583 485,883 399,944 350,699 â€” 11
+Held-to-maturity (â€HTMâ€) securities, net of allowance for credit losses (b) 201,821 141,553 72,908 71,200 47,540 43 325
+Investment securities, net of allowance for credit losses (b) 589,999 531,136 558,791 471,144 398,239 11 48
+Loans (a) 1,012,853 989,740 1,009,382 1,049,610 997,620 2 2
+Less: Allowance for loan losses 28,328 30,814 31,591 (c) 23,244 13,123 (8) 116
+Loans, net of allowance for loan losses 984,525 958,926 977,791 1,026,366 984,497 3 â€”
+Accrued interest and accounts receivable 90,503 76,945 72,260 122,064 72,861 18 24
+Premises and equipment 27,109 26,672 26,301 25,882 25,813 2 5
+Goodwill, MSRs and other intangible assets 53,428 51,594 51,669 51,867 53,341 4 â€”
+Other assets (a) 152,853 145,169 141,675 175,232 130,395 5 17
+TOTAL ASSETS $ 3,386,071 $ 3,246,076 $ 3,213,616 $ 3,139,431 $ 2,687,379 4 26
+LIABILITIES
+Deposits $ 2,144,257 $ 2,001,416 $ 1,931,029 $ 1,836,009 $ 1,562,431 7 37
+Federal funds purchased and securities loaned or sold
+under repurchase agreements 215,209 236,440 235,647 233,207 183,675 (9) 17
+Short-term borrowings 45,208 41,992 48,014 51,909 40,920 8 10
+Trading liabilities:
+Debt and equity instruments 99,558 104,835 107,735 119,109 75,569 (5) 32
+Derivative payables 70,623 57,658 57,477 65,087 43,708 22 62
+Accounts payable and other liabilities 232,599 234,256 231,417 (c) 253,874 210,407 (1) 11
+Beneficial interests issued by consolidated VIEs 17,578 19,191 20,828 19,630 17,841 (8) (1)
+Long-term debt 281,685 279,175 317,003 299,344 291,498 1 (3)
+TOTAL LIABILITIES 3,106,717 2,974,963 2,949,150 2,878,169 2,426,049 4 28
+STOCKHOLDERSâ€™ EQUITY
+Preferred stock 30,063 30,063 30,063 30,063 26,993 â€” 11
+Common stock 4,105 4,105 4,105 4,105 4,105 â€” â€”
+Additional paid-in capital 88,394 88,289 88,125 87,857 88,522 â€” â€”
+Retained earnings 236,990 228,014 221,732 220,226 223,211 4 6
+Accumulated other comprehensive income/(loss) 7,986 8,940 8,789 7,418 1,569 (11) 409
+Shares held in RSU Trust, at cost â€” (11) (11) (21) (21) NM NM
+Treasury stock, at cost (88,184) (88,287) (88,337) (88,386) (83,049) â€” (6)
+TOTAL STOCKHOLDERSâ€™ EQUITY 279,354 271,113 264,466 261,262 261,330 3 7
+TOTAL LIABILITIES AND STOCKHOLDERSâ€™ EQUITY $ 3,386,071 $ 3,246,076 $ 3,213,616 $ 3,139,431 $ 2,687,379 4 26
+(a) In the third quarter of 2020, the Firm reclassified certain fair value option elected lending-related positions from trading assets to loans and other assets. Prior-period amounts have been revised to conform with the current presentation.
+(b) Upon adoption of the CECL accounting guidance, HTM securities are presented net of an allowance for credit losses. At December 31, 2020, September 30, 2020, June 30, 2020 and March 31, 2020, the allowance for credit losses on HTM securities was $78 million, $120
+million, $23 million and $19 million, respectively.
+(c) Prior-period amounts have been revised to conform with the current presentation.
+
+Page 5
+
+JPMORGAN CHASE & CO.
+CONDENSED AVERAGE BALANCE SHEETS AND ANNUALIZED YIELDS
+(in millions, except rates)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+AVERAGE BALANCES 4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+ASSETS
+Deposits with banks $ 507,194 $ 509,979 $ 477,895 $ 279,748 $ 272,648 (1) % 86 % $ 444,058 $ 280,004 59 %
+Federal funds sold and securities purchased under resale agreements 327,504 277,899 244,306 253,403 248,170 18 32 275,926 275,429 â€”
+Securities borrowed 149,146 147,184 141,328 136,127 135,374 1 10 143,472 131,291 9
+Trading assets - debt instruments (a) 319,585 322,321 345,073 304,808 280,487 (1) 14 322,936 294,958 9
+Investment securities 568,354 548,544 500,254 421,529 394,002 4 44 509,937 319,875 59
+Loans (a) 996,367 991,241 1,029,513 1,001,504 987,606 1 1 1,004,597 989,943 1
+All other interest-earning assets (a)(b) 87,496 77,806 81,320 68,430 59,257 12 48 78,784 53,779 46
+Total interest-earning assets 2,955,646 2,874,974 2,819,689 2,465,549 2,377,544 3 24 2,779,710 2,345,279 19
+Trading assets - equity and other instruments 138,477 119,905 99,115 114,479 114,112 15 21 118,055 114,323 3
+Trading assets - derivative receivables 79,300 81,300 79,298 66,309 52,860 (2) 50 76,572 53,786 42
+All other noninterest-earning assets (a) 226,395 213,978 231,166 243,895 232,754 6 (3) 228,811 228,453 â€”
+TOTAL ASSETS $ 3,399,818 $ 3,290,157 $ 3,229,268 $ 2,890,232 $ 2,777,270 3 22 $ 3,203,148 $ 2,741,841 17
+LIABILITIES
+Interest-bearing deposits $ 1,529,066 $ 1,434,034 $ 1,375,213 $ 1,216,555 $ 1,154,716 7 32 $ 1,389,224 $ 1,115,848 24
+Federal funds purchased and securities loaned or
+sold under repurchase agreements 247,276 253,779 276,815 243,922 235,481 (3) 5 255,421 227,994 12
+Short-term borrowings (c) 36,183 36,697 45,297 37,288 39,936 (1) (9) 38,853 52,426 (26)
+Trading liabilities - debt and other interest-bearing liabilities (d) 213,989 206,643 207,322 192,950 170,049 4 26 205,255 182,105 13
+Beneficial interests issued by consolidated VIEs 18,647 19,838 20,331 18,048 19,390 (6) (4) 19,216 22,501 (15)
+Long-term debt 237,144 267,175 269,336 243,996 248,521 (11) (5) 254,400 247,968 3
+Total interest-bearing liabilities 2,282,305 2,218,166 2,194,314 1,952,759 1,868,093 3 22 2,162,369 1,848,842 17
+Noninterest-bearing deposits 582,517 551,565 515,304 419,631 413,582 6 41 517,527 407,219 27
+Trading liabilities - equity and other instruments 33,732 32,256 33,797 30,721 28,197 5 20 32,628 31,085 5
+Trading liabilities - derivative payables 63,551 64,599 63,178 54,990 44,361 (2) 43 61,593 42,560 45
+All other noninterest-bearing liabilities 165,978 156,711 158,204 168,195 162,490 6 2 162,267 151,717 7
+TOTAL LIABILITIES 3,128,083 3,023,297 2,964,797 2,626,296 2,516,723 3 24 2,936,384 2,481,423 18
+Preferred stock 30,063 30,063 30,063 29,406 27,669 â€” 9 29,899 27,511 9
+Common stockholdersâ€™ equity 241,672 236,797 234,408 234,530 232,878 2 4 236,865 232,907 2
+TOTAL STOCKHOLDERSâ€™ EQUITY 271,735 266,860 264,471 263,936 260,547 2 4 266,764 260,418 2
+TOTAL LIABILITIES AND STOCKHOLDERSâ€™ EQUITY $ 3,399,818 $ 3,290,157 $ 3,229,268 $ 2,890,232 $ 2,777,270 3 22 $ 3,203,148 $ 2,741,841 17
+AVERAGE RATES (e)
+INTEREST-EARNING ASSETS
+Deposits with banks 0.03 % 0.05 % 0.06 % 0.82 % 1.00 % 0.17 % 1.39 %
+Federal funds sold and securities purchased under resale agreements 0.41 0.57 0.99 1.74 2.05 0.88 2.23
+Securities borrowed (f) (0.40) (0.35) (0.50) 0.45 0.81 (0.21) 1.20
+Trading assets - debt instruments (a) 2.32 2.29 2.42 2.74 2.87 2.44 3.12
+Investment securities 1.39 1.58 2.03 2.48 2.65 1.82 3.01
+Loans (a) 4.14 4.11 4.27 4.96 5.07 4.37 5.25
+All other interest-earning assets (a)(b) 0.89 0.94 0.99 2.60 3.49 1.30 3.99
+Total interest-earning assets 1.97 2.05 2.31 3.14 3.35 2.34 3.61
+INTEREST-BEARING LIABILITIES
+Interest-bearing deposits 0.05 0.07 0.10 0.52 0.67 0.17 0.80
+Federal funds purchased and securities loaned or
+sold under repurchase agreements 0.06 0.17 0.19 1.30 1.77 0.41 2.03
+Short-term borrowings (c) 0.40 0.65 1.11 1.63 1.97 0.96 2.38
+Trading liabilities - debt and other interest-bearing liabilities (d)(f) (0.15) (0.10) (0.08) 0.77 1.04 0.10 1.42
+Beneficial interests issued by consolidated VIEs 0.65 0.71 1.15 2.02 2.22 1.12 2.52
+Long-term debt 1.82 1.93 2.45 2.88 3.21 2.27 3.55
+Total interest-bearing liabilities 0.23 0.30 0.41 0.97 1.22 0.46 1.45
+INTEREST RATE SPREAD 1.74 % 1.75 % 1.90 % 2.17 % 2.13 % 1.88 % 2.16 %
+NET YIELD ON INTEREST-EARNING ASSETS 1.80 % 1.82 % 1.99 % 2.37 % 2.38 % 1.98 % 2.46 %
+Memo: Net yield on interest-earning assets excluding CIB Markets (g) 2.01 % 2.05 % 2.27 % 3.01 % 3.06 % 2.30 % 3.27 %
+(a) In the third quarter of 2020, the Firm reclassified certain fair value option elected lending-related positions from trading assets to loans and other assets. Prior-period amounts have been revised to conform with the current presentation.
+(b) Includes brokerage-related held-for-investment customer receivables, which are classified in accrued interest and accounts receivable, and all other interest-earning assets, which are classified in other assets on the Consolidated Balance Sheets.
+(c) Includes commercial paper.
+(d) All other interest-bearing liabilities include brokerage-related customer payables.
+(e) Interest includes the effect of related hedging derivatives. Taxable-equivalent amounts are used where applicable.
+(f) Negative interest income and yields are related to the impact of current interest rates combined with the fees paid on client-driven securities borrowed balances. The negative interest expense related to prime brokerage customer payables is recognized in interest expense and
+reported within trading liabilities - debt and all other liabilities.
+(g) Net yield on interest-earning assets excluding CIB Markets is a non-GAAP financial measure. Refer to page 28 for a further discussion of this measure.
+
+Page 6
+
+JPMORGAN CHASE & CO.
+RECONCILIATION FROM REPORTED TO MANAGED BASIS
+(in millions, except ratios)
+The Firm prepares its Consolidated Financial Statements using accounting principles generally accepted in the U.S. (â€œU.S. GAAPâ€). That presentation, which is referred to as â€œreportedâ€ basis, provides the reader with an understanding of the Firmâ€™s results that can be tracked
+consistently from year-to-year and enables a comparison of the Firmâ€™s performance with other companiesâ€™ U.S. GAAP financial statements. In addition to analyzing the Firmâ€™s results on a reported basis, management reviews Firmwide results, including the overhead ratio, on a
+â€œmanagedâ€ basis; these Firmwide managed basis results are non-GAAP financial measures. The Firm also reviews the results of the lines of business on a managed basis. Refer to the notes on Non-GAAP Financial Measures on page 28 for additional information on
+managed basis.
+The following summary table provides a reconciliation from reported U.S. GAAP results to managed basis.
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+OTHER INCOME
+Other income - reported $ 1,300 $ 959 $ 1,042 $ 1,156 $ 1,492 36 % (13) % $ 4,457 $ 5,731 (22) %
+Fully taxable-equivalent adjustments (a) 840 690 730 708 757 22 11 2,968 2,534 17
+Other income - managed $ 2,140 $ 1,649 $ 1,772 $ 1,864 $ 2,249 30 (5) $ 7,425 $ 8,265 (10)
+TOTAL NONINTEREST REVENUE (b)
+Total noninterest revenue - reported $ 15,966 $ 16,134 $ 19,127 $ 13,753 $ 14,119 (1) 13 $ 64,980 $ 58,154 12
+Fully taxable-equivalent adjustments (a) 840 690 730 708 757 22 11 2,968 2,534 17
+Total noninterest revenue - managed $ 16,806 $ 16,824 $ 19,857 $ 14,461 $ 14,876 â€” 13 $ 67,948 $ 60,688 12
+NET INTEREST INCOME
+Net interest income - reported $ 13,258 $ 13,013 $ 13,853 $ 14,439 $ 14,166 2 (6) $ 54,563 $ 57,245 (5)
+Fully taxable-equivalent adjustments (a) 97 104 107 110 123 (7) (21) 418 531 (21)
+Net interest income - managed $ 13,355 $ 13,117 $ 13,960 $ 14,549 $ 14,289 2 (7) $ 54,981 $ 57,776 (5)
+TOTAL NET REVENUE (b)
+Total net revenue - reported $ 29,224 $ 29,147 $ 32,980 $ 28,192 $ 28,285 â€” 3 $ 119,543 $ 115,399 4
+Fully taxable-equivalent adjustments (a) 937 794 837 818 880 18 6 3,386 3,065 10
+Total net revenue - managed $ 30,161 $ 29,941 $ 33,817 $ 29,010 $ 29,165 1 3 $ 122,929 $ 118,464 4
+PRE-PROVISION PROFIT
+Pre-provision profit - reported $ 13,176 $ 12,272 $ 16,038 $ 11,401 $ 11,992 7 10 $ 52,887 $ 50,130 5
+Fully taxable-equivalent adjustments (a) 937 794 837 818 880 18 6 3,386 3,065 10
+Pre-provision profit - managed $ 14,113 $ 13,066 $ 16,875 $ 12,219 $ 12,872 8 10 $ 56,273 $ 53,195 6
+INCOME BEFORE INCOME TAX EXPENSE
+Income before income tax expense - reported $ 15,065 $ 11,661 $ 5,565 $ 3,116 $ 10,565 29 43 $ 35,407 $ 44,545 (21)
+Fully taxable-equivalent adjustments (a) 937 794 837 818 880 18 6 3,386 3,065 10
+Income before income tax expense - managed $ 16,002 $ 12,455 $ 6,402 $ 3,934 $ 11,445 28 40 $ 38,793 $ 47,610 (19)
+INCOME TAX EXPENSE
+Income tax expense - reported $ 2,929 $ 2,218 $ 878 $ 251 $ 2,045 32 43 $ 6,276 $ 8,114 (23)
+Fully taxable-equivalent adjustments (a) 937 794 837 818 880 18 6 3,386 3,065 10
+Income tax expense - managed $ 3,866 $ 3,012 $ 1,715 $ 1,069 $ 2,925 28 32 $ 9,662 $ 11,179 (14)
+OVERHEAD RATIO
+Overhead ratio - reported 55 % 58 % 51 % 60 % 58 % 56 % 57 %
+Overhead ratio - managed 53 56 50 58 56 54 55
+(a) Predominantly recognized in CIB, CB and Corporate.
+(b) In the second quarter of 2020, the Firm reclassified certain spend-based credit card reward costs from marketing expense to be a reduction of card income, with no effect on net income. Prior-period amounts have been revised to conform with the current presentation.
+
+Page 7
+
+JPMORGAN CHASE & CO.
+SEGMENT RESULTS - MANAGED BASIS
+(in millions)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+TOTAL NET REVENUE (fully taxable-equivalent (â€œFTEâ€))
+Consumer & Community Banking (a) $ 12,728 $ 12,895 $ 12,358 $ 13,287 $ 13,880 (1) % (8) % $ 51,268 $ 55,133 (7) %
+Corporate & Investment Bank 11,352 11,546 16,383 10,003 9,703 (2) 17 49,284 39,265 26
+Commercial Banking 2,463 2,285 2,400 2,165 2,296 8 7 9,313 9,264 1
+Asset & Wealth Management 3,867 3,554 3,430 3,389 3,514 9 10 14,240 13,591 5
+Corporate (249) (339) (754) 166 (228) 27 (9) (1,176) 1,211 NM
+TOTAL NET REVENUE $ 30,161 $ 29,941 $ 33,817 $ 29,010 $ 29,165 1 3 $ 122,929 $ 118,464 4
+TOTAL NONINTEREST EXPENSE
+Consumer & Community Banking (a) $ 7,042 $ 6,912 $ 6,767 $ 7,269 $ 7,116 2 (1) $ 27,990 $ 28,276 (1)
+Corporate & Investment Bank 4,939 5,832 6,812 5,955 5,451 (15) (9) 23,538 22,444 5
+Commercial Banking 950 969 893 986 941 (2) 1 3,798 3,735 2
+Asset & Wealth Management 2,756 2,443 2,323 2,435 2,442 13 13 9,957 9,747 2
+Corporate 361 719 147 146 343 (50) 5 1,373 1,067 29
+TOTAL NONINTEREST EXPENSE $ 16,048 $ 16,875 $ 16,942 $ 16,791 $ 16,293 (5) (2) $ 66,656 $ 65,269 2
+PRE-PROVISION PROFIT/(LOSS)
+Consumer & Community Banking $ 5,686 $ 5,983 $ 5,591 $ 6,018 $ 6,764 (5) (16) $ 23,278 $ 26,857 (13)
+Corporate & Investment Bank 6,413 5,714 9,571 4,048 4,252 12 51 25,746 16,821 53
+Commercial Banking 1,513 1,316 1,507 1,179 1,355 15 12 5,515 5,529 â€”
+Asset & Wealth Management 1,111 1,111 1,107 954 1,072 â€” 4 4,283 3,844 11
+Corporate (610) (1,058) (901) 20 (571) 42 (7) (2,549) 144 NM
+PRE-PROVISION PROFIT $ 14,113 $ 13,066 $ 16,875 $ 12,219 $ 12,872 8 10 $ 56,273 $ 53,195 6
+PROVISION FOR CREDIT LOSSES
+Consumer & Community Banking $ (83) $ 795 $ 5,828 $ 5,772 $ 1,207 NM NM $ 12,312 $ 4,954 149
+Corporate & Investment Bank (581) (81) 1,987 1,401 98 NM NM 2,726 277 NM
+Commercial Banking (1,181) (147) 2,431 1,010 110 NM NM 2,113 296 NM
+Asset & Wealth Management (2) (52) 223 94 13 96 NM 263 59 346
+Corporate (42) 96 4 8 (1) NM NM 66 (1) NM
+PROVISION FOR CREDIT LOSSES $ (1,889) $ 611 $ 10,473 $ 8,285 $ 1,427 NM NM $ 17,480 $ 5,585 213
+NET INCOME/(LOSS)
+Consumer & Community Banking $ 4,325 $ 3,871 $ (176) $ 197 $ 4,200 12 3 $ 8,217 $ 16,541 (50)
+Corporate & Investment Bank 5,349 4,309 5,451 1,985 2,935 24 82 17,094 11,954 43
+Commercial Banking 2,034 1,086 (681) 139 945 87 115 2,578 3,958 (35)
+Asset & Wealth Management 786 876 661 669 801 (10) (2) 2,992 2,867 4
+Corporate (358) (699) (568) (125) (361) 49 1 (1,750) 1,111 NM
+TOTAL NET INCOME $ 12,136 $ 9,443 $ 4,687 $ 2,865 $ 8,520 29 42 $ 29,131 $ 36,431 (20)
+In the fourth quarter of 2020, payment processing-only clients along with the associated revenue and expenses were realigned to CIBâ€™s Wholesale Payments business from CCB and CB. Prior-period amounts have been revised to conform with the current presentation. Refer to
+Business segment changes on page 21 of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended March 31, 2020 for further information.
+In the fourth quarter of 2020, the Firm realigned certain wealth management clients from AWM to CCB. Prior-period amounts have been revised to conform with the current presentation. Refer to page 29 for further information.
+(a) In the second quarter of 2020, the Firm reclassified certain spend-based credit card reward costs from marketing expense to be a reduction of card income, with no effect on net income. Prior-period amounts have been revised to conform with the current presentation.
+
+Page 8
 
-	// Use 'postCreateCommand' to run commands after the container is created.
+JPMORGAN CHASE & CO.
+CAPITAL AND OTHER SELECTED BALANCE SHEET ITEMS
+(in millions, except ratio data)
+
+Dec 31, 2020
+Change FULL YEAR
+
+Dec 31, Sep 30, Jun 30, Mar 31, Dec 31, Sep 30, Dec 31, 2020 Change
+2020 2020 2020 2020 2019 2020 2019 2020 2019 2019
+
+CAPITAL (a)
+Risk-based capital metrics
+Standardized
+CET1 capital $ 205,066 (e) $ 197,719 $ 190,867 $ 183,591 $ 187,753 4 % 9 %
+Tier 1 capital 234,835 (e) 227,486 220,674 213,406 214,432 3 10
+Total capital 269,933 (e) 262,397 256,667 247,541 242,589 3 11
+Risk-weighted assets 1,562,381 (e) 1,514,509 1,541,365 1,598,828 1,515,869 3 3
+CET1 capital ratio 13.1 % (e) 13.1 % 12.4 % 11.5 % 12.4 %
+Tier 1 capital ratio 15.0 (e) 15.0 14.3 13.3 14.1
+Total capital ratio 17.3 (e) 17.3 16.7 15.5 16.0
+Advanced
+CET1 capital $ 205,066 (e) $ 197,719 $ 190,867 $ 183,591 $ 187,753 4 9
+Tier 1 capital 234,835 (e) 227,486 220,674 213,406 214,432 3 10
+Total capital 257,222 (e) 249,947 244,112 234,434 232,112 3 11
+Risk-weighted assets 1,485,654 (e) 1,429,334 1,450,587 1,489,134 1,397,878 4 6
+CET1 capital ratio 13.8 % (e) 13.8 % 13.2 % 12.3 % 13.4 %
+Tier 1 capital ratio 15.8 (e) 15.9 15.2 14.3 15.3
+Total capital ratio 17.3 (e) 17.5 16.8 15.7 16.6
+Leverage-based capital metrics
+Adjusted average assets (b) $ 3,353,310 (e) $ 3,243,290 $ 3,176,729 $ 2,842,244 $ 2,730,239 3 23
+Tier 1 leverage ratio 7.0 % (e) 7.0 % 6.9 % 7.5 % 7.9 %
+Total leverage exposure 3,396,447 (e) 3,247,392 3,228,424 3,535,822 3,423,431 5 (1)
+SLR 6.9 % (e) 7.0 % 6.8 % 6.0 % 6.3 %
+TANGIBLE COMMON EQUITY (period-end) (c)
+Common stockholdersâ€™ equity $ 249,291 $ 241,050 $ 234,403 $ 231,199 $ 234,337 3 6
+Less: Goodwill 49,248 47,819 47,811 47,800 47,823 3 3
+Less: Other intangible assets 904 759 778 800 819 19 10
+Add: Certain deferred tax liabilities (d) 2,453 2,405 2,397 2,389 2,381 2 3
+Total tangible common equity $ 201,592 $ 194,877 $ 188,211 $ 184,988 $ 188,076 3 7
+TANGIBLE COMMON EQUITY (average) (c)
+Common stockholdersâ€™ equity $ 241,672 $ 236,797 $ 234,408 $ 234,530 $ 232,878 2 4 $ 236,865 $ 232,907 2 %
+Less: Goodwill 47,842 47,820 47,805 47,812 47,819 â€” â€” 47,820 47,620 â€”
+Less: Other intangible assets 752 769 791 812 831 (2) (10) 781 789 (1)
+Add: Certain deferred tax liabilities (d) 2,416 2,401 2,393 2,385 2,375 1 2 2,399 2,328 3
+Total tangible common equity $ 195,494 $ 190,609 $ 188,205 $ 188,291 $ 186,603 3 5 $ 190,663 $ 186,826 2
+INTANGIBLE ASSETS (period-end)
+Goodwill $ 49,248 $ 47,819 $ 47,811 $ 47,800 $ 47,823 3 3
+Mortgage servicing rights 3,276 3,016 3,080 3,267 4,699 9 (30)
+Other intangible assets 904 759 778 800 819 19 10
+Total intangible assets $ 53,428 $ 51,594 $ 51,669 $ 51,867 $ 53,341 4 â€”
+(a) The capital metrics reflect the relief provided by the Federal Reserve Board in response to the COVID-19 pandemic, including the CECL capital transition provisions that became effective in the first quarter of 2020. For the periods ended December 31, 2020, September 30,
+2020, June 30, 2020 and March 31, 2020, the impact of the CECL capital transition provisions resulted in an increase to CET1 capital of $5.7 billion, $6.4 billion, $6.5 billion and $4.3 billion, respectively. The SLR reflects the temporary exclusions of U.S. Treasury securities and
+deposits at Federal Reserve Banks that became effective in the second quarter of 2020. Refer to Regulatory Developments Relating to the COVID-19 Pandemic on pages 11-12 and Capital Risk Management on pages 49-54 of the Firmâ€™s Quarterly Report on Form 10-Q for the
+quarterly period ended September 30, 2020 for additional information. Refer to Capital Risk Management on pages 85-92 of the Firmâ€™s 2019 Form 10-K for additional information on the Firmâ€™s capital metrics.
+(b) Adjusted average assets, for purposes of calculating the leverage ratios, includes total quarterly average assets adjusted for on-balance sheet assets that are subject to deduction from Tier 1 capital, predominantly goodwill and other intangible assets.
+(c) Refer to page 28 for further discussion of TCE.
+(d) Represents deferred tax liabilities related to tax-deductible goodwill and to identifiable intangibles created in nontaxable transactions, which are netted against goodwill and other intangibles when calculating TCE.
+(e) Estimated.
+
+Page 9
+
+JPMORGAN CHASE & CO.
+EARNINGS PER SHARE AND RELATED INFORMATION
+(in millions, except per share and ratio data)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+EARNINGS PER SHARE
+Basic earnings per share
+Net income $ 12,136 $ 9,443 $ 4,687 $ 2,865 $ 8,520 29 % 42 % $ 29,131 $ 36,431 (20) %
+Less: Preferred stock dividends 380 381 401 421 386 â€” (2) 1,583 1,587 â€”
+Net income applicable to common equity 11,756 9,062 4,286 2,444 8,134 30 45 27,548 34,844 (21)
+Less: Dividends and undistributed earnings allocated to
+participating securities 57 47 21 13 44 21 30 138 202 (32)
+Net income applicable to common stockholders $ 11,699 $ 9,015 $ 4,265 $ 2,431 $ 8,090 30 45 $ 27,410 $ 34,642 (21)
+Total weighted-average basic shares outstanding 3,079.7 3,077.8 3,076.3 3,095.8 3,140.7 â€” (2) 3,082.4 3,221.5 (4)
+Net income per share $ 3.80 $ 2.93 $ 1.39 $ 0.79 $ 2.58 30 47 $ 8.89 $ 10.75 (17)
+Diluted earnings per share
+Net income applicable to common stockholders $ 11,699 $ 9,015 $ 4,265 $ 2,431 $ 8,090 30 45 $ 27,410 $ 34,642 (21)
+Total weighted-average basic shares outstanding 3,079.7 3,077.8 3,076.3 3,095.8 3,140.7 â€” (2) 3,082.4 3,221.5 (4)
+Add: Dilutive impact of stock appreciation rights (â€œSARsâ€) and
+employee stock options, unvested performance share units
+(â€œPSUsâ€) and nondividend-earning restricted stock units
+(â€œRSUsâ€) 5.4 5.0 4.7 4.9 7.8 8 (31) 5.0 8.9 (44)
+Total weighted-average diluted shares outstanding 3,085.1 3,082.8 3,081.0 3,100.7 3,148.5 â€” (2) 3,087.4 3,230.4 (4)
+Net income per share $ 3.79 $ 2.92 $ 1.38 $ 0.78 $ 2.57 30 47 $ 8.88 $ 10.72 (17)
+COMMON DIVIDENDS
+Cash dividends declared per share $ 0.90 $ 0.90 $ 0.90 $ 0.90 $ 0.90 â€” â€” $ 3.60 $ 3.40 6
+Dividend payout ratio 24 % 31 % 65 % 114 % 35 % 40 % 31 %
+COMMON SHARE REPURCHASE PROGRAM (a)
+Total shares of common stock repurchased â€” â€” â€” 50.0 54.0 â€” NM 50.0 213.0 (77)
+Average price paid per share of common stock $ â€” $ â€” $ â€” $ 127.92 $ 127.24 â€” NM $ 127.92 $ 113.26 13
+Aggregate repurchases of common stock â€” â€” â€” 6,397 6,871 â€” NM 6,397 24,121 (73)
+EMPLOYEE ISSUANCE
+Shares issued from treasury stock related to employee
+stock-based compensation awards and employee stock
+purchase plans 1.5 0.6 0.8 13.0 1.5 150 â€” 15.9 21.2 (25)
+Net impact of employee issuances on stockholdersâ€™ equity (b) $ 217 $ 263 $ 325 $ 398 $ 132 (17) 64 $ 1,203 $ 970 24
+(a) On March 15, 2020, in response to the COVID-19 pandemic, the Firm temporarily suspended repurchases of its common stock. Subsequently, the Federal Reserve directed all large banks, including the Firm, to discontinue net share repurchases through the end of 2020. On
+December 18, 2020, the Federal Reserve announced that all large banks, including the Firm, could resume share repurchases commencing in the first quarter of 2021, subject to certain restrictions. As a result, the Firm announced that its Board of Directors authorized a new
+common share repurchase program of $30 billion.
+(b) The net impact of employee issuances on stockholdersâ€™ equity is driven by the cost of equity compensation awards that is recognized over the applicable vesting periods. The cost is partially offset by tax impacts related to the distribution of shares and the exercise of employee
+stock options and SARs.
+
+Page 10
+
+JPMORGAN CHASE & CO.
+CONSUMER & COMMUNITY BANKING
+FINANCIAL HIGHLIGHTS
+(in millions, except ratio data)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+INCOME STATEMENT
+REVENUE
+Lending- and deposit-related fees (a) $ 806 $ 771 $ 617 $ 972 $ 1,032 5 % (22) % $ 3,166 $ 3,938 (20) %
+Asset management, administration and commissions (a) 735 703 634 708 711 5 3 2,780 2,808 (1)
+Mortgage fees and related income 766 1,076 917 320 474 (29) 62 3,079 2,035 51
+Card income (b) 923 826 667 652 905 12 2 3,068 3,412 (10)
+All other income 1,328 1,487 1,387 1,445 1,469 (11) (10) 5,647 5,603 1
+Noninterest revenue 4,558 4,863 4,222 4,097 4,591 (6) (1) 17,740 17,796 â€”
+Net interest income 8,170 8,032 8,136 9,190 9,289 2 (12) 33,528 37,337 (10)
+TOTAL NET REVENUE 12,728 12,895 12,358 13,287 13,880 (1) (8) 51,268 55,133 (7)
+Provision for credit losses (83) 795 5,828 5,772 1,207 NM NM 12,312 4,954 149
+NONINTEREST EXPENSE
+Compensation expense 2,734 2,804 2,694 2,782 2,668 (2) 2 11,014 10,815 2
+Noncompensation expense (b)(c) 4,308 4,108 4,073 4,487 4,448 5 (3) 16,976 17,461 (3)
+TOTAL NONINTEREST EXPENSE 7,042 6,912 6,767 7,269 7,116 2 (1) 27,990 28,276 (1)
+Income/(loss) before income tax expense/(benefit) 5,769 5,188 (237) 246 5,557 11 4 10,966 21,903 (50)
+Income tax expense/(benefit) 1,444 1,317 (61) 49 1,357 10 6 2,749 5,362 (49)
+NET INCOME/(LOSS) $ 4,325 $ 3,871 $ (176) $ 197 $ 4,200 12 3 $ 8,217 $ 16,541 (50)
+REVENUE BY LINE OF BUSINESS
+Consumer & Business Banking $ 5,744 $ 5,697 $ 5,248 $ 6,266 $ 6,668 1 (14) $ 22,955 $ 27,376 (16)
+Home Lending 1,456 1,714 1,687 1,161 1,250 (15) 16 6,018 5,179 16
+Card & Auto (b) 5,528 5,484 5,423 5,860 5,962 1 (7) 22,295 22,578 (1)
+MORTGAGE FEES AND RELATED INCOME DETAILS:
+Net production revenue 803 765 742 319 327 5 146 2,629 1,618 62
+Net mortgage servicing revenue (d) (37) 311 175 1 147 NM NM 450 417 8
+Mortgage fees and related income $ 766 $ 1,076 $ 917 $ 320 $ 474 (29) 62 $ 3,079 $ 2,035 51
+FINANCIAL RATIOS
+ROE 32 % 29 % (2) % 1 % 31 % 15 % 31 %
+Overhead ratio 55 54 55 55 51 55 51
+In the fourth quarter of 2020, payment processing-only clients along with the associated revenue and expenses were realigned to CIBâ€™s Wholesale Payments business from CCB and CB. Prior-period amounts have been revised to conform with the current presentation. Refer to
+Business segment changes on page 21 of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended March 31, 2020 for further information.
+In the fourth quarter of 2020, the Firm realigned certain wealth management clients from AWM to CCB. Prior-period amounts have been revised to conform with the current presentation. Refer to page 29 for further information.
+(a) In the first quarter of 2020, the Firm reclassified certain fees from asset management, administration and commissions to lending- and deposit-related fees. Prior-period amounts have been revised to conform with the current presentation.
+(b) In the second quarter of 2020, the Firm reclassified certain spend-based credit card reward costs from marketing expense to be a reduction of card income, with no effect on net income. Prior-period amounts have been revised to conform with the current presentation.
+(c) Included depreciation expense on leased assets of $975 million and $1.0 billion for the three months ended December 31, 2020 and September 30, 2020, and $1.1 billion for the three months ended June 30, 2020, March 31, 2020 and December 31, 2019, respectively, and
+$4.2 billion and $4.0 billion for the full year 2020 and 2019, respectively.
+(d) Included MSR risk management results of $(152) million, $145 million, $79 million, $(90) million and $35 million for the three months ended December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020, and December 31, 2019, respectively, and $(18) million and
+$(165) million for the full year 2020 and 2019, respectively.
+
+Page 11
+
+JPMORGAN CHASE & CO.
+CONSUMER & COMMUNITY BANKING
+FINANCIAL HIGHLIGHTS, CONTINUED
+(in millions, except headcount data)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+SELECTED BALANCE SHEET DATA (period-end)
+Total assets $ 496,654 $ 487,012 $ 498,607 $ 513,301 $ 541,316 2 % (8) % $ 496,654 $ 541,316 (8) %
+Loans:
+Consumer & Business Banking 48,810 (d) 49,646 (d) 49,305 (d) 30,004 29,585 (2) 65 48,810 (d) 29,585 65
+Home Lending (a)(b) 182,121 188,561 195,664 205,318 213,445 (3) (15) 182,121 213,445 (15)
+Card 144,216 140,377 141,656 154,021 168,924 3 (15) 144,216 168,924 (15)
+Auto 66,432 62,304 59,287 61,468 61,522 7 8 66,432 61,522 8
+Total loans 441,579 440,888 445,912 450,811 473,476 â€” (7) 441,579 473,476 (7)
+Deposits 958,706 909,198 885,535 783,398 723,418 5 33 958,706 723,418 33
+Equity 52,000 52,000 52,000 52,000 52,000 â€” â€” 52,000 52,000 â€”
+SELECTED BALANCE SHEET DATA (average)
+Total assets $ 486,221 $ 490,043 $ 504,520 $ 525,644 $ 534,596 (1) (9) $ 501,533 $ 543,076 (8)
+Loans:
+Consumer & Business Banking 49,506 49,596 43,442 29,570 29,192 â€” 70 43,064 28,859 49
+Home Lending (a)(c) 185,733 192,172 199,532 211,333 216,921 (3) (14) 197,148 230,662 (15)
+Card 141,236 140,386 142,377 162,660 162,112 1 (13) 146,633 156,325 (6)
+Auto 64,342 60,345 60,306 60,893 61,100 7 5 61,476 61,862 (1)
+Total loans 440,817 442,499 445,657 464,456 469,325 â€” (6) 448,321 477,708 (6)
+Deposits 928,518 895,535 840,467 739,709 712,829 4 30 851,390 698,378 22
+Equity 52,000 52,000 52,000 52,000 52,000 â€” â€” 52,000 52,000 â€”
+Headcount 122,894 122,905 123,765 124,609 125,756 â€” (2) 122,894 125,756 (2)
+In the fourth quarter of 2020, payment processing-only clients along with the associated revenue and expenses were realigned to CIBâ€™s Wholesale Payments business from CCB and CB. Prior-period amounts have been revised to conform with the current presentation. Refer to
+Business segment changes on page 21 of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended March 31, 2020 for further information.
+In the fourth quarter of 2020, the Firm realigned certain wealth management clients from AWM to CCB. Prior-period amounts have been revised to conform with the current presentation. Refer to page 29 for further information.
+(a) In the third quarter of 2020, the Firm reclassified certain fair value option elected lending-related positions from trading assets to loans. Prior-period amounts have been revised to conform with the current presentation.
+(b) At December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020 and December 31, 2019, Home Lending loans held-for-sale and loans at fair value were $9.7 billion, $10.0 billion, $8.6 billion, $10.8 billion, and $16.6 billion, respectively.
+(c) Average Home Lending loans held-for sale and loans at fair value were $10.7 billion, $9.2 billion, $8.7 billion, $15.8 billion, and $19.1 billion for the three months ended December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020 and December 31, 2019,
+respectively, and were $11.1 billion and $14.1 billion for the full year 2020 and 2019, respectively.
+(d) At December 31, 2020, September 30, 2020 and June 30, 2020, included $19.2 billion, $20.3 billion and $19.9 billion of loans, respectively, in Business Banking under the Paycheck Protection Program (â€œPPPâ€). Refer to page 61 of the Firmâ€™s Quarterly Report on Form 10-Q
+for the quarterly period ended September 30, 2020 for further information on the PPP.
+
+Page 12
+
+JPMORGAN CHASE & CO.
+CONSUMER & COMMUNITY BANKING
+FINANCIAL HIGHLIGHTS, CONTINUED
+(in millions, except ratio data) QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+CREDIT DATA AND QUALITY STATISTICS
+Nonaccrual loans (a)(b)(c) $ 5,675 (f) $ 5,162 (f)(i) $ 4,429 (f) $ 4,022 $ 3,027 10 % 87 % $ 5,675 (f) $ 3,027 87 %
+Net charge-offs/(recoveries)
+Consumer & Business Banking 75 54 60 74 93 39 (19) 263 298 (12)
+Home Lending (50) 8 (5) (122) (23) NM (117) (169) (98) (72)
+Card 767 1,028 1,178 1,313 1,231 (25) (38) 4,286 4,848 (12)
+Auto 25 5 45 48 57 400 (56) 123 206 (40)
+Total net charge-offs/(recoveries) $ 817 $ 1,095 $ 1,278 $ 1,313 $ 1,358 (25) (40) $ 4,503 $ 5,254 (14)
+Net charge-off/(recovery) rate
+Consumer & Business Banking 0.60 % (g) 0.43 % (g) 0.56 % (g) 1.01 % 1.26 % 0.61 % (g) 1.03 %
+Home Lending (0.11) 0.02 (0.01) (0.25) (0.05) (0.09) (0.05)
+Card 2.17 2.92 3.33 3.25 3.01 2.93 3.10
+Auto 0.15 0.03 0.30 0.32 0.37 0.20 0.33
+Total net charge-off/(recovery) rate 0.76 1.01 1.18 1.18 1.20 1.03 1.13
+30+ day delinquency rate
+Home Lending (d)(e) 1.15 % (h) 1.62 % (h) 1.30 % (h) 1.48 % 1.58 % 1.15 % (h) 1.58 %
+Card 1.68 (h) 1.57 (h) 1.71 (h) 1.96 1.87 1.68 (h) 1.87
+Auto 0.69 (h) 0.54 (h) 0.54 (h) 0.89 0.94 0.69 (h) 0.94
+90+ day delinquency rate - Card 0.92 (h) 0.69 (h) 0.93 (h) 1.02 0.95 0.92 (h) 0.95
+Allowance for loan losses
+Consumer & Business Banking $ 1,372 $ 1,372 $ 1,372 $ 884 $ 750 â€” 83 $ 1,372 $ 750 83
+Home Lending 1,813 2,685 2,957 2,137 1,890 (32) (4) 1,813 1,890 (4)
+Card 17,800 17,800 17,800 14,950 5,683 â€” 213 17,800 5,683 213
+Auto 1,042 1,044 1,044 732 465 â€” 124 1,042 465 124
+Total allowance for loan losses $ 22,027 $ 22,901 $ 23,173 $ 18,703 $ 8,788 (4) 151 $ 22,027 $ 8,788 151
+In the fourth quarter of 2020, the Firm realigned certain wealth management clients from AWM to CCB. Prior-period amounts have been revised to conform with the current presentation. Refer to page 29 for further information.
+(a) At December 31, 2020, September 30, 2020, June 30, 2020 and March 31, 2020, nonaccrual loans included $1.6 billion, $1.5 billion, $1.3 billion and $970 million of PCD loans, respectively. Prior to the adoption of CECL, nonaccrual loans excluded PCI loans as the Firm
+recognized interest income on each pool of PCI loans as each of the pools was performing.
+(b) At December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020 and December 31, 2019, nonaccrual loans excluded mortgage loans 90 or more days past due and insured by U.S. government agencies of $558 million, $851 million, $561 million, $616 million
+and $963 million, respectively. These amounts have been excluded based upon the government guarantee. Prior-period amounts of mortgage loans 90 or more days past due and insured by U.S. government agencies excluded from nonaccrual loans have been revised to
+conform with the current presentation, refer to footnote (c) for additional information.
+(c) In the third quarter of 2020, the Firm reclassified certain fair value option elected lending-related positions from trading assets to loans. Prior-period amounts have been revised to conform with the current presentation.
+(d) At December 31, 2020, September 30, 2020, June 30, 2020 and March 31, 2020, the 30+ day delinquency rates included PCD loans. The rates prior to January 1, 2020 have been revised to include the impact of PCI loans.
+(e) At December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020 and December 31, 2019, excluded mortgage loans 30 or more days past due and insured by U.S. government agencies of $744 million, $1.1 billion, $826 million, $1.0 billion and $1.7 billion,
+respectively. These amounts have been excluded based upon the government guarantee. Prior-period amounts of mortgage loans 30 or more days past due and insured by U.S. government agencies excluded from 30+ day delinquency rate have been revised to conform
+with the current presentation, refer to footnote (c) for additional information.
+(f) Generally excludes loans that were under payment deferral programs offered in response to the COVID-19 pandemic. Includes loans to customers that have exited COVID-19 payment deferral programs and are 90 or more days past due, predominantly all of which were
+considered collateral-dependent and charged down to the lower of amortized cost or fair value of the underlying collateral less costs to sell.
+(g) At December 31, 2020, September 30, 2020 and June 30, 2020, included $19.2 billion, $20.3 billion and $19.9 billion of loans, respectively, under the PPP. Given that PPP loans are guaranteed by the SBA, the Firm does not expect to realize material credit losses on these
+loans. Refer to page 61 of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended September 30, 2020 for further information on the PPP.
+(h) At December 31, 2020, September 30, 2020 and June 30, 2020, the principal balance of loans under payment deferral programs offered in response to the COVID-19 pandemic were as follows: (1) $9.1 billion, $10.2 billion and $18.2 billion in Home Lending, respectively;
+(2)$264 million, $368 million and $4.4 billion in Card, respectively; and (3) $376 million, $411 million and $12.3 billion in Auto, respectively. Loans that are performing according to their modified terms are generally not considered delinquent.
+(i) Prior-period amount has been revised to conform with the current presentation.
+
+Page 13
+
+JPMORGAN CHASE & CO.
+CONSUMER & COMMUNITY BANKING
+FINANCIAL HIGHLIGHTS, CONTINUED
+(in millions, except ratio data and where otherwise noted)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+BUSINESS METRICS
+Number of:
+Branches 4,908 4,960 4,923 4,967 4,976 (1) % (1) % 4,908 4,976 (1) %
+Active digital customers (in thousands) (a) 55,274 54,779 54,505 53,833 52,453 1 5 55,274 52,453 5
+Active mobile customers (in thousands) (b) 40,899 40,164 39,044 38,256 37,315 2 10 40,899 37,315 10
+Debit and credit card sales volume (in billions) $ 299.4 $ 278.2 $ 237.6 $ 266.0 $ 295.6 8 1 $ 1,081.2 $ 1,114.4 (3)
+Consumer & Business Banking
+Average deposits $ 907,884 $ 874,325 $ 821,624 $ 724,970 $ 696,572 4 30 $ 832,523 $ 683,707 22
+Deposit margin 1.41 % 1.43 % 1.52 % 2.05 % 2.27 % 1.58 % 2.48 %
+Business banking origination volume $ 722 $ 1,352 (f) $ 23,042 (f) $ 1,491 $ 1,827 (47) (60) $ 26,607 (f) $ 6,598 303
+Client investment assets 588,403 529,196 494,390 442,634 501,360 11 17 588,403 501,360 17
+Home Lending (in billions)
+Mortgage origination volume by channel
+Retail $ 20.1 $ 20.7 $ 18.0 $ 14.1 $ 16.4 (3) 23 $ 72.9 $ 51.0 43
+Correspondent 12.4 8.3 6.2 14.0 16.9 49 (27) 40.9 54.2 (25)
+Total mortgage origination volume (c) $ 32.5 $ 29.0 $ 24.2 $ 28.1 $ 33.3 12 (2) $ 113.8 $ 105.2 8
+Total loans serviced (period-end) $ 626.3 $ 654.0 $ 683.7 $ 737.8 $ 761.4 (4) (18) $ 626.3 $ 761.4 (18)
+Third-party mortgage loans serviced (period-end) 447.3 454.8 482.4 505.0 520.8 (2) (14) 447.3 520.8 (14)
+MSR carrying value (period-end) 3.3 3.0 3.1 3.3 4.7 10 (30) 3.3 4.7 (30)
+Ratio of MSR carrying value (period-end) to third-party
+mortgage loans serviced (period-end) 0.74 % 0.66 % 0.64 % 0.65 % 0.90 % 0.74 % 0.90 %
+MSR revenue multiple (d) 2.64 x 2.28 x 2.29 x 2.10 x 2.73 x 2.55 x 2.65 x
+Credit Card
+Credit card sales volume, excluding Commercial Card (in billions) $ 197.0 $ 178.1 $ 148.5 $ 179.1 $ 204.2 11 (4) 702.7 762.8 (8)
+Net revenue rate (e) 11.22 % 10.96 % 11.02 % 10.54 % 10.65 % 10.92 % 10.48 %
+Auto
+Loan and lease origination volume (in billions) $ 11.0 $ 11.4 $ 7.7 $ 8.3 $ 8.5 (4) 29 $ 38.4 $ 34.0 13
+Average auto operating lease assets 20,810 21,684 22,579 23,081 22,427 (4) (7) 22,034 21,589 2
+In the fourth quarter of 2020, the Firm realigned certain wealth management clients from AWM to CCB. Prior-period amounts have been revised to conform with the current presentation. Refer to page 29 for further information.
+(a) Users of all web and/or mobile platforms who have logged in within the past 90 days.
+(b) Users of all mobile platforms who have logged in within the past 90 days.
+(c) Firmwide mortgage origination volume was $37.0 billion, $36.2 billion, $28.3 billion, $31.9 billion and $37.4 billion for the three months ended December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020 and December 31, 2019, respectively, and $133.4
+billion and $115.9 billion for the full year 2020 and 2019, respectively.
+(d) Represents the ratio of MSR carrying value (period-end) to third-party mortgage loans serviced (period-end) divided by the ratio of annualized loan servicing-related revenue to third-party mortgage loans serviced (average).
+(e) In the second quarter of 2020, the Firm reclassified certain spend-based credit card reward costs from marketing expense to be a reduction of card income, with no effect on net income. Prior-period amounts have been revised to conform with the current presentation.
+(f) Included $396 million and $21.5 billion of origination volume under the PPP for the three months ended September 30, 2020 and June 30, 2020, respectively, and $21.9 billion for the full year 2020. Refer to page 61 of the Firmâ€™s Quarterly Report on Form 10-Q for the
+quarterly period ended September 30, 2020 for further information on the PPP.
+
+Page 14
+
+JPMORGAN CHASE & CO.
+CORPORATE & INVESTMENT BANK
+FINANCIAL HIGHLIGHTS
+(in millions, except ratio data)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+INCOME STATEMENT
+REVENUE
+Investment banking fees $ 2,558 $ 2,165 $ 2,847 $ 1,907 $ 1,904 18 % 34 % $ 9,477 $ 7,575 25 %
+Principal transactions 2,982 3,990 7,400 3,188 2,932 (25) 2 17,560 14,399 22
+Lending- and deposit-related fees (a) 574 546 500 450 462 5 24 2,070 1,668 24
+Asset management, administration and commissions (a) 1,226 1,086 1,148 1,261 1,059 13 16 4,721 4,400 7
+All other income 462 331 409 90 678 40 (32) 1,292 2,018 (36)
+Noninterest revenue 7,802 8,118 12,304 6,896 7,035 (4) 11 35,120 30,060 17
+Net interest income 3,550 3,428 4,079 3,107 2,668 4 33 14,164 9,205 54
+TOTAL NET REVENUE (b) 11,352 11,546 16,383 10,003 9,703 (2) 17 49,284 39,265 26
+Provision for credit losses (581) (81) 1,987 1,401 98 NM NM 2,726 277 NM
+NONINTEREST EXPENSE
+Compensation expense 1,958 2,651 3,997 3,006 2,377 (26) (18) 11,612 11,180 4
+Noncompensation expense 2,981 3,181 2,815 2,949 3,074 (6) (3) 11,926 11,264 6
+TOTAL NONINTEREST EXPENSE 4,939 5,832 6,812 5,955 5,451 (15) (9) 23,538 22,444 5
+Income before income tax expense 6,994 5,795 7,584 2,647 4,154 21 68 23,020 16,544 39
+Income tax expense 1,645 1,486 2,133 662 1,219 11 35 5,926 4,590 29
+NET INCOME $ 5,349 $ 4,309 $ 5,451 $ 1,985 $ 2,935 24 82 $ 17,094 $ 11,954 43
+FINANCIAL RATIOS
+ROE 26 % 21 % 27 % 9 % 14 % 20 % 14 %
+Overhead ratio 44 51 42 60 56 48 57
+Compensation expense as percentage of total net revenue 17 23 24 30 24 24 28
+REVENUE BY BUSINESS
+Investment Banking $ 2,497 $ 2,087 $ 3,401 $ 886 $ 1,823 20 37 $ 8,871 $ 7,215 23
+Wholesale Payments 1,427 1,332 1,387 1,414 1,489 7 (4) 5,560 5,842 (5)
+Lending 193 333 270 350 250 (42) (23) 1,146 1,021 12
+Total Banking 4,117 3,752 5,058 2,650 3,562 10 16 15,577 14,078 11
+Fixed Income Markets 3,950 4,597 7,338 4,993 3,446 (14) 15 20,878 14,418 45
+Equity Markets 1,989 1,999 2,380 2,237 1,508 (1) 32 8,605 6,494 33
+Securities Services 1,053 1,029 1,097 1,074 1,061 2 (1) 4,253 4,154 2
+Credit Adjustments & Other (c) 243 169 510 (951) 126 44 93 (29) 121 NM
+Total Markets & Securities Services 7,235 7,794 11,325 7,353 6,141 (7) 18 33,707 25,187 34
+TOTAL NET REVENUE $ 11,352 $ 11,546 $ 16,383 $ 10,003 $ 9,703 (2) 17 $ 49,284 $ 39,265 26
+In the fourth quarter of 2020, payment processing-only clients along with the associated revenue and expenses were realigned to CIBâ€™s Wholesale Payments business from CCB and CB. Prior-period amounts have been revised to conform with the current presentation. Refer to
+Business segment changes on page 21 of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended March 31, 2020 for further information.
+(a) In the first quarter of 2020, the Firm reclassified certain fees from asset management, administration and commissions to lending- and deposit-related fees. Prior-period amounts have been revised to conform with the current presentation.
+(b) Includes tax-equivalent adjustments, predominantly due to income tax credits related to alternative energy investments; income tax credits and amortization of the cost of investments in affordable housing projects; as well as tax-exempt income from municipal bonds of
+$765 million, $641 million, $686 million, $667 million and $646 million for the three months ended December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020, and December 31, 2019, respectively and $2.8 billion and $2.3 billion for the full year 2020 and 2019,
+respectively.
+(c) Consists primarily of credit valuation adjustments (â€œCVAâ€) managed centrally within CIB and funding valuation adjustments (â€œFVAâ€) on derivatives and certain components of fair value option elected liabilities. Results are presented net of associated hedging activities and net of
+CVA and FVA amounts allocated to Fixed Income Markets and Equity Markets.
+
+Page 15
+
+JPMORGAN CHASE & CO.
+CORPORATE & INVESTMENT BANK
+FINANCIAL HIGHLIGHTS, CONTINUED
+(in millions, except ratio and headcount data)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+SELECTED BALANCE SHEET DATA (period-end)
+Assets $ 1,097,219 $ 1,089,293 $ 1,081,162 (g) $ 1,217,459 $ 914,705 1 % 20 % $ 1,097,219 $ 914,705 20 %
+Loans:
+Loans retained (a) 133,296 126,841 140,770 165,376 121,733 5 9 133,296 121,733 9
+Loans held-for-sale and loans at fair value (b) 39,588 33,046 34,017 34,644 34,317 20 15 39,588 34,317 15
+Total loans 172,884 159,887 174,787 200,020 156,050 8 11 172,884 156,050 11
+Equity 80,000 80,000 80,000 80,000 80,000 â€” â€” 80,000 80,000 â€”
+SELECTED BALANCE SHEET DATA (average)
+Assets $ 1,140,524 $ 1,100,657 $ 1,167,807 $ 1,082,820 $ 994,152 4 15 1,122,939 $ 993,508 13
+Trading assets - debt and equity instruments (b) 442,443 425,789 421,953 398,504 370,859 4 19 422,237 376,182 12
+Trading assets - derivative receivables 77,946 78,339 76,710 55,133 45,153 (1) 73 72,065 48,196 50
+Loans:
+Loans retained (a) 128,765 131,187 154,038 128,838 119,412 (2) 8 135,676 122,371 11
+Loans held-for-sale and loans at fair value (b) 36,228 30,205 33,538 35,211 33,694 20 8 33,792 32,884 3
+Total loans 164,993 161,392 187,576 164,049 153,106 2 8 169,468 155,255 9
+Equity 80,000 80,000 80,000 80,000 80,000 â€” â€” 80,000 80,000 â€”
+Headcount 61,733 61,830 60,950 60,245 60,013 â€” 3 61,733 60,013 3
+CREDIT DATA AND QUALITY STATISTICS
+Net charge-offs/(recoveries) $ 88 $ 23 $ 204 $ 55 $ 43 283 105 $ 370 $ 183 102
+Nonperforming assets:
+Nonaccrual loans:
+Nonaccrual loans retained (c) 1,008 1,178 1,195 689 308 (14) 227 1,008 308 227
+Nonaccrual loans held-for-sale and loans at fair value (b)(d) 1,662 2,111 1,510 766 644 (21) 158 1,662 644 158
+Total nonaccrual loans 2,670 3,289 2,705 1,455 952 (19) 180 2,670 952 180
+Derivative receivables 56 140 108 85 30 (60) 87 56 30 87
+Assets acquired in loan satisfactions 85 88 35 43 70 (3) 21 85 70 21
+Total nonperforming assets 2,811 3,517 2,848 1,583 1,052 (20) 167 2,811 1,052 167
+Allowance for credit losses:
+Allowance for loan losses 2,366 2,863 3,039 (g) 1,422 1,202 (17) 97 2,366 1,202 97
+Allowance for lending-related commitments 1,534 1,706 1,634 (g) 1,468 848 (10) 81 1,534 848 81
+Total allowance for credit losses 3,900 4,569 4,673 2,890 2,050 (15) 90 3,900 2,050 90
+Net charge-off/(recovery) rate (a)(e) 0.27 % 0.07 % 0.53 % 0.17 % 0.14 % 0.27 % 0.15 %
+Allowance for loan losses to period-end loans retained (a) 1.77 2.26 2.16 (g) 0.86 0.99 1.77 0.99
+Allowance for loan losses to period-end loans retained,
+excluding trade finance and conduits (f) 2.54 3.15 2.87 (g) 1.11 1.31 2.54 1.31
+Allowance for loan losses to nonaccrual loans retained (a)(c) 235 243 254 (g) 206 390 235 390
+Nonaccrual loans to total period-end loans (b) 1.54 2.06 1.55 0.73 0.61 1.54 0.61
+In the fourth quarter of 2020, payment processing-only clients along with the associated revenue and expenses were realigned to CIBâ€™s Wholesale Payments business from CCB and CB. Prior-period amounts have been revised to conform with the current presentation. Refer to
+Business segment changes on page 21 of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended March 31, 2020 for further information.
+(a) Loans retained includes credit portfolio loans, loans held by consolidated Firm-administered multi-seller conduits, trade finance loans, other held-for-investment loans and overdrafts.
+(b) In the third quarter of 2020, the Firm reclassified certain fair value option elected lending-related positions from trading assets to loans and other assets. Prior-period amounts have been revised to conform with the current presentation.
+(c) Allowance for loan losses of $278 million, $320 million, $340 million, $317 million and $110 million were held against nonaccrual loans at December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020, and December 31, 2019, respectively.
+(d) At December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020 and December 31, 2019, nonaccrual loans excluded mortgage loans 90 or more days past due and insured by U.S. government agencies of $316 million, $297 million, $135 million, $124 million
+and $127 million, respectively. These amounts have been excluded based upon the government guarantee.
+(e) Loans held-for-sale and loans at fair value were excluded when calculating the net charge-off/(recovery) rate.
+(f) Management uses allowance for loan losses to period-end loans retained, excluding trade finance and conduits, a non-GAAP financial measure, to provide a more meaningful assessment of CIBâ€™s allowance coverage ratio.
+(g) Prior-period amounts have been revised to conform with the current presentation.
+
+Page 16
+
+JPMORGAN CHASE & CO.
+CORPORATE & INVESTMENT BANK
+FINANCIAL HIGHLIGHTS, CONTINUED
+(in millions, except where otherwise noted)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+BUSINESS METRICS
+Advisory $ 835 $ 428 $ 602 $ 503 $ 702 95 % 19 % $ 2,368 $ 2,377 â€” %
+Equity underwriting 718 732 977 331 382 (2) 88 2,758 1,666 66
+Debt underwriting 1,005 1,005 1,268 1,073 820 â€” 23 4,351 3,532 23
+Total investment banking fees $ 2,558 $ 2,165 $ 2,847 $ 1,907 $ 1,904 18 34 $ 9,477 $ 7,575 25
+Client deposits and other third-party liabilities (average) (a) 683,818 634,961 607,902 514,464 485,037 8 41 610,555 464,795 31
+Merchant processing volume (in billions) (b) 444.5 406.1 371.9 374.8 402.9 9 10 $ 1,597.3 $ 1,511.5 6
+Assets under custody (â€œAUCâ€) (period-end) (in billions) $ 30,980 $ 28,628 $ 27,447 $ 24,409 $ 26,831 8 15 $ 30,980 $ 26,831 15
+95% Confidence Level - Total CIB VaR (average) (c)
+CIB trading VaR by risk type: (d)
+Fixed income $ 106 $ 93 $ 129 $ 60 $ 39 14 172
+Foreign exchange 12 13 9 7 5 (8) 140
+Equities 23 26 27 20 18 (12) 28
+Commodities and other 36 33 32 10 7 9 414
+Diversification benefit to CIB trading VaR (e) (85) (76) (69) (40) (32) (12) (166)
+CIB trading VaR (d) 92 89 128 57 37 3 149
+Credit portfolio VaR (f) 12 15 22 9 5 (20) 140
+Diversification benefit to CIB VaR (e) (13) (14) (23) (8) (5) 7 (160)
+CIB VaR $ 91 $ 90 $ 127 $ 58 $ 37 1 146
+
+(a) Client deposits and other third-party liabilities pertain to the Wholesale Payments and Securities Services businesses.
+(b) Represents total merchant processing volume across CIB, CCB and CB.
+
+(c) Effective January 1, 2020, the Firm refined the scope of VaR to exclude positions related to the risk management of interest rate exposure from changes in the Firmâ€™s own credit spread on fair value option elected liabilities, and included these positions in other sensitivity-
+based measures. Additionally, effective July 1, 2020, the Firm refined the scope of VaR to exclude certain asset-backed fair value option elected loans, and included them in other sensitivity-based measures to more effectively measure the risk from these loans. In the absence
+
+of these refinements, the average VaR for each of the following reported components would have been different by the following amounts: CIB fixed income of $33 million, $15 million, $(11) million and $4 million, CIB Trading VaR of $30 million, $11 million, $(11) million and $5
+million and CIB VaR of $29 million, $11 million, $(8) million and $6 million for the three months ended December 31, 2020, September 30, 2020, June 30, 2020 and March 31, 2020, respectively.
+(d) CIB trading VaR includes substantially all market-making and client-driven activities, as well as certain risk management activities in CIB, including credit spread sensitivity to CVA. Refer to VaR measurement on pages 121â€“123 of the Firmâ€™s 2019 Form 10-K, and pages 80â€“82
+of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended September 30, 2020 for further information.
+(e) Average portfolio VaR was less than the sum of the VaR of the components described above, which is due to portfolio diversification. The diversification effect reflects the fact that the risks were not perfectly correlated.
+(f) Credit portfolio VaR includes the derivative CVA, hedges of the CVA and hedges of the retained loan portfolio, which are reported in principal transactions revenue. This VaR does not include the retained loan portfolio, which is not reported at fair value.
+
+Page 17
+
+JPMORGAN CHASE & CO.
+COMMERCIAL BANKING
+FINANCIAL HIGHLIGHTS
+(in millions, except ratio data)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+INCOME STATEMENT
+REVENUE
+Lending- and deposit-related fees (a) $ 325 $ 304 $ 297 $ 261 $ 256 7 % 27 % $ 1,187 $ 941 26 %
+All other income (a) 550 457 526 347 436 20 26 1,880 1,769 6
+Noninterest revenue 875 761 823 608 692 15 26 3,067 2,710 13
+Net interest income 1,588 1,524 1,577 1,557 1,604 4 (1) 6,246 6,554 (5)
+TOTAL NET REVENUE (b) 2,463 2,285 2,400 2,165 2,296 8 7 9,313 9,264 1
+Provision for credit losses (1,181) (147) 2,431 1,010 110 NM NM 2,113 296 NM
+NONINTEREST EXPENSE
+Compensation expense 460 492 430 472 444 (7) 4 1,854 1,785 4
+Noncompensation expense 490 477 463 514 497 3 (1) 1,944 1,950 â€”
+TOTAL NONINTEREST EXPENSE 950 969 893 986 941 (2) 1 3,798 3,735 2
+Income/(loss) before income tax expense/(benefit) 2,694 1,463 (924) 169 1,245 84 116 3,402 5,233 (35)
+Income tax expense/(benefit) 660 377 (243) 30 300 75 120 824 1,275 (35)
+NET INCOME/(LOSS) $ 2,034 $ 1,086 $ (681) $ 139 $ 945 87 115 $ 2,578 $ 3,958 (35)
+Revenue by product
+Lending $ 1,177 $ 1,138 $ 1,127 $ 954 $ 1,027 3 15 $ 4,396 $ 4,057 8
+Wholesale payments 945 867 925 978 1,020 9 (7) 3,715 4,200 (12)
+Investment banking (c) 318 260 256 235 211 22 51 1,069 919 16
+Other 23 20 92 (2) 38 15 (39) 133 88 51
+Total Commercial Banking net revenue (b) $ 2,463 $ 2,285 $ 2,400 $ 2,165 $ 2,296 8 7 $ 9,313 $ 9,264 1
+Investment banking revenue, gross (d) $ 971 $ 840 $ 851 $ 686 $ 634 16 53 $ 3,348 $ 2,744 22
+Revenue by client segment
+Middle Market Banking $ 947 $ 880 $ 870 $ 943 $ 937 8 1 $ 3,640 $ 3,805 (4)
+Corporate Client Banking 856 808 866 673 758 6 13 3,203 3,119 3
+Commercial Real Estate Banking 630 576 566 541 537 9 17 2,313 2,169 7
+Other 30 21 98 8 64 43 (53) 157 171 (8)
+Total Commercial Banking net revenue (b) $ 2,463 $ 2,285 $ 2,400 $ 2,165 $ 2,296 8 7 $ 9,313 $ 9,264 1
+FINANCIAL RATIOS
+ROE 36 % 19 % (13) % 2 % 16 % 11 % 17 %
+Overhead ratio 39 42 37 46 41 41 40
+In the fourth quarter of 2020, payment processing-only clients along with the associated revenue and expenses were realigned to CIBâ€™s Wholesale Payments business from CCB and CB. Prior-period amounts have been revised to conform with the current presentation. Refer to
+Business segment changes on page 21 of the Firmâ€™s Quarterly Report on Form 10-Q for the quarterly period ended March 31, 2020 for further information.
+(a) In the first quarter of 2020, the Firm reclassified certain fees from asset management, administration and commissions (which are included in all other income) to lending- and deposit-related fees. Prior-period amounts have been revised to conform with the current presentation.
+(b) Total net revenue included tax-equivalent adjustments from income tax credits related to equity investments in designated community development entities and in entities established for rehabilitation of historic properties, as well as tax-exempt income related to municipal
+financing activities of $108 million, $82 million, $80 million, $81 million and $152 million for the three months ended December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020, and December 31, 2019, respectively, and $351 million and $460 million for the full
+year 2020 and 2019, respectively.
+(c) Includes CBâ€™s share of revenue from investment banking products sold to CB clients through the CIB.
+(d) Refer to page 60 of the Firmâ€™s 2019 Form 10-K for discussion of revenue sharing.
+
+Page 18
+
+JPMORGAN CHASE & CO.
+COMMERCIAL BANKING
+FINANCIAL HIGHLIGHTS, CONTINUED
+(in millions, except headcount and ratio data) QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+SELECTED BALANCE SHEET DATA (period-end)
+Total assets $ 228,932 $ 228,587 $ 235,034 (d) $ 247,786 $ 220,514 â€” % 4 % $ 228,932 $ 220,514 4 %
+Loans:
+Loans retained 207,880 214,352 223,192 232,254 207,287 (3) â€” 207,880 207,287 â€”
+Loans held-for-sale and loans at fair value 2,245 349 917 1,112 1,009 NM 122 2,245 1,009 122
+Total loans $ 210,125 $ 214,701 $ 224,109 $ 233,366 $ 208,296 (2) 1 $ 210,125 $ 208,296 1
+Equity 22,000 22,000 22,000 22,000 22,000 â€” â€” 22,000 22,000 â€”
+Period-end loans by client segment
+Middle Market Banking $ 61,115 (c) $ 61,812 (c) $ 64,211 (c) $ 60,317 $ 54,188 (1) 13 $ 61,115 (c) $ 54,188 13
+Corporate Client Banking 47,420 49,857 56,182 69,540 51,165 (5) (7) 47,420 51,165 (7)
+Commercial Real Estate Banking 101,146 102,484 103,117 102,799 101,951 (1) (1) 101,146 101,951 (1)
+Other 444 548 599 710 992 (19) (55) 444 992 (55)
+Total Commercial Banking loans $ 210,125 (c) $ 214,701 (c) $ 224,109 (c) $ 233,366 $ 208,296 (2) 1 $ 210,125 (c) $ 208,296 1
+SELECTED BALANCE SHEET DATA (average)
+Total assets $ 227,435 $ 231,691 $ 247,512 $ 226,071 $ 219,891 (2) 3 $ 233,158 $ 218,896 7
+Loans:
+Loans retained 210,621 217,498 233,044 209,988 208,776 (3) 1 217,767 206,837 5
+Loans held-for-sale and loans at fair value 1,554 629 502 1,831 1,036 147 50 1,129 1,082 4
+Total loans $ 212,175 $ 218,127 $ 233,546 $ 211,819 $ 209,812 (3) 1 $ 218,896 $ 207,919 5
+Client deposits and other third-party liabilities 276,694 248,289 236,968 188,808 182,546 11 52 237,825 172,734 38
+Equity 22,000 22,000 22,000 22,000 22,000 â€” â€” 22,000 22,000 â€”
+Average loans by client segment
+Middle Market Banking $ 60,869 $ 63,029 $ 66,279 $ 56,045 $ 54,114 (3) 12 $ 61,558 $ 55,690 11
+Corporate Client Banking 48,825 51,608 63,308 53,032 53,187 (5) (8) 54,172 50,360 8
+Commercial Real Estate Banking 101,969 102,905 103,516 101,526 101,542 (1) â€” 102,479 100,884 2
+Other 512 585 443 1,216 969 (12) (47) 687 985 (30)
+Total Commercial Banking loans $ 212,175 $ 218,127 $ 233,546 $ 211,819 $ 209,812 (3) 1 $ 218,896 $ 207,919 5
+Headcount 11,675 11,704 11,802 11,779 11,629 â€” â€” 11,675 11,629 â€”
+CREDIT DATA AND QUALITY STATISTICS
+Net charge-offs/(recoveries) $ 162 $ 60 $ 79 $ 100 $ 89 170 82 $ 401 $ 160 151
+Nonperforming assets
+Nonaccrual loans:
+Nonaccrual loans retained (a) 1,286 1,468 1,252 (d) 793 498 (12) 158 1,286 498 158
+Nonaccrual loans held-for-sale and loans
+at fair value 120 85 125 (d) â€” â€” 41 NM 120 â€” NM
+Total nonaccrual loans 1,406 1,553 1,377 793 498 (9) 182 1,406 498 182
+Assets acquired in loan satisfactions 24 24 24 24 25 â€” (4) 24 25 (4)
+Total nonperforming assets 1,430 1,577 1,401 817 523 (9) 173 1,430 523 173
+Allowance for credit losses:
+Allowance for loan losses 3,335 4,466 4,730 (d) 2,680 2,780 (25) 20 3,335 2,780 20
+Allowance for lending-related commitments 651 864 807 (d) 505 293 (25) 122 651 293 122
+Total allowance for credit losses 3,986 5,330 5,537 3,185 3,073 (25) 30 3,986 3,073 30
+Net charge-off/(recovery) rate (b) 0.31 % 0.11 % 0.14 % 0.19 % 0.17 % 0.18 % 0.08 %
+Allowance for loan losses to period-end loans retained 1.60 2.08 2.12 (d) 1.15 1.34 1.60 1.34
+Allowance for loan losses to nonaccrual loans retained (a) 259 304 378 (d) 338 558 259 558
+Nonaccrual loans to period-end total loans 0.67 0.72 0.61 0.34 0.24 0.67 0.24
+(a) Allowance for loan losses of $273 million, $367 million, $287 million, $175 million and $114 million was held against nonaccrual loans retained at December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020, and December 31, 2019, respectively.
+(b) Loans held-for-sale and loans at fair value were excluded when calculating the net charge-off/(recovery) rate.
+(c) At December 31, 2020, September 30, 2020 and June 30, 2020, total loans included $6.6 billion, $6.6 billion and $6.5 billion of loans, respectively, under the PPP, of which $6.4 billion, $6.4 billion and $6.3 billion was in Middle Market Banking. Refer to page 61 of the Firmâ€™s
+Quarterly Report on Form 10-Q for the quarterly period ended September 30, 2020 for further information on the PPP.
+(d) Prior-period amounts have been revised to conform with the current presentation.
+
+Page 19
+
+JPMORGAN CHASE & CO.
+ASSET & WEALTH MANAGEMENT
+FINANCIAL HIGHLIGHTS
+(in millions, except ratio and headcount data)
+
+QUARTERLY TRENDS FULL YEAR
+
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+
+INCOME STATEMENT
+REVENUE
+Asset management, administration and commissions $ 2,892 $ 2,646 $ 2,489 $ 2,583 $ 2,552 9 % 13 % $ 10,610 $ 9,818 8 %
+All other income 87 93 86 (54) 123 (6) (29) 212 418 (49)
+Noninterest revenue 2,979 2,739 2,575 2,529 2,675 9 11 10,822 10,236 6
+Net interest income 888 815 855 860 839 9 6 3,418 3,355 2
+TOTAL NET REVENUE 3,867 3,554 3,430 3,389 3,514 9 10 14,240 13,591 5
+Provision for credit losses (2) (52) 223 94 13 96 NM 263 59 346
+NONINTEREST EXPENSE
+Compensation expense 1,323 1,232 1,178 1,226 1,275 7 4 4,959 5,028 (1)
+Noncompensation expense 1,433 1,211 1,145 1,209 1,167 18 23 4,998 4,719 6
+TOTAL NONINTEREST EXPENSE 2,756 2,443 2,323 2,435 2,442 13 13 9,957 9,747 2
+Income before income tax expense 1,113 1,163 884 860 1,059 (4) 5 4,020 3,785 6
+Income tax expense 327 287 223 191 258 14 27 1,028 918 12
+NET INCOME $ 786 $ 876 $ 661 $ 669 $ 801 (10) (2) $ 2,992 $ 2,867 4
+REVENUE BY LINE OF BUSINESS
+Asset Management $ 2,210 $ 1,924 $ 1,780 $ 1,740 $ 1,892 15 17 $ 7,654 $ 7,254 6
+Wealth Management 1,657 1,630 1,650 1,649 1,622 2 2 6,586 6,337 4
+TOTAL NET REVENUE $ 3,867 $ 3,554 $ 3,430 $ 3,389 $ 3,514 9 10 $ 14,240 $ 13,591 5
+FINANCIAL RATIOS
+ROE 29 % 32 % 24 % 25 % 29 % 28 % 26 %
+Overhead ratio 71 69 68 72 69 70 72
+Pretax margin ratio:
+Asset Management 31 30 30 24 30 29 26
+Wealth Management 26 35 21 27 30 27 30
+Asset & Wealth Management 29 33 26 25 30 28 28
+Headcount 20,683 21,058 21,273 21,302 21,550 (2) (4) 20,683 21,550 (4)
+Number of Wealth Management client advisors 2,462 2,520 2,409 2,418 2,419 (2) 2 2,462 2,419 2
+In the fourth quarter of 2020, the Firm realigned certain wealth management clients from AWM to CCB. Prior-period amounts have been revised to conform with the current presentation. Refer to page 29 for further information.
+Page 20
+JPMORGAN CHASE & CO.
+ASSET & WEALTH MANAGEMENT
+FINANCIAL HIGHLIGHTS, CONTINUED
+(in millions, except ratio data)
+QUARTERLY TRENDS FULL YEAR
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+SELECTED BALANCE SHEET DATA (period-end)
+Total assets $ 203,435 $ 187,909 $ 176,833 $ 178,948 $ 173,226 8 % 17 % $ 203,435 $ 173,226 17 %
+Loans 186,608 172,695 162,904 163,763 158,149 8 18 186,608 158,149 18
+Deposits 198,755 166,049 160,993 160,231 142,740 20 39 198,755 142,740 39
+Equity 10,500 10,500 10,500 10,500 10,500 â€” â€” 10,500 10,500 â€”
+SELECTED BALANCE SHEET DATA (average)
+Total assets $ 193,077 $ 181,901 $ 175,938 $ 174,885 $ 168,192 6 15 $ 181,483 $ 161,914 12
+Loans 176,758 167,645 161,196 159,513 153,734 5 15 166,311 147,404 13
+Deposits 180,348 162,589 160,102 144,570 138,182 11 31 161,955 135,265 20
+Equity 10,500 10,500 10,500 10,500 10,500 â€” â€” 10,500 10,500 â€”
+CREDIT DATA AND QUALITY STATISTICS
+Net charge-offs $ (16) $ 2 $ (2) $ 2 $ 3 NM NM $ (14) $ 29 NM
+Nonaccrual loans 785 956 768 303 115 (18) NM 785 115 NM
+Allowance for credit losses:
+Allowance for loan losses 598 580 646 436 350 3 71 598 350 71
+Allowance for lending-related commitments 38 41 28 14 19 (7) 100 38 19 100
+Total allowance for credit losses 636 621 674 450 369 2 72 636 369 72
+Net charge-off/(recovery) rate (0.04) % â€” % â€” % 0.01 % 0.01 % (0.01) % 0.02 %
+Allowance for loan losses to period-end loans 0.32 0.34 0.40 0.27 0.22 0.32 0.22
+Allowance for loan losses to nonaccrual loans 76 61 84 144 304 76 304
+Nonaccrual loans to period-end loans 0.42 0.55 0.47 0.19 0.07 0.42 0.07
+In the fourth quarter of 2020, the Firm realigned certain wealth management clients from AWM to CCB. Prior-period amounts have been revised to conform with the current presentation. Refer to page 29 for further information.
+Page 21
+JPMORGAN CHASE & CO.
+ASSET & WEALTH MANAGEMENT
+FINANCIAL HIGHLIGHTS, CONTINUED
+(in billions)
+Dec 31, 2020
+Change FULL YEAR
+Dec 31, Sep 30, Jun 30, Mar 31, Dec 31, Sep 30, Dec 31, 2020 Change
+CLIENT ASSETS 2020 2020 2020 2020 2019 2020 2019 2020 2019 2019
+Assets by asset class
+Liquidity $ 641 $ 674 $ 704 $ 619 $ 539 (5) % 19 % $ 641 $ 539 19 %
+Fixed income 671 650 618 574 591 3 14 671 591 14
+Equity 595 499 448 361 463 19 29 595 463 29
+Multi-asset 656 593 566 517 596 11 10 656 596 10
+Alternatives 153 144 140 139 139 6 10 153 139 10
+TOTAL ASSETS UNDER MANAGEMENT 2,716 2,560 2,476 2,210 2,328 6 17 2,716 2,328 17
+Custody/brokerage/administration/deposits 936 810 765 681 761 16 23 936 761 23
+TOTAL CLIENT ASSETS $ 3,652 $ 3,370 $ 3,241 $ 2,891 $ 3,089 8 18 $ 3,652 $ 3,089 18
+Assets by client segment
+Private Banking $ 689 $ 650 $ 631 $ 577 $ 628 6 10 $ 689 $ 628 10
+Institutional 1,273 1,245 1,228 1,107 1,081 2 18 1,273 1,081 18
+Retail 754 665 617 526 619 13 22 754 619 22
+TOTAL ASSETS UNDER MANAGEMENT $ 2,716 $ 2,560 $ 2,476 $ 2,210 $ 2,328 6 17 $ 2,716 $ 2,328 17
+Private Banking $ 1,581 $ 1,422 $ 1,360 $ 1,233 $ 1,359 11 16 $ 1,581 $ 1,359 16
+Institutional 1,311 1,278 1,259 1,128 1,106 3 19 1,311 1,106 19
+Retail 760 670 622 530 624 13 22 760 624 22
+TOTAL CLIENT ASSETS $ 3,652 $ 3,370 $ 3,241 $ 2,891 $ 3,089 8 18 $ 3,652 $ 3,089 18
+Assets under management rollforward
+Beginning balance $ 2,560 $ 2,476 $ 2,210 $ 2,328 $ 2,210 $ 2,328 $ 1,958
+Net asset flows:
+Liquidity (36) (30) 93 77 38 104 61
+Fixed income 8 22 18 â€” 9 48 104
+Equity 14 9 11 (1) (1) 33 (11)
+Multi-asset 10 (1) (2) (2) 5 5 2
+Alternatives 1 2 3 â€” 1 6 2
+Market/performance/other impacts 159 82 143 (192) 66 192 212
+Ending balance $ 2,716 $ 2,560 $ 2,476 $ 2,210 $ 2,328 $ 2,716 $ 2,328
+Client assets rollforward
+Beginning balance $ 3,370 $ 3,241 $ 2,891 $ 3,089 $ 2,930 $ 3,089 $ 2,619
+Net asset flows 39 11 135 91 59 276 176
+Market/performance/other impacts 243 118 215 (289) 100 287 294
+Ending balance $ 3,652 $ 3,370 $ 3,241 $ 2,891 $ 3,089 $ 3,652 $ 3,089
+In the fourth quarter of 2020, the Firm realigned certain wealth management clients from AWM to CCB. Prior-period amounts have been revised to conform with the current presentation. Refer to page 29 for further information.
+Page 22
+JPMORGAN CHASE & CO.
+CORPORATE
+FINANCIAL HIGHLIGHTS
+(in millions, except headcount data)
+QUARTERLY TRENDS FULL YEAR
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+INCOME STATEMENT
+REVENUE
+Principal transactions $ 273 $ 87 $ (2) $ (113) $ (234) 214 % NM $ 245 $ (461) NM
+Investment securities gains 70 466 26 233 123 (85) (43) % 795 258 208 %
+All other income 249 (210) (91) 211 (6) NM NM 159 89 79
+Noninterest revenue 592 343 (67) 331 (117) 73 NM 1,199 (114) NM
+Net interest income (841) (682) (687) (165) (111) (23) NM (2,375) 1,325 NM
+TOTAL NET REVENUE (a) (249) (339) (754) 166 (228) 27 (9) (1,176) 1,211 NM
+Provision for credit losses (42) 96 4 8 (1) NM NM 66 (1) NM
+NONINTEREST EXPENSE 361 719 147 146 343 (50) 5 1,373 1,067 29
+Income/(loss) before income tax expense/(benefit) (568) (1,154) (905) 12 (570) 51 â€” (2,615) 145 NM
+Income tax expense/(benefit) (210) (455) (337) 137 (209) 54 â€” (865) (966) (d) 10
+NET INCOME/(LOSS) $ (358) $ (699) $ (568) $ (125) $ (361) 49 1 $ (1,750) $ 1,111 NM
+MEMO:
+TOTAL NET REVENUE
+Treasury and CIO (623) (243) (671) 169 102 (156) NM (1,368) 2,032 NM
+Other Corporate 374 (96) (83) (3) (330) NM NM 192 (821) NM
+TOTAL NET REVENUE $ (249) $ (339) $ (754) $ 166 $ (228) 27 (9) $ (1,176) $ 1,211 NM
+NET INCOME/(LOSS)
+Treasury and CIO (587) (349) (550) 83 22 (68) NM (1,403) 1,394 NM
+Other Corporate 229 (350) (18) (208) (383) NM NM (347) (283) (23)
+TOTAL NET INCOME/(LOSS) $ (358) $ (699) $ (568) $ (125) $ (361) 49 1 $ (1,750) $ 1,111 NM
+SELECTED BALANCE SHEET DATA (period-end)
+Total assets $ 1,359,831 $ 1,253,275 $ 1,221,980 $ 981,937 $ 837,618 9 62 $ 1,359,831 $ 837,618 62
+Loans 1,657 1,569 1,670 1,650 1,649 6 â€” 1,657 1,649 â€”
+Headcount 38,366 38,861 38,920 38,785 38,033 (1) 1 38,366 38,033 1
+SUPPLEMENTAL INFORMATION
+TREASURY and CIO
+Investment securities gains $ 70 $ 466 $ 26 $ 233 $ 123 (85) (43) $ 795 $ 258 208
+Available-for-sale securities (average) 410,803 442,943 426,470 372,954 350,100 (7) 17 413,367 283,205 46
+Held-to-maturity securities (average) 155,525 103,596 71,713 46,673 42,125 50 269 94,569 34,939 171
+Investment securities portfolio (average) $ 566,328 $ 546,539 $ 498,183 $ 419,627 $ 392,225 4 44 $ 507,936 $ 318,144 60
+Available-for-sale securities (period-end) 386,065 387,663 483,752 397,891 348,876 â€” 11 386,065 348,876 11
+Held-to-maturity securities, net of allowance for credit losses
+(period-end) (b)(c) 201,821 141,553 72,908 71,200 47,540 43 325 201,821 47,540 325
+Investment securities portfolio, net of allowance for credit losses
+(period-end) (b) $ 587,886 $ 529,216 $ 556,660 $ 469,091 $ 396,416 11 48 $ 587,886 $ 396,416 48
+(a) Included tax-equivalent adjustments, driven by tax-exempt income from municipal bonds, of $55 million, $62 million, $63 million, $61 million and $73 million for the three months ended December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020, and December
+31, 2019, respectively, and $241 million and $314 million for the full year 2020 and 2019, respectively.
+(b) Upon adoption of the CECL accounting guidance, HTM securities are presented net of an allowance for credit losses. At December 31, 2020, September 30, 2020, June 30, 2020, and March 31, 2020, the allowance for credit losses on HTM securities was $78 million, $120
+million, $23 million and $19 million, respectively.
+(c) During 2020, the Firm transferred $164.2 billion of investment securities from AFS to HTM for capital management purposes, comprised of $63.7 billion, $74.4 billion and $26.1 billion in the fourth, third and first quarters of 2020, respectively.
+(d) The full year 2019 included income tax benefits of $1.1 billion due to the resolution of certain tax audits.
+Page 23
+JPMORGAN CHASE & CO.
+CREDIT-RELATED INFORMATION
+(in millions)
+Dec 31, 2020
+Change
+Dec 31, Sep 30, Jun 30, Mar 31, Dec 31, Sep 30, Dec 31,
+2020 2020 2020 2020 2019 2020 2019
+CREDIT EXPOSURE
+Consumer, excluding credit card loans (a)
+Loans retained $ 302,127 $ 305,106 $ 307,005 $ 293,779 $ 294,999 (1) % 2 %
+Loans held-for-sale and loans at fair value (b) 16,452 16,992 16,193 17,729 22,818 (3) (28)
+Total consumer, excluding credit card loans 318,579 322,098 323,198 311,508 317,817 (1) â€”
+Credit card loans
+Loans retained 143,432 139,590 141,656 154,021 168,924 3 (15)
+Loans held-for-sale 784 787 â€” â€” â€” â€” NM
+Total credit card loans 144,216 140,377 141,656 154,021 168,924 3 (15)
+Total consumer loans 462,795 462,475 464,854 465,529 486,741 â€” (5)
+Wholesale loans (c)
+Loans retained 514,947 500,841 516,787 555,289 481,678 3 7
+Loans held-for-sale and loans at fair value (b) 35,111 26,424 27,741 28,792 29,201 33 20
+Total wholesale loans 550,058 527,265 544,528 584,081 510,879 4 8
+Total loans 1,012,853 989,740 1,009,382 1,049,610 997,620 2 2
+Derivative receivables 79,630 76,626 74,846 81,648 49,766 4 60
+Receivables from customers (d) 47,710 30,847 22,403 33,376 33,706 55 42
+Total credit-related assets 1,140,193 1,097,213 1,106,631 1,164,634 1,081,092 4 5
+Lending-related commitments
+Consumer, excluding credit card 47,910 46,425 45,348 41,535 40,169 3 19
+Credit card (e) 658,506 662,860 673,836 681,442 650,720 (1) 1
+Wholesale (b) 449,863 441,235 413,357 363,245 417,510 2 8
+Total lending-related commitments 1,156,279 1,150,520 1,132,541 1,086,222 1,108,399 1 4
+Total credit exposure $ 2,296,472 $ 2,247,733 $ 2,239,172 $ 2,250,856 $ 2,189,491 2 5
+Memo: Total by category
+Consumer exposure (b)(f) $ 1,169,211 $ 1,171,760 $ 1,184,038 $ 1,188,506 $ 1,177,630 â€” (1)
+Wholesale exposures (b)(g) 1,127,261 1,075,973 1,055,134 1,062,350 1,011,861 5 11
+Total credit exposure $ 2,296,472 $ 2,247,733 $ 2,239,172 $ 2,250,856 $ 2,189,491 2 5
+Effective January 1, 2020, the Firm adopted the CECL accounting guidance. In conjunction with the adoption of CECL, the Firm reclassified risk-rated business banking and auto dealer loans and commitments held in CCB from the consumer, excluding credit card portfolio segment to
+the wholesale portfolio segment. Prior-period amounts have been revised to conform with the current presentation.
+(a) Includes scored loans held in CCB, scored mortgage and home equity loans held in AWM, and scored mortgage loans held in CIB and Corporate.
+(b) In the third quarter of 2020, the Firm reclassified certain fair value option elected lending-related positions from trading assets to loans. Prior-period amounts have been revised to conform with the current presentation.
+(c) Includes loans held in CIB, CB, AWM, Corporate as well as risk-rated business banking and auto dealer loans held in CCB for which the wholesale methodology is applied when determining the allowance for loan losses.
+(d) Receivables from customers reflect brokerage-related held-for-investment customer receivables; these are classified in accrued interest and accounts receivable on the Consolidated balance sheets.
+(e) Also includes commercial card lending-related commitments primarily in CB and CIB.
+(f) Represents total consumer loans and lending-related commitments.
+(g) Represents total wholesale loans, lending-related commitments, derivative receivables, and receivables from customers.
+Page 24
+JPMORGAN CHASE & CO.
+CREDIT-RELATED INFORMATION, CONTINUED
+(in millions, except ratio data)
+Dec 31, 2020
+Change
+Dec 31, Sep 30, Jun 30, Mar 31, Dec 31, Sep 30, Dec 31,
+2020 2020 2020 2020 2019 2020 2019
+NONPERFORMING ASSETS (a)
+Consumer nonaccrual loans
+Loans retained (b) $ 5,464 $ 5,047 (f) $ 4,246 $ 3,877 $ 2,926 8 % 87 %
+Loans held-for-sale and loans at fair value (c) 1,003 1,358 1,001 522 440 (26) 128
+Total consumer nonaccrual loans 6,467 6,405 5,247 4,399 3,366 1 92
+Wholesale nonaccrual loans
+Loans retained 3,318 3,745 3,423 1,957 1,057 (11) 214
+Loans held-for-sale and loans at fair value (c) 788 852 649 257 214 (8) 268
+Total wholesale nonaccrual loans 4,106 4,597 4,072 2,214 1,271 (11) 223
+Total nonaccrual loans 10,573 (e) 11,002 (e) 9,319 (e) 6,613 4,637 (4) 128
+Derivative receivables 56 140 108 85 30 (60) 87
+Assets acquired in loan satisfactions 277 320 288 364 387 (13) (28)
+Total nonperforming assets 10,906 11,462 9,715 7,062 5,054 (5) 116
+Wholesale lending-related commitments (c)(d) 577 607 765 619 474 (f) (5) 22
+Total nonperforming exposure $ 11,483 $ 12,069 $ 10,480 $ 7,681 $ 5,528 (5) 108
+NONACCRUAL LOAN-RELATED RATIOS (e)
+Total nonaccrual loans to total loans (b)(c) 1.04 % 1.11 % 0.92 % 0.63 % 0.46 %
+Total consumer, excluding credit card nonaccrual loans to
+total consumer, excluding credit card loans (b)(c) 2.03 1.99 (f) 1.62 1.41 1.06
+Total wholesale nonaccrual loans to total
+wholesale loans (c) 0.75 0.87 0.75 0.38 0.25
+(a) At December 31, 2020, September 30, 2020, June 30, 2020, March 31, 2020, and December 31, 2019, nonperforming assets excluded: (1) mortgage loans 90 or more days past due and insured by U.S. government agencies of $874 million, $1.1 billion, $696 million, $740
+million and $1.1 billion, respectively; and (2) real estate owned (â€œREOâ€) insured by U.S. government agencies of $9 million, $10 million, $13 million, $29 million and $41 million, respectively. Prior-period amounts of mortgage loans 90 or more days past due and insured by U.S.
+government agencies excluded from nonperforming assets have been revised to conform with the current presentation, refer to footnote (c) below for additional information. These amounts have been excluded based upon the government guarantee. In addition, the Firmâ€™s
+policy is generally to exempt credit card loans from being placed on nonaccrual status as permitted by regulatory guidance. Refer to Note 12 of the Firmâ€™s 2019 Form 10-K for additional information on the Firmâ€™s credit card nonaccrual and charge-off policies.
+(b) At December 31, 2020, September 30, 2020, June 30, 2020 and March 31, 2020 nonaccrual loans included $1.6 billion, $1.5 billion, $1.3 billion and $970 million of PCD loans, respectively. Prior to the adoption of CECL, nonaccrual loans excluded PCI loans as the Firm
+recognized interest income on each pool of PCI loans as each of the pools was performing.
+(c) In the third quarter of 2020, the Firm reclassified certain fair value option elected lending-related positions from trading assets to loans. Prior-period amounts have been revised to conform with the current presentation.
+(d) Represents commitments that are risk rated as nonaccrual.
+(e) Generally excludes loans that were under payment deferral or granted other assistance, including amendments or waivers of financial covenants in response to the COVID-19 pandemic.
+(f) Prior-period amounts have been revised to conform with the current presentation.
+Page 25
+JPMORGAN CHASE & CO.
+CREDIT-RELATED INFORMATION, CONTINUED
+(in millions, except ratio data)
+QUARTERLY TRENDS FULL YEAR
+4Q20 Change 2020 Change
+4Q20 3Q20 2Q20 1Q20 4Q19 3Q20 4Q19 2020 2019 2019
+SUMMARY OF CHANGES IN THE ALLOWANCES
+ALLOWANCE FOR LOAN LOSSES
+Beginning balance $ 30,814 $ 31,591 $ 23,244 $ 17,295 (c) $ 13,235 (2) % 133 % $ 17,295 $ 13,445 29 %
+Net charge-offs:
+Gross charge-offs 1,471 1,586 1,877 1,902 1,788 (7) (18) 6,836 6,810 â€”
+Gross recoveries collected (421) (406) (317) (433) (294) (4) (43) (1,577) (1,181) (34)
+Net charge-offs 1,050 1,180 1,560 1,469 1,494 (11) (30) 5,259 5,629 (7)
+Write-offs of PCI loans NA NA NA NA 19 (d) NM NM NA 151 (d) NM
+Provision for loan losses (1,433) 400 9,906 (b) 7,418 1,401 NM NM 16,291 5,449 199
+Other (3) 3 1 â€” â€” NM NM 1 9 (89)
+Ending balance $ 28,328 $ 30,814 $ 31,591 $ 23,244 $ 13,123 (8) 116 $ 28,328 $ 13,123 116
+ALLOWANCE FOR LENDING-RELATED COMMITMENTS
+Beginning balance $ 2,823 $ 2,710 $ 2,147 $ 1,289 (c) $ 1,165 4 142 $ 1,289 $ 1,055 22
+Provision for lending-related commitments (414) 114 563 (b) 858 26 NM NM 1,121 136 NM
+Other â€” (1) â€” â€” â€” NM â€” (1) â€” NM
+Ending balance $ 2,409 $ 2,823 $ 2,710 $ 2,147 $ 1,191 (15) 102 $ 2,409 $ 1,191 102
+Total allowance for credit losses (a) $ 30,737 $ 33,637 $ 34,301 $ 25,391 $ 14,314 (9) 115 $ 30,737 $ 14,314 115
+NET CHARGE-OFF/(RECOVERY) RATES
+Consumer retained, excluding credit card loans 0.05 % 0.08 % 0.11 % (0.01) % 0.15 % 0.06 % 0.12 %
+Credit card retained loans 2.17 2.92 3.33 3.25 3.01 2.93 3.10
+Total consumer retained loans 0.72 0.97 1.14 1.15 1.16 0.99 1.11
+Wholesale retained loans 0.19 0.07 0.22 0.13 0.13 0.16 0.09
+Total retained loans 0.44 0.49 0.64 0.62 0.63 0.55 0.60
+Memo: Average retained loans
+Consumer retained, excluding credit card loans $ 303,421 $ 306,201 $ 304,179 $ 294,156 $ 295,258 (1) 3 $ 302,005 $ 312,972 (4)
+Credit card retained loans 140,459 140,200 142,377 162,660 162,112 â€” (13) 146,391 156,319 (6)
+Total average retained consumer loans 443,880 446,401 446,556 456,816 457,370 (1) (3) 448,396 469,291 (4)
+Wholesale retained loans 503,249 504,449 540,248 491,819 476,402 â€” 6 509,907 472,628 8
+Total average retained loans $ 947,129 $ 950,850 $ 986,804 $ 948,635 $ 933,772 â€” 1 $ 958,303 $ 941,919 2
+(a) At December 31, 2020, September 30, 2020, June 30, 2020 and March 31, 2020 excludes allowance for credit losses on HTM securities of $78 million, $120 million, $23 million and $19 million , respectively; and provision for credit losses on HTM securities of $(42) million, $97
+million, $4 million and $9 million for the three months ended December 31, 2020, September 30, 2020, June 30, 2020 and March 31, 2020, respectively, and $68 million for the full year 2020.
+(b) Prior-period amounts have been revised to conform with the current presentation.
+(c) Upon the adoption of the CECL accounting guidance on January 1, 2020, the Firm recognized a net increase of $4.3 billion (â€œday 1 impactâ€) to the allowance for credit losses, of which $4.2 billion related to the allowance for loan losses and $98 million related to the allowance for
+lending-related commitments.
+(d) Prior to the adoption of CECL, write-offs of PCI loans were recorded against the allowance for loan losses when actual losses for a pool exceeded estimated losses that were recorded as purchase accounting adjustments at the time of acquisition. A write-off of a PCI loan was
+recognized when the underlying loan was removed from a pool.
+Page 26
+JPMORGAN CHASE & CO.
+CREDIT-RELATED INFORMATION, CONTINUED
+(in millions, except ratio data)
+Dec 31, 2020
+Change
+Dec 31, Sep 30, Jun 30, Mar 31, Dec 31, Sep 30, Dec 31,
+2020 2020 2020 2020 2019 2020 2019
+ALLOWANCE COMPONENTS AND RATIOS
+ALLOWANCE FOR LOAN LOSSES
+Consumer, excluding credit card
+Asset-specific (a) $ (7) $ 228 $ 263 $ 223 $ 75 NM NM
+Portfolio-based 3,643 4,274 4,609 3,231 1,476 (15) % 147 %
+PCI NA NA NA NA 987 NM NM
+Total consumer, excluding credit card 3,636 4,502 4,872 3,454 2,538 (19) 43
+Credit card
+Asset-specific (b) 633 652 642 530 477 (3) 33
+Portfolio-based 17,167 17,148 17,158 14,420 5,206 â€” 230
+Total credit card 17,800 17,800 17,800 14,950 5,683 â€” 213
+Total consumer 21,436 22,302 22,672 18,404 8,221 (4) 161
+Wholesale
+Asset-specific (c) 682 792 757 556 295 (14) 131
+Portfolio-based 6,210 7,720 8,162 (g) 4,284 4,607 (20) 35
+Total wholesale 6,892 8,512 8,919 4,840 4,902 (19) 41
+Total allowance for loan losses 28,328 30,814 31,591 23,244 13,123 (8) 116
+Allowance for lending-related commitments 2,409 2,823 2,710 (g) 2,147 1,191 (15) 102
+Total allowance for credit losses (d) $ 30,737 $ 33,637 $ 34,301 $ 25,391 $ 14,314 (9) 115
+CREDIT RATIOS
+Consumer, excluding credit card allowance, to total
+consumer, excluding credit card retained loans 1.20 % 1.48 % 1.59 % 1.18 % 0.86 %
+Credit card allowance to total credit card retained loans 12.41 12.75 12.57 9.71 3.36
+Wholesale allowance to total wholesale retained loans 1.34 1.70 1.73 (g) 0.87 1.02
+Wholesale allowance to total wholesale retained loans,
+excluding trade finance and conduits (e) 1.45 1.83 1.84 (g) 0.93 1.08
+Total allowance to total retained loans 2.95 3.26 3.27 2.32 1.39
+Consumer, excluding credit card allowance, to consumer,
+excluding credit card retained nonaccrual loans (f...
+[Message clipped]Â Â View entire message ZACHRY WOODÂ <zachryiixixiiwood@gmail.com>11:44 AM (5 hours ago) toÂ Legacy ZACHRY WOOD <zachryiixixiiwood@gmail.com>Securities and Exchange Commission Upcoming Events Update
+ZACHRY WOODÂ <zachryiixixiiwood@gmail.com>Wed, Oct 5, 2022 at 10:54 AMTo:Â sec@service.govdelivery.comdiff --git a/.devcontainer/devcontainer.json b/.devcontainer/my.sigssimilarity index 100%rename from .devcontainer/devcontainer.jsonrename to .devcontainer/my.sigsdiff --git a/.github/ISSUE_TEMPLATE/config.yml b/.github/ISSUE_TEMPLATE/config.ymlindex 925504464505..6ae52ad03cbe 100644--- a/.github/ISSUE_TEMPLATE/config.yml+++ b/.github/ISSUE_TEMPLATE/config.yml@@ -3,3 +3,4 @@ contact_links: - name: GitHub Support url: https://support.github.com/contact about: Contact Support if you're having trouble with your GitHub account.+zachry t wooddiff --git a/.github/dependabot.yml b/.github/dependabot.ymlindex 5359049164e3..18c9ffdb0d0c 100644--- a/.github/dependabot.yml+++ b/.github/dependabot.yml@@ -1,22 +1,31 @@ version: 2 updates:- - package-ecosystem: npm- directory: '/'+ - package-ecosystem: 'https://pnc.com'+ directory: '071921891/4720416547' schedule:+branches :- [071921891]+ interval: 'Every 3 Months'+ day: 'Wednesday'+ open-pull-requests-limit: '20' '# default' 'is' '5'+ '-' 'dependency'+ '-' 'Name'':' '*'+branches :- [31000053] interval: weekly day: tuesday open-pull-requests-limit: 20 # default is 5 ignore: - dependency-name: '@elastic/elasticsearch' - dependency-name: '*'+- [6400-7201] runs-on :account_number_code :47-2401-6547 : update-types:- ['version-update:semver-patch', 'version-update:semver-minor']+ '[' 'version-+ '.u.i' 'Update:semver-patch', 'version-update:semver-minor'] - package-ecosystem: 'github-actions' directory: '/' schedule:- interval: weekly- day: wednesday+ interval: 'weekly'+ 'day:'' 'wednesday' ignore: - dependency-name: '*' update-types:@@ -24,6 +33,7 @@ updates: - package-ecosystem: 'docker' directory: '/'- schedule:- interval: weekly- day: thursday+ schedule: 'internval''+ interval: 'autoupdate: across all '-' '['' 'branches' ']':' Every' '-3' sec'"''+ :Build::+ diff --git a/.github/workflows/codeql-analysis.yml b/.github/workflows/codeql-analysis.ymlnew file mode 100644index 000000000000..14ee34999882--- /dev/null+++ b/.github/workflows/codeql-analysis.yml@@ -0,0 +1,72 @@+# For most projects, this workflow file will not need changing; you simply need+# to commit it to your repository.+#+# You may wish to alter this file to override the set of languages analyzed,+# or to provide custom queries or build logic.+#+# ******** NOTE ********+# We have attempted to detect the languages in your repository. Please check+# the `language` matrix defined below to confirm you have the correct set of+# supported CodeQL languages.+#+name: "CodeQL"++on:+ push:+ branches: [ "main" ]+ pull_request:+ # The branches below must be a subset of the branches above+ branches: [ "main" ]+ schedule:+ - cron: '33 10 * * 0'++jobs:+ analyze:+ name: Analyze+ runs-on: ubuntu-latest+ permissions:+ actions: read+ contents: read+ security-events: write++ strategy:+ fail-fast: false+ matrix:+ language: [ 'javascript' ]+ # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]+ # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support++ steps:+ - name: Checkout repository+ uses: actions/checkout@v3++ # Initializes the CodeQL tools for scanning.+ - name: Initialize CodeQL+ uses: github/codeql-action/init@v2+ with:+ languages: ${{ matrix.language }}+ # If you wish to specify custom queries, you can do so here or in a config file.+ # By default, queries listed here will override any specified in a config file.+ # Prefix the list here with "+" to use these queries and those in the config file.+ + # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs+ # queries: security-extended,security-and-quality++ + # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).+ # If this step fails, then you should remove it and run the build manually (see below)+ - name: Autobuild+ uses: github/codeql-action/autobuild@v2++ # Command-line programs to run using the OS shell.+ # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun++ # If the Autobuild fails above, remove it and uncomment the following three lines. + # modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.++ # - run: |+ # echo "Run, Build Application using script"+ # ./location_of_script_within_repo/buildscript.sh++ - name: Perform CodeQL Analysis+ uses: github/codeql-action/analyze@v2diff --git a/.github/workflows/codeql.yml b/.github/workflows/codeql.ymlindex 04009a7f10d6..7edb5d7f242d 100644--- a/.github/workflows/codeql.yml+++ b/.github/workflows/codeql.yml@@ -36,3 +36,285 @@ jobs: languages: javascript # comma separated list of values from {go, python, javascript, java, cpp, csharp} (not YET ruby, sorry!) - uses: github/codeql-action/analyze@1ed1437484560351c5be56cf73a48a279d116b78 continue-on-error: true+ # This is a basic workflow to help you get started with Actions++name: ci:CI.yml-starts-on:' '"-on'"' :+BEBGIN :+GLOW7 :+# -Controls when the workflow will run+-on:+ # Triggers the workflow on push or pull request events but only for the "main" branch+ push:+ branches:' '-' [' '"|47-2041-6547']'(031000053 > 071921891 > 47-2041-6547 > 4034910067530719|" ]+ pull_request:+ branches:' '-' [' '"071921891" ']'(47-2041-6547')'"''++ # Allows you to run this workflow manually from the Actions tab+ workflow_dispatch:++# A workflow run is made up of one or more jobs that can run sequentially or in parallel+jobs:+ # This workflow contains a single job called "build"+ build:+ # The type of runner that the job will run on+ runs-on: ubuntu-latest++ # Steps represent a sequence of tasks that will be executed as part of the job+ steps:+ # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it+ - uses: actions/checkout@v3++ # Runs a single command using the runners shell+ - name: Run a one-line script+ Echo: "Hello','' 'world":,++ # Runs a set of commands using the runners shell+ "Name":, "@PNCBANK": "Runs::#This:":, "a":, "multi-one-line-build_script":,+ run: |+ echo Add other actions to build,+ echo test, and deploy your project.+https://github.dev/zakwarlord7/GitHub/doc/javascript/WORKSFLOW/dd81743fc6f4c8db36a2822af0c3692e271b0e9f/action.js#L1-L1467+					00519										+															+Employee Number: 3+Description	Amount							5/4/2022 - 6/4/2022							+Payment Amount (Total)	'"$[2267700000000000](USD)'"''							Display All							+1. Social Security (Employee + Employer)			26662												+2. Medicare (Employee + Employer)		'"$[2267700000000000](USD)'"''					Hourly							+3. Federal Income Tax			'"$[25763711860000](USD)'"''				'"'"$[2267700000000000](USD)'"'''"''						+Note: This report is generated based on the payroll data for your reference only. +Please :contact :IRS :office for special cases such as late payment, previous overpayment, penalty and others. :+Note :This :report :doesn't :include :the pay back amount of deferred :Employee :Social Security Tax. :														+Employer :Customized :Report :+ADP+Report Range5/4/2022 - 6/4/2022	88-1656496	state ID :633441725 :SSN :XXXXX1725	:State :All	Local ID :00037305581 :'"$[2267700000000000](USD)'"'' :							+EIN:															+Customized Report		Amount						Employee Payment Report+ADP							+Employee Number: 3+Description															+Wages, Tips and Other Compensation		'"$[2267700000000000](USD)'"''						Tips							+Taxable SS Wages		215014						5105000							+Taxable SS Tips		'"$[2267700000000000](USD)'"''												+Taxable Medicare Wages		22662983361014		Salary		Vacation hourly		OT							+Advanced EIC Payment	'"$[2267700000000000](USD)'"''		3361014											+Federal Income Tax Withheld		'"$[2267700000000000](USD)'"''		Bonus		00000		00000							+Employee SS Tax Withheld		13331		00000		Other Wages 1		Other Wages 2							+Employee Medicare Tax Withheld		532580113436		Total		00000		00000							+State Income Tax Withheld		00000		'"$[2267700000000000](USD)'"''										+Local Income Tax Withheld+Customized Employer Tax Report		00000		Deduction Summary											+Description		Amount		Health Insurance											+Employer SS Tax+Employer Medicare Tax		13331		00000											+Federal Unemployment Tax		328613309009		Tax Summary											+State Unemployment Tax		00442		Federal Tax	00007			Total Tax							+Customized Deduction Report		00840		'"$[2267700000000000](USD)'"''		Local Tax									+Health Insurance						00000									+401K		00000		Advanced EIC Payment			'"$[2267700000000000](USD)'"''							+		00000		'"$[2267700000000000](USD)'"''				Total							+						401K									+						00000		'"$[2267700000000000](USD)'"''						+ZACHRY T WOOD							Social Security Tax Medicare Tax State Tax	53258011305							+															+															+SHAREHOLDERS ARE URGED TO READ THE DEFINITIVE PROXY STATEMENT AND ANY OTHER RELEVANT MATERIALS THAT THE COMPANY WILL FILE WITH THE SEC CAREFULLY IN THEIR ENTIRETY WHEN THEY BECOME AVAILABLE. SUCH DOCUMENTS WILL CONTAIN IMPORTANT INFORMATION ABOUT THE COMPANY AND ITS DIRECTORS, OFFICERS AND AFFILIATES. INFORMATION REGARDING THE INTERESTS OF CERTAIN OF THE COMPANYâ€™S DIRECTORS, OFFICERS AND AFFILIATES WILL BE AVAILABLE IN THE DEFINITIVE PROXY STATEMENT.															+The Definitive Proxy Statement and any other relevant materials that will be filed with the SEC will be available free of charge at the SECâ€™s website at www.sec.gov. In addition, the Definitive Proxy Statement (when available) and other relevant documents will also be available, without charge, by directing a request by mail to Attn: Investor Relations, Alphabet Inc., 1600 Amphitheatre Parkway, Mountain View, California, 94043 or by contacting investor-relations@abc.xyz. The Definitive Proxy Statement and other relevant documents will also be available on the Companyâ€™s Investor Relations website at https://abc.xyz/investor/other/annual-meeting/.															+															+The Company and its directors and certain of its executive officers may be consideredno participants in the solicitation of proxies with respect to the proposals under the Definitive Proxy Statement under the rules of the SEC. Additional information regarding the participants in the proxy solicitations and a description of their direct and indirect interests, by security holdings or otherwise, also will be included in the Definitive Proxy Statement and other relevant materials to be filed with the SEC when they become available.				.	9246754678763										+															+															+															+															+3/6/2022 at 6:37 PM															+				Q4 2021	Q3 2021	Q2 2021	Q1 2021	Q4 2020							+															+GOOGL_income-statement_Quarterly_As_Originally_Reported				'"$[2267700000000000](USD)'"''25539000000	37497000000	31211000000	30818000000							+				24934000000	25539000000	21890000000	19289000000	22677000000							+Cash Flow from Operating Activities, Indirect				24934000000	25539000000	21890000000	19289000000	22677000000							+Net Cash Flow from Continuing Operating Activities, Indirect				20642000000	18936000000	18525000000	17930000000	15227000000							+Cash Generated from Operating Activities				6517000000	3797000000	4236000000	2592000000	5748000000							+Income/Loss before Non-Cash Adjustment				3439000000	3304000000	2945000000	2753000000	3725000000							+Total Adjustments for Non-Cash Items				3439000000	3304000000	2945000000	2753000000	3725000000							+Depreciation, Amortization and Depletion, Non-Cash Adjustment				3215000000	3085000000	2730000000	2525000000	3539000000							+Depreciation and Amortization, Non-Cash Adjustment				224000000	219000000	215000000	228000000	186000000							+Depreciation, Non-Cash Adjustment				3954000000	3874000000	3803000000	3745000000	3223000000							+Amortization, Non-Cash Adjustment				1616000000	-1287000000	379000000	1100000000	1670000000							+Stock-Based Compensation, Non-Cash Adjustment				-2478000000	-2158000000	-2883000000	-4751000000	-3262000000							+Taxes, Non-Cash Adjustment				-2478000000	-2158000000	-2883000000	-4751000000	-3262000000							+Investment Income/Loss, Non-Cash Adjustment				-14000000	64000000	-8000000	-255000000	392000000							+Gain/Loss on Financial Instruments, Non-Cash Adjustment				-2225000000	2806000000	-871000000	-1233000000	1702000000							+Other Non-Cash Items				-5819000000	-2409000000	-3661000000	2794000000	-5445000000							+Changes in Operating Capital				-5819000000	-2409000000	-3661000000	2794000000	-5445000000							+Change in Trade and Other Receivables				-399000000	-1255000000	-199000000	7000000	-738000000							+Change in Trade/Accounts Receivable				6994000000	3157000000	4074000000	-4956000000	6938000000							+Change in Other Current Assets				1157000000	238000000	-130000000	-982000000	963000000							+Change in Payables and Accrued Expenses				1157000000	238000000	-130000000	-982000000	963000000							+Change in Trade and Other Payables				5837000000	2919000000	4204000000	-3974000000	5975000000							+Change in Trade/Accounts Payable				368000000	272000000	-3000000	137000000	207000000							+Change in Accrued Expenses				-3369000000	3041000000	-1082000000	785000000	740000000							+Change in Deferred Assets/Liabilities															+Change in Other Operating Capital															+				-11016000000	-10050000000	-9074000000	-5383000000	-7281000000							+Change in Prepayments and Deposits				-11016000000	-10050000000	-9074000000	-5383000000	-7281000000							+Cash Flow from Investing Activities															+Cash Flow from Continuing Investing Activities				-6383000000	-6819000000	-5496000000	-5942000000	-5479000000							+				-6383000000	-6819000000	-5496000000	-5942000000	-5479000000							+Purchase/Sale and Disposal of Property, Plant and Equipment, Net															+Purchase of Property, Plant and Equipment				-385000000	-259000000	-308000000	-1666000000	-370000000							+Sale and Disposal of Property, Plant and Equipment				-385000000	-259000000	-308000000	-1666000000	-370000000							+Purchase/Sale of Business, Net				-4348000000	-3360000000	-3293000000	2195000000	-1375000000							+Purchase/Acquisition of Business				-40860000000	-35153000000	-24949000000	-37072000000	-36955000000							+Purchase/Sale of Investments, Net															+Purchase of Investments				36512000000	31793000000	21656000000	39267000000	35580000000							+				100000000	388000000	23000000	30000000	-57000000							+Sale of Investments															+Other Investing Cash Flow					-15254000000										+Purchase/Sale of Other Non-Current Assets, Net				-16511000000	-15254000000	-15991000000	-13606000000	-9270000000							+Sales of Other Non-Current Assets				-16511000000	-12610000000	-15991000000	-13606000000	-9270000000							+Cash Flow from Financing Activities				-13473000000	-12610000000	-12796000000	-11395000000	-7904000000							+Cash Flow from Continuing Financing Activities				13473000000		-12796000000	-11395000000	-7904000000							+Issuance of/Payments for Common 343 sec cvxvxvcclpddf wearsStock, Net					-42000000										+Payments for Common Stock				115000000	-42000000	-1042000000	-37000000	-57000000							+Proceeds from Issuance of Common Stock				115000000	6350000000	-1042000000	-37000000	-57000000							+Issuance of/Repayments for Debt, Net				6250000000	-6392000000	6699000000	900000000	00000							+Issuance of/Repayments for Long Term Debt, Net				6365000000	-2602000000	-7741000000	-937000000	-57000000							+Proceeds from Issuance of Long Term Debt															+Repayments for Long Term Debt				2923000000		-2453000000	-2184000000	-1647000000							+															+Proceeds from Issuance/Exercising of Stock Options/Warrants				00000		300000000	10000000	338000000000							+Other Financing Cash Flow															+Cash and Cash Equivalents, End of Period															+Change in Cash				20945000000	23719000000	23630000000	26622000000	26465000000							+Effect of Exchange Rate Changes				25930000000)	235000000000	-3175000000	300000000	6126000000							+Cash and Cash Equivalents, Beginning of Period				PAGE="$USD(181000000000)".XLS	BRIN="$USD(146000000000)".XLS	183000000	-143000000	210000000							
+Cash Flow Supplemental Section				23719000000000		26622000000000	26465000000000	20129000000000							
+Change in Cash as Reported, Supplemental				2774000000	89000000	-2992000000		6336000000							+Income Tax Paid, Supplemental				13412000000	157000000										
+ZACHRY T WOOD								-4990000000							
+Cash and Cash Equivalents, Beginning of Period															
+Department of the Treasury															
+Internal Revenue Service															
+Q4 2020			Q4 2019							
+Calendar Year															
+Due: 04/18/2022															
+\Dec. 31, 2020	 	Dec. 31, 2019							
+USD in "000'"s															
+Repayments for Long Term Debt		         182527			          161857							
+Costs and expenses:															
+Cost of revenues					                         84732		           	71896							
+Research and development                          27573		          	26018							
+Sales and marketing				                    17946			          18464							
+General and administrative					     11052			          09551							
+European Commission fines				     00000			          01697							
+Total costs and expenses					     141303		      	127626							
+Income from operations					          41224			          34231							
+Other income (expense), net					6858000000		05394							
+Income before income taxes					22677000000		19289000000							
+Provision for income taxes		      			22677000000		19289000000							
+Net income		                                	     		22677000000		19289000000							
+ Basic net income per share of Class A and B common stock 
+and Class C capital stock																											+																												
+TTM                                        YTD	Taxes/401(K)                  Current               YTD						
+70842745000	70842745000	Federal Withholding	     00000	 188813800						
+                                                            FICA - Social Security	00000	    13770000	
+                                                            FICA - Medicare	          00000	   11816700
+                                                            FUTA	00000	00000								
+                                                            FUTA	00000	00000					
+                                                            SUTA 	00000	102600																					
+	Taxes / Deductions	Stub Number: Â 100000													
+	70842745000	XXX-XX-1725																								
+   INTERNAL REVENUE SERVICE
+   P.O. BOX 1214
+   CHARLOTTE, N.C. 28201-1214																							
+   ZACHRY WOOD						                               									                                                                                                                           000001
+   76033000000	20642000000	18936000000	18525000000	17930000000	15227000000	11247000000	6959000000	6836000000	10671000000	7068000000     
+   76033000000	20642000000	18936000000	18525000000	17930000000	15227000000	11247000000	6959000000	6836000000	10671000000	7068000000			
+   Cat. No. 11320B		
+   76033000000	20642000000	18936000000	18525000000	17930000000	15227000000	11247000000	6959000000	6836000000	10671000000	7068000000			
+Form 1040 (2021)		
+   76033000000	20642000000	18936000000											
+Reported Normalized and Operating Income/Expense Supplemental Section															
+Total Revenue as Reported, Supplemental		
+   257637000000	75325000000	65118000000	61880000000	55314000000	56898000000	46173000000	38297000000	41159000000	46075000000	40499000000			
+Total Operating Profit/Loss as Reported, Supplemental		
+   78714000000	21885000000	21031000000	19361000000	16437000000	15651000000	11213000000	6383000000	7977000000	9266000000	9177000000			
+Reported Effective Tax Rate		
+   00000	00000	00000	00000	00000		
+   00000	00000	00000		00000			
+Reported Normalized Income										
+   6836000000					
+Reported Normalized Operating Profit
+   7977000000					
+Other Adjustments to Net Income Available to Common Stockholders															
+Discontinued Operations															
+Basic EPS		
+   00114	00031	00028	00028	00027	00023	00017	00010	00010	00015	00010			
+Basic EPS from Continuing Operations		
+   00114	00031	00028	00028	00027	00022	00017	00010	00010	00015	00010			
+Basic EPS from Discontinued Operations															
+Diluted EPS		
+   00112	00031	00028	00027	00026	00022	00016	00010	00010	00015	00010			
+Diluted EPS from Continuing Operations		
+   00112	00031	00028	00027	00026	00022	00016	00010	00010	00015	00010			
+Diluted EPS from Discontinued Operations															
+Basic Weighted Average Shares Outstanding		
+   667650000	662664000	665758000	668958000	673220000	675581000	679449000	681768000	686465000	688804000	692741000			
+Diluted Weighted Average Shares Outstanding		
+   677674000	672493000	676519000	679612000	682071000	682969000	685851000	687024000	692267000	695193000	698199000			
+Reported Normalized Diluted EPS										
+   00010					
+Basic EPS		
+   00114	00031	00028	00028	00027	00023	00017	00010	00010	00015	00010		00001	
+Diluted EPS		
+   00112	00031	00028	00027	00026	00022	00016	00010	00010	00015	00010			
+Basic WASO		
+   667650000	662664000	665758000	668958000	673220000	675581000	679449000	681768000	686465000	688804000	692741000			
+Diluted WASO		
+   677674000	672493000	676519000	679612000	682071000	682969000	685851000	687024000	692267000	695193000	698199000
+SIGNATURE________\S\_______CI:C::/Users:\WOOD\PAGE:\Settings:\SIGN_form :                                                                                               
+SignificanceCash Flow Supplemental Section				23719000000000		26622000000000	26465000000000	20129000000000							
+Change in Cash as Reported, Supplemental				2774000000	89000000	-2992000000		6336000000							+Income Tax Paid, Supplemental				13412000000	157000000										
+ZACHRY T WOOD								-4990000000							
+Cash and Cash Equivalents, Beginning of Period															
+Department of the Treasury															
+Internal Revenue Service															
+Q4 2020			Q4 2019							
+Calendar Year															
+Due: 04/18/2022															
+\Dec. 31, 2020	 	Dec. 31, 2019							
+USD in "000'"s															
+Repayments for Long Term Debt		         182527			          161857							
+Costs and expenses:															
+Cost of revenues					                         84732		           	71896							
+Research and development                          27573		          	26018							
+Sales and marketing				                    17946			          18464							
+General and administrative					     11052			          09551							
+European Commission fines				     00000			          01697							
+Total costs and expenses					     141303		      	127626							
+Income from operations					          41224			          34231							
+Other income (expense), net					6858000000		05394							
+Income before income taxes					22677000000		19289000000							
+Provision for income taxes		      			22677000000		19289000000							
+Net income		                                	     		22677000000		19289000000							
+ Basic net income per share of Class A and B common stock 
+and Class C capital stock																											+																												
+TTM                                        YTD	Taxes/401(K)                  Current               YTD						
+70842745000	70842745000	Federal Withholding	     00000	 188813800						
+                                                            FICA - Social Security	00000	    13770000	
+                                                            FICA - Medicare	          00000	   11816700
+                                                            FUTA	00000	00000								
+                                                            FUTA	00000	00000					
+                                                            SUTA 	00000	102600																					
+	Taxes / Deductions	Stub Number: Â 100000													
+	70842745000	XXX-XX-1725																								
+   INTERNAL REVENUE SERVICE
+   P.O. BOX 1214
+   CHARLOTTE, N.C. 28201-1214																							
+   ZACHRY WOOD						                               									                                                                                                                           000001
+   76033000000	20642000000	18936000000	18525000000	17930000000	15227000000	11247000000	6959000000	6836000000	10671000000	7068000000     
+   76033000000	20642000000	18936000000	18525000000	17930000000	15227000000	11247000000	6959000000	6836000000	10671000000	7068000000			
+   Cat. No. 11320B		
+   76033000000	20642000000	18936000000	18525000000	17930000000	15227000000	11247000000	6959000000	6836000000	10671000000	7068000000			
+Form 1040 (2021)		
+   76033000000	20642000000	18936000000											
+Reported Normalized and Operating Income/Expense Supplemental Section															
+Total Revenue as Reported, Supplemental		
+   257637000000	75325000000	65118000000	61880000000	55314000000	56898000000	46173000000	38297000000	41159000000	46075000000	40499000000			
+Total Operating Profit/Loss as Reported, Supplemental		
+   78714000000	21885000000	21031000000	19361000000	16437000000	15651000000	11213000000	6383000000	7977000000	9266000000	9177000000			
+Reported Effective Tax Rate		
+   00000	00000	00000	00000	00000		
+   00000	00000	00000		00000			
+Reported Normalized Income										
+   6836000000					
+Reported Normalized Operating Profit
+   7977000000					
+Other Adjustments to Net Income Available to Common Stockholders															
+Discontinued Operations															
+Basic EPS		
+   00114	00031	00028	00028	00027	00023	00017	00010	00010	00015	00010			
+Basic EPS from Continuing Operations		
+   00114	00031	00028	00028	00027	00022	00017	00010	00010	00015	00010			
+Basic EPS from Discontinued Operations															
+Diluted EPS		
+   00112	00031	00028	00027	00026	00022	00016	00010	00010	00015	00010			
+Diluted EPS from Continuing Operations		
+   00112	00031	00028	00027	00026	00022	00016	00010	00010	00015	00010			
+Diluted EPS from Discontinued Operations															
+Basic Weighted Average Shares Outstanding		
+   667650000	662664000	665758000	668958000	673220000	675581000	679449000	681768000	686465000	688804000	692741000			
+Diluted Weighted Average Shares Outstanding		
+   677674000	672493000	676519000	679612000	682071000	682969000	685851000	687024000	692267000	695193000	698199000			
+Reported Normalized Diluted EPS										
+   00010					
+Basic EPS		
+   00114	00031	00028	00028	00027	00023	00017	00010	00010	00015	00010		00001	
+Diluted EPS		
+   00112	00031	00028	00027	00026	00022	00016	00010	00010	00015	00010			
+Basic WASO		
+   667650000	662664000	665758000	668958000	673220000	675581000	679449000	681768000	686465000	688804000	692741000			
+Diluted WASO		
+   677674000	672493000	676519000	679612000	682071000	682969000	685851000	687024000	692267000	695193000	69819900
+. Paths should follow git's pathspec syntax. Defaults to adding all new and modified files. commit-message: description: 'The message to use when committing changes.' default: '[create-pull-request] automated change' committer: description: > The committer name and email address in the format `Display Name <email@address.com>`. Defaults to the GitHub Actions bot user. default: 'GitHub <noreply@github.com>' author: description: > The author name and email address in the format `Display Name <email@address.com>`. Defaults to the user who triggered the workflow run. default: '${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>' signoff: description: 'Add `Signed-off-by` line by the committer at the end of the commit log message.' default: false branch: description: 'The pull request branch name.' default: 'create-pull-request/patch' delete-branch: description: > Delete the `branch` when closing pull requests, and when undeleted after merging. Recommend `true`. default: false branch-suffix: description: 'The branch suffix type when using the alternative branching strategy.' base: description: > The pull request base branch. Defaults to the branch checked out in the workflow. push-to-fork: description: > A fork of the checked out parent repository to which the pull request branch will be pushed. e.g. `owner/repo-fork`. The pull request will be created to merge the fork's branch into the parent's base. title: description: 'The title of the pull request.' default: 'Changes by create-pull-request action' body: description: 'The body of the pull request.' default: 'Automated changes by [create-pull-request](https://github.com/peter-evans/create-pull-request) GitHub action' labels: description: 'A comma or newline separated list of labels.' assignees: description: 'A comma or newline separated list of assignees (GitHub usernames).' reviewers: description: 'A comma or newline separated list of reviewers (GitHub usernames) to request a review from.' team-reviewers: description: > A comma or newline separated list of GitHub teams to request a review from. Note that a `repo` scoped Personal Access Token (PAT) may be required. milestone: description: 'The number of the milestone to associate the pull request with.' draft: description: 'Create a draft pull request. It is not possible to change draft status after creation except through the web interface' default: falseoutputs: pull-request-number: description: 'The pull request number' pull-request-url: description: 'The URL of the pull request.' pull-request-operation: description: 'The pull request operation performed by the action, `created`, `updated` or `closed`.' pull-request-head-sha: description: 'The commit SHA of the pull request branch.'runs: using: 'node16' main: 'dist/index.js'branding: icon: 'git-pull-request' color: 'gray-dark'
+ 1,010  dist/bridge.js
+Load diff
+Large diffs are not rendered by default.
+ 977  dist/events.js
+Load diff
+Large diffs are not rendered by default.
+ 63,547  dist/index.js
+Load diff
+Large diffs are not rendered by default.
+ 469  dist/setup-node-sandbox.js
+Load diff
+Large diffs are not rendered by default.
+ 457  dist/setup-sandbox.js
+Load diff
+Large diffs are not rendered by default.
+ 68  docs/assets/cpr-gitgraph.htm
+@@ -0,0 +1,68 @@<!DOCTYPE html><html lang="en">
+<head> <meta charset="UTF-8"> <title>create-pull-request GitHub action</title></head>
+<body> <!-- partial:index.partial.html --> <div id="graph-container"></div> <!-- partial --> <script src='https://cdn.jsdelivr.net/npm/@gitgraph/js'></script> <script> const graphContainer = document.getElementById("graph-container");
+const customTemplate = GitgraphJS.templateExtend(GitgraphJS.TemplateName.Metro, { commit: { message: { displayAuthor: false, displayHash: false, }, }, });
+// Instantiate the graph. const gitgraph = GitgraphJS.createGitgraph(graphContainer, { template: customTemplate, orientation: "vertical-reverse" });
+const main = gitgraph.branch("main"); main.commit("Last commit on base"); const localMain = gitgraph.branch("<#1> main (local)"); localMain.commit({ subject: "<uncommitted changes>", body: "Changes to the local base during the workflow", }) const remotePatch = gitgraph.branch("create-pull-request/patch"); remotePatch.merge({ branch: localMain, commitOptions: { subject: "[create-pull-request] automated change", body: "Changes pushed to create the remote branch", }, }); main.commit("New commit on base");
+const localMain2 = gitgraph.branch("<#2> main (local)"); localMain2.commit({ subject: "<uncommitted changes>", body: "Changes to the updated local base during the workflow", }) remotePatch.merge({ branch: localMain2, commitOptions: { subject: "[create-pull-request] automated change", body: "Changes force pushed to update the remote branch", }, });
+main.merge(remotePatch);
+</script>
+</body>
+</html>
+ BIN +108 KB docs/assets/cpr-gitgraph.png
+Unable to render rich display
+ 6  docs/assets/logo.svg
+Unable to render rich display
+ BIN +327 KB docs/assets/pull-request-example.png
+Unable to render rich display
+ 371  docs/concepts-guidelines.md
+@@ -0,0 +1,371 @@# Concepts, guidelines and advanced usage
+This document covers terminology, how the action works, general usage guidelines, and advanced usage.
+- [Terminology](#terminology)- [Events and checkout](#events-and-checkout)- [How the action works](#how-the-action-works)- [Guidelines](#guidelines) - [Providing a consistent base](#providing-a-consistent-base) - [Events which checkout a commit](#events-which-checkout-a-commit) - [Restrictions on repository forks](#restrictions-on-repository-forks) - [Triggering further workflow runs](#triggering-further-workflow-runs) - [Security](#security)- [Advanced usage](#advanced-usage) - [Creating pull requests in a remote repository](#creating-pull-requests-in-a-remote-repository) - [Push using SSH (deploy keys)](#push-using-ssh-deploy-keys) - [Push pull request branches to a fork](#push-pull-request-branches-to-a-fork) - [Authenticating with GitHub App generated tokens](#authenticating-with-github-app-generated-tokens) - [GPG commit signature verification](#gpg-commit-signature-verification) - [Running in a container or on self-hosted runners](#running-in-a-container-or-on-self-hosted-runners)
+## Terminology
+[Pull requests](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests#about-pull-requests) are proposed changes to a repository branch that can be reviewed by a repository's collaborators before being accepted or rejected. 
+A pull request references two branches:
+- The `base` of a pull request is the branch you intend to change once the proposed changes are merged.- The `branch` of a pull request represents what you intend the `base` to look like when merged. It is the `base` branch *plus* changes that have been made to it.
+## Events and checkout
+This action expects repositories to be checked out with the official GitHub Actions [checkout](https://github.com/actions/checkout) action.For each [event type](https://docs.github.com/en/actions/reference/events-that-trigger-workflows) there is a default `GITHUB_SHA` that will be checked out.
+The default can be overridden by specifying a `ref` on checkout.
+```yml - uses: actions/checkout@v3 with: ref: develop```
+## How the action works
+Unless the `base` input is supplied, the action expects the target repository to be checked out on the pull request `base`&mdash;the branch you intend to modify with the proposed changes.
+Workflow steps:
+1. Checkout the `base` branch2. Make changes3. Execute `create-pull-request` action
+The following git diagram shows how the action creates and updates a pull request branch.
+![Create Pull Request GitGraph](assets/cpr-gitgraph.png)
+## Guidelines
+### Providing a consistent base
+For the action to work correctly it should be executed in a workflow that checks out a *consistent* base branch. This will be the base of the pull request unless overridden with the `base` input.
+This means your workflow should be consistently checking out the branch that you intend to modify once the PR is merged.
+In the following example, the [`push`](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#push) and [`create`](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#create) events both trigger the same workflow. This will cause the checkout action to checkout inconsistent branches and commits. Do *not* do this. It will cause multiple pull requests to be created for each additional `base` the action is executed against.
+```ymlon: push: create:jobs: example: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3```
+There may be use cases where it makes sense to execute the workflow on a branch that is not the base of the pull request. In these cases, the base branch can be specified with the `base` action input. The action will attempt to rebase changes made during the workflow on to the actual base.
+### Events which checkout a commit
+The [default checkout](#events-and-checkout) for the majority of events will leave the repository checked out on a branch.However, some events such as `release` and `pull_request` will leave the repository in a "detached HEAD" state.This is because they checkout a commit, not a branch.In these cases, you *must supply* the `base` input so the action can rebase changes made during the workflow for the pull request.
+Workflows triggered by [`pull_request`](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#pull_request) events will by default check out a merge commit. Set the `base` input as follows to base the new pull request on the current pull request's branch.
+```yml - uses: peter-evans/create-pull-request@v4 with: base: ${{ github.head_ref }}```
+Workflows triggered by [`release`](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#release) events will by default check out a tag. For most use cases, you will need to set the `base` input to the branch name of the tagged commit.
+```yml - uses: peter-evans/create-pull-request@v4 with: base: main```
+### Restrictions on repository forks
+GitHub Actions have imposed restrictions on workflow runs triggered by public repository forks.Private repositories can be configured to [enable workflows](https://docs.github.com/en/github/administering-a-repository/disabling-or-limiting-github-actions-for-a-repository#enabling-workflows-for-private-repository-forks) from forks to run without restriction.
+The restrictions apply to the `pull_request` event triggered by a fork opening a pull request in the upstream repository.
+- Events from forks cannot access secrets, except for the default `GITHUB_TOKEN`. > With the exception of GITHUB_TOKEN, secrets are not passed to the runner when a workflow is triggered from a forked repository. [GitHub Actions: Using encrypted secrets in a workflow](https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets#using-encrypted-secrets-in-a-workflow)
+- The `GITHUB_TOKEN` has read-only access when an event is triggered by a forked repository.
+[GitHub Actions: Permissions for the GITHUB_TOKEN](https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token#permissions-for-the-github_token)
+These restrictions mean that during a `pull_request` event triggered by a forked repository, actions have no write access to GitHub resources and will fail on any attempt.
+A job condition can be added to prevent workflows from executing when triggered by a repository fork.
+```ymlon: pull_requestjobs: example: runs-on: ubuntu-latest # Check if the event is not triggered by a fork if: github.event.pull_request.head.repo.full_name == github.repository```
+For further reading regarding the security of pull requests, see this GitHub blog post titled [Keeping your GitHub Actions and workflows secure: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)
+### Triggering further workflow runs
+Pull requests created by the action using the default `GITHUB_TOKEN` cannot trigger other workflows. If you have `on: pull_request` or `on: push` workflows acting as checks on pull requests, they will not run.
+> When you use the repository's `GITHUB_TOKEN` to perform tasks, events triggered by the `GITHUB_TOKEN` will not create a new workflow run. This prevents you from accidentally creating recursive workflow runs. For example, if a workflow run pushes code using the repository's `GITHUB_TOKEN`, a new workflow will not run even when the repository contains a workflow configured to run when `push` events occur.[GitHub Actions: Triggering a workflow from a workflow](https://docs.github.com/en/actions/using-workflows/triggering-a-workflow#triggering-a-workflow-from-a-workflow)
+#### Workarounds to trigger further workflow runs
+There are a number of workarounds with different pros and cons.
+- Use the default `GITHUB_TOKEN` and allow the action to create pull requests that have no checks enabled. Manually close pull requests and immediately reopen them. This will enable `on: pull_request` workflows to run and be added as checks. To prevent merging of pull requests without checks erroneously, use [branch protection rules](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests).
+- Use a `repo` scoped [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) created on an account that has write access to the repository that pull requests are being created in. This is the standard workaround and [recommended by GitHub](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token). However, the PAT cannot be scoped to a specific repository so the token becomes a very sensitive secret. If this is a concern, the PAT can instead be created for a dedicated [machine account](https://docs.github.com/en/github/site-policy/github-terms-of-service#3-account-requirements) that has collaborator access to the repository. Also note that because the account that owns the PAT will be the creator of pull requests, that user account will be unable to perform actions such as request changes or approve the pull request.
+- Use [SSH (deploy keys)](#push-using-ssh-deploy-keys) to push the pull request branch. This is arguably more secure than using a PAT because deploy keys can be set per repository. However, this method will only trigger `on: push` workflows.
+- Use a [machine account that creates pull requests from its own fork](#push-pull-request-branches-to-a-fork). This is the most secure because the PAT created only grants access to the machine account's fork, not the main repository. This method will trigger `on: pull_request` workflows to run. Workflows triggered `on: push` will not run because the push event is in the fork.
+- Use a [GitHub App to generate a token](#authenticating-with-github-app-generated-tokens) that can be used with this action. GitHub App generated tokens are more secure than using a PAT because GitHub App access permissions can be set with finer granularity and are scoped to only repositories where the App is installed. This method will trigger both `on: push` and `on: pull_request` workflows.
+### Security
+From a security perspective it's good practice to fork third-party actions, review the code, and use your fork of the action in workflows.By using third-party actions directly the risk exists that it could be modified to do something malicious, such as capturing secrets.
+Alternatively, use the action directly and reference the commit hash for the version you want to target.```yml - uses: thirdparty/foo-action@172ec762f2ac8e050062398456fccd30444f8f30```
+This action uses [ncc](https://github.com/vercel/ncc) to compile the Node.js code and dependencies into a single JavaScript file under the [dist](https://github.com/peter-evans/create-pull-request/tree/main/dist) directory.
+## Advanced usage
+### Creating pull requests in a remote repository
+Checking out a branch from a different repository from where the workflow is executing will make *that repository* the target for the created pull request. In this case, a `repo` scoped [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) is required.
+```yml - uses: actions/checkout@v3 with: token: ${{ secrets.PAT }} repository: owner/repo # Make changes to pull request here - uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }}```
+### Push using SSH (deploy keys)
+[Deploy keys](https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys) can be set per repository and so are arguably more secure than using a `repo` scoped [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token).Allowing the action to push with a configured deploy key will trigger `on: push` workflows. This makes it an alternative to using a PAT to trigger checks for pull requests.Note that you cannot use deploy keys alone to [create a pull request in a remote repository](#creating-pull-requests-in-a-remote-repository) because then using a PAT would become a requirement. This method only makes sense if creating a pull request in the repository where the workflow is running.
+How to use SSH (deploy keys) with create-pull-request action:
+1. [Create a new SSH key pair](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key) for your repository. Do not set a passphrase.2. Copy the contents of the public key (.pub file) to a new repository [deploy key](https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys) and check the box to "Allow write access."3. Add a secret to the repository containing the entire contents of the private key.4. As shown in the example below, configure `actions/checkout` to use the deploy key you have created.
+```yml steps: - uses: actions/checkout@v3 with: ssh-key: ${{ secrets.SSH_PRIVATE_KEY }} # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4```
+### Push pull request branches to a fork
+Instead of pushing pull request branches to the repository you want to update, you can push them to a fork of that repository.This allows you to employ the [principle of least privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege) by using a dedicated user acting as a [machine account](https://docs.github.com/en/github/site-policy/github-terms-of-service#3-account-requirements).This user only has `read` access to the main repository.It will use their own fork to push code and create the pull request.Note that if you choose to use this method (not give the machine account `write` access to the repository) the following inputs cannot be used: `labels`, `assignees`, `reviewers`, `team-reviewers` and `milestone`.
+1. Create a new GitHub user and login.2. Fork the repository that you will be creating pull requests in.3. Create a [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token).4. Logout and log back into your main user account.5. Add a secret to your repository containing the above PAT.6. As shown in the following example workflow, set the `push-to-fork` input to the full repository name of the fork.
+```yaml - uses: actions/checkout@v3 # Make changes to pull request here - uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.MACHINE_USER_PAT }} push-to-fork: machine-user/fork-of-repository```
+### Authenticating with GitHub App generated tokens
+A GitHub App can be created for the sole purpose of generating tokens for use with GitHub actions.These tokens can be used in place of `GITHUB_TOKEN` or a [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token).GitHub App generated tokens are more secure than using a PAT because GitHub App access permissions can be set with finer granularity and are scoped to only repositories where the App is installed.
+1. Create a minimal [GitHub App](https://docs.github.com/en/developers/apps/creating-a-github-app), setting the following fields:
+- Set `GitHub App name`. - Set `Homepage URL` to anything you like, such as your GitHub profile page. - Uncheck `Active` under `Webhook`. You do not need to enter a `Webhook URL`. - Under `Repository permissions: Contents` select `Access: Read & write`. - Under `Repository permissions: Pull requests` select `Access: Read & write`. - Under `Organization permissions: Members` select `Access: Read-only`. - **NOTE**: Only needed if you would like add teams as reviewers to PRs.
+2. Create a Private key from the App settings page and store it securely.
+3. Install the App on any repository where workflows will run requiring tokens.
+4. Set secrets on your repository containing the GitHub App ID, and the private key you created in step 2. e.g. `APP_ID`, `APP_PRIVATE_KEY`.
+5. The following example workflow shows how to use [tibdex/github-app-token](https://github.com/tibdex/github-app-token) to generate a token for use with this action.
+```yaml steps: - uses: actions/checkout@v3 - uses: tibdex/github-app-token@v1 id: generate-token with: app_id: ${{ secrets.APP_ID }} private_key: ${{ secrets.APP_PRIVATE_KEY }} # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ steps.generate-token.outputs.token }}```
+### GPG commit signature verification
+The action can use GPG to sign commits with a GPG key that you generate yourself.
+1. Follow GitHub's guide to [generate a new GPG key](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-gpg-key).
+2. [Add the public key](https://docs.github.com/en/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account) to the user account associated with the [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) that you will use with the action.
+3. Copy the private key to your clipboard, replacing `email@example.com` with the email address of your GPG key. ``` # macOS gpg --armor --export-secret-key email@example.com | pbcopy ```
+4. Paste the private key into a repository secret where the workflow will run. e.g. `GPG_PRIVATE_KEY`
+5. Create another repository secret for the key's passphrase, if applicable. e.g. `GPG_PASSPHRASE`
+6. The following example workflow shows how to use [crazy-max/ghaction-import-gpg](https://github.com/crazy-max/ghaction-import-gpg) to import your GPG key and allow the action to sign commits.
+Note that the `committer` email address *MUST* match the email address used to create your GPG key.
+```yaml steps: - uses: actions/checkout@v3 - uses: crazy-max/ghaction-import-gpg@v3 with: gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} passphrase: ${{ secrets.GPG_PASSPHRASE }} git-user-signingkey: true git-commit-gpgsign: true # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} committer: example <email@example.com>```
+### Running in a container or on self-hosted runners
+This action can be run inside a container, or on [self-hosted runners](https://docs.github.com/en/actions/hosting-your-own-runners), by installing the necessary dependencies.
+This action requires `git` to be installed and on the `PATH`. Note that `actions/checkout` requires Git 2.18 or higher to be installed, otherwise it will just download the source of the repository instead of cloning it.
+The following examples of running in a container show the dependencies being installed during the workflow, but they could also be pre-installed in a custom image.
+**Alpine container example:**```ymljobs: createPullRequestAlpine: runs-on: ubuntu-latest container: image: alpine steps: - name: Install dependencies run: apk --no-cache add git - uses: actions/checkout@v3 # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4```
+**Ubuntu container example:**```ymljobs: createPullRequestAlpine: runs-on: ubuntu-latest container: image: ubuntu steps: - name: Install dependencies run: | apt-get update apt-get install -y software-properties-common add-apt-repository -y ppa:git-core/ppa apt-get install -y git - uses: actions/checkout@v3 # Make changes to pull request here - name: Create Pull Request uses: peter-evans/create-pull-request@v4```
+ 634  docs/examples.md
+@@ -0,0 +1,634 @@# Examples
+- [Use case: Create a pull request to update X on push](#use-case-create-a-pull-request-to-update-x-on-push) - [Update project authors](#update-project-authors) - [Keep a branch up-to-date with another](#keep-a-branch-up-to-date-with-another)- [Use case: Create a pull request to update X on release](#use-case-create-a-pull-request-to-update-x-on-release) - [Update changelog](#update-changelog)- [Use case: Create a pull request to update X periodically](#use-case-create-a-pull-request-to-update-x-periodically) - [Update NPM dependencies](#update-npm-dependencies) - [Update Gradle dependencies](#update-gradle-dependencies) - [Update Cargo dependencies](#update-cargo-dependencies) - [Update SwaggerUI for GitHub Pages](#update-swaggerui-for-github-pages) - [Keep a fork up-to-date with its upstream](#keep-a-fork-up-to-date-with-its-upstream) - [Spider and download a website](#spider-and-download-a-website)- [Use case: Create a pull request to update X by calling the GitHub API](#use-case-create-a-pull-request-to-update-x-by-calling-the-github-api) - [Call the GitHub API from an external service](#call-the-github-api-from-an-external-service) - [Call the GitHub API from another GitHub Actions workflow](#call-the-github-api-from-another-github-actions-workflow)- [Use case: Create a pull request to modify/fix pull requests](#use-case-create-a-pull-request-to-modifyfix-pull-requests) - [autopep8](#autopep8)- [Misc workflow tips](#misc-workflow-tips) - [Filtering push events](#filtering-push-events) - [Dynamic configuration using variables](#dynamic-configuration-using-variables) - [Setting the pull request body from a file](#setting-the-pull-request-body-from-a-file) - [Using a markdown template](#using-a-markdown-template) - [Debugging GitHub Actions](#debugging-github-actions)
+## Use case: Create a pull request to update X on push
+This pattern will work well for updating any kind of static content based on pushed changes. Care should be taken when using this pattern in repositories with a high frequency of commits.
+### Update project authors
+Raises a pull request to update a file called `AUTHORS` with the git user names and email addresses of contributors.
+```ymlname: Update AUTHORSon: push: branches: - mainjobs: updateAuthors: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: fetch-depth: 0 - name: Update AUTHORS run: | git log --format='%aN <%aE>%n%cN <%cE>' | sort -u > AUTHORS - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: commit-message: update authors title: Update AUTHORS body: Credit new contributors by updating AUTHORS branch: update-authors```### Keep a branch up-to-date with anotherThis is a use case where a branch should be kept up to date with another by opening a pull request to update it. The pull request should then be updated with new changes until it is merged or closed.In this example scenario, a branch called `production` should be updated via pull request to keep it in sync with `main`. Merging the pull request is effectively promoting those changes to production.```ymlname: Create production promotion pull requeston: push: branches: - mainjobs: productionPromotion: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: ref: production - name: Reset promotion branch run: | git fetch origin main:main git reset --hard main - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: branch: production-promotion```## Use case: Create a pull request to update X on releaseThis pattern will work well for updating any kind of static content based on the tagged commit of a release. Note that because `release` is one of the [events which checkout a commit](concepts-guidelines.md#events-which-checkout-a-commit) it is necessary to supply the `base` input to the action.### Update changelogRaises a pull request to update the `CHANGELOG.md` file based on the tagged commit of the release.Note that [git-chglog](https://github.com/git-chglog/git-chglog/) requires some configuration files to exist in the repository before this workflow will work.This workflow assumes the tagged release was made on a default branch called `main`.```ymlname: Update Changelogon: release: types: [published]jobs: updateChangelog: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: fetch-depth: 0 - name: Update Changelog run: | curl -o git-chglog -L https://github.com/git-chglog/git-chglog/releases/download/0.9.1/git-chglog_linux_amd64 chmod u+x git-chglog ./git-chglog -o CHANGELOG.md rm git-chglog - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: commit-message: update changelog title: Update Changelog body: Update changelog to reflect release changes branch: update-changelog base: main```## Use case: Create a pull request to update X periodicallyThis pattern will work well for updating any kind of static content from an external source. The workflow executes on a schedule and raises a pull request when there are changes.### Update NPM dependenciesThis workflow will create a pull request for npm dependencies.It works best in combination with a build workflow triggered on `push` and `pull_request`.A [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) can be used in order for the creation of the pull request to trigger further workflows. See the [documentation here](concepts-guidelines.md#triggering-further-workflow-runs) for further details.```ymlname: Update Dependencieson: schedule: - cron: '0 10 * * 1'jobs: update-dep: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-node@v3 with: node-version: '16.x' - name: Update dependencies run: | npx -p npm-check-updates ncu -u npm install - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} commit-message: Update dependencies title: Update dependencies body: | - Dependency updates Auto-generated by [create-pull-request][1] [1]: https://github.com/peter-evans/create-pull-request branch: update-dependencies```The above workflow works best in combination with a build workflow triggered on `push` and `pull_request`.```ymlname: CIon: push: branches: [main] pull_request: branches: [main]jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-node@v3 with: node-version: 16.x - run: npm ci - run: npm run test - run: npm run build```### Update Gradle dependenciesThe following workflow will create a pull request for Gradle dependencies.It requires first configuring your project to use Gradle lockfiles.See [here](https://github.com/peter-evans/gradle-auto-dependency-updates) for how to configure your project and use the following workflow.```ymlname: Update Dependencieson: schedule: - cron: '0 1 * * 1'jobs: update-dep: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-java@v2 with: distribution: 'temurin' java-version: 1.8 - name: Grant execute permission for gradlew run: chmod +x gradlew - name: Perform dependency resolution and write new lockfiles run: ./gradlew dependencies --write-locks - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} commit-message: Update dependencies title: Update dependencies body: | - Dependency updates Auto-generated by [create-pull-request][1] [1]: https://github.com/peter-evans/create-pull-request branch: update-dependencies```### Update Cargo dependenciesThe following workflow will create a pull request for Cargo dependencies.It optionally uses [`cargo-edit`](https://github.com/killercup/cargo-edit) to update `Cargo.toml` and keep it in sync with `Cargo.lock`.```ymlname: Update Dependencieson: schedule: - cron: '0 1 * * 1'jobs: update-dep: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Update dependencies run: | cargo install cargo-edit cargo update cargo upgrade --to-lockfile - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} commit-message: Update dependencies title: Update dependencies body: | - Dependency updates Auto-generated by [create-pull-request][1] [1]: https://github.com/peter-evans/create-pull-request branch: update-dependencies```### Update SwaggerUI for GitHub PagesWhen using [GitHub Pages to host Swagger documentation](https://github.com/peter-evans/swagger-github-pages), this workflow updates the repository with the latest distribution of [SwaggerUI](https://github.com/swagger-api/swagger-ui).You must create a file called `swagger-ui.version` at the root of your repository before running.```ymlname: Update Swagger UIon: schedule: - cron: '0 10 * * *'jobs: updateSwagger: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Get Latest Swagger UI Release id: swagger-ui run: | release_tag=$(curl -sL https://api.github.com/repos/swagger-api/swagger-ui/releases/latest | jq -r ".tag_name") echo "release_tag=$release_tag" >> $GITHUB_OUTPUT current_tag=$(<swagger-ui.version) echo "current_tag=$current_tag" >> $GITHUB_OUTPUT - name: Update Swagger UI if: steps.swagger-ui.outputs.current_tag != steps.swagger-ui.outputs.release_tag env: RELEASE_TAG: ${{ steps.swagger-ui.outputs.release_tag }} SWAGGER_YAML: "swagger.yaml" run: | # Delete the dist directory and index.html rm -fr dist index.html # Download the release curl -sL -o $RELEASE_TAG https://api.github.com/repos/swagger-api/swagger-ui/tarball/$RELEASE_TAG # Extract the dist directory tar -xzf $RELEASE_TAG --strip-components=1 $(tar -tzf $RELEASE_TAG | head -1 | cut -f1 -d"/")/dist rm $RELEASE_TAG # Move index.html to the root mv dist/index.html . # Fix references in index.html sed -i "s|https://petstore.swagger.io/v2/swagger.json|$SWAGGER_YAML|g" index.html sed -i "s|href=\"./|href=\"dist/|g" index.html sed -i "s|src=\"./|src=\"dist/|g" index.html # Update current release echo ${{ steps.swagger-ui.outputs.release_tag }} > swagger-ui.version - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: commit-message: Update swagger-ui to ${{ steps.swagger-ui.outputs.release_tag }} title: Update SwaggerUI to ${{ steps.swagger-ui.outputs.release_tag }} body: | Updates [swagger-ui][1] to ${{ steps.swagger-ui.outputs.release_tag }} Auto-generated by [create-pull-request][2] [1]: https://github.com/swagger-api/swagger-ui [2]: https://github.com/peter-evans/create-pull-request labels: dependencies, automated pr branch: swagger-ui-updates```### Keep a fork up-to-date with its upstreamThis example is designed to be run in a seperate repository from the fork repository itself.The aim of this is to prevent committing anything to the fork's default branch would cause it to differ from the upstream.In the following example workflow, `owner/repo` is the upstream repository and `fork-owner/repo` is the fork. It assumes the default branch of the upstream repository is called `main`.The [Personal Access Token (PAT)](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) should have `repo` scope. Additionally, if the upstream makes changes to the `.github/workflows` directory, the action will be unable to push the changes to a branch and throw the error "_(refusing to allow a GitHub App to create or update workflow `.github/workflows/xxx.yml` without `workflows` permission)_". To allow these changes to be pushed to the fork, add the `workflow` scope to the PAT. Of course, allowing this comes with the risk that the workflow changes from the upstream could run and do something unexpected. Disabling GitHub Actions in the fork is highly recommended to prevent this.When you merge the pull request make sure to choose the [`Rebase and merge`](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-merges#rebase-and-merge-your-pull-request-commits) option. This will make the fork's commits match the commits on the upstream.```ymlname: Update forkon: schedule: - cron: '0 0 * * 0'jobs: updateFork: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: repository: fork-owner/repo - name: Reset the default branch with upstream changes run: | git remote add upstream https://github.com/owner/repo.git git fetch upstream main:upstream-main git reset --hard upstream-main - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT }} branch: upstream-changes```### Spider and download a websiteThis workflow spiders a website and downloads the content. Any changes to the website will be raised in a pull request.```ymlname: Download Websiteon: schedule: - cron: '0 10 * * *'jobs: format: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Download website run: | wget \ --recursive \ --level=2 \ --wait=1 \ --no-clobber \ --page-requisites \ --html-extension \ --convert-links \ --domains quotes.toscrape.com \ http://quotes.toscrape.com/ - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: commit-message: update local website copy title: Automated Updates to Local Website Copy body: This is an auto-generated PR with website updates. branch: website-updates```## Use case: Create a pull request to update X by calling the GitHub APIYou can use the GitHub API to trigger a webhook event called [`repository_dispatch`](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch) when you want to trigger a workflow for any activity that happens outside of GitHub.This pattern will work well for updating any kind of static content from an external source.You can modify any of the examples in the previous section to work in this fashion.Set the workflow to execute `on: repository_dispatch`.```ymlon: repository_dispatch: types: [create-pull-request]```### Call the GitHub API from an external serviceAn `on: repository_dispatch` workflow can be triggered by a call to the GitHub API as follows.- `[username]` is a GitHub username- `[token]` is a `repo` scoped [Personal Access Token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)- `[repository]` is the name of the repository the workflow resides in.```curl -XPOST -u "[username]:[token]" \ -H "Accept: application/vnd.github.everest-preview+json" \ -H "Content-Type: application/json" \ https://api.github.com/repos/[username]/[repository]/dispatches \ --data '{"event_type": "create-pull-request"}'```### Call the GitHub API from another GitHub Actions workflowAn `on: repository_dispatch` workflow can be triggered from another workflow with [repository-dispatch](https://github.com/peter-evans/repository-dispatch) action.```yml- name: Repository Dispatch uses: peter-evans/repository-dispatch@v2 with: token: ${{ secrets.REPO_ACCESS_TOKEN }} repository: username/my-repo event-type: create-pull-request client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'```## Use case: Create a pull request to modify/fix pull requests**Note**: While the following approach does work, my strong recommendation would be to use a slash command style "ChatOps" solution for operations on pull requests. See [slash-command-dispatch](https://github.com/peter-evans/slash-command-dispatch) for such a solution.This is a pattern that lends itself to automated code linting and fixing. A pull request can be created to fix or modify something during an `on: pull_request` workflow. The pull request containing the fix will be raised with the original pull request as the base. This can be then be merged to update the original pull request and pass any required tests.Note that due to [token restrictions on public repository forks](https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token#permissions-for-the-github_token), workflows for this use case do not work for pull requests raised from forks.Private repositories can be configured to [enable workflows](https://docs.github.com/en/github/administering-a-repository/disabling-or-limiting-github-actions-for-a-repository#enabling-workflows-for-private-repository-forks) from forks to run without restriction. ### autopep8The following is an example workflow for a use case where [autopep8 action](https://github.com/peter-evans/autopep8) runs as both a check on pull requests and raises a further pull request to apply code fixes.How it works:1. When a pull request is raised the workflow executes as a check2. If autopep8 makes any fixes a pull request will be raised for those fixes to be merged into the current pull request branch. The workflow then deliberately causes the check to fail.3. When the pull request containing the fixes is merged the workflow runs again. This time autopep8 makes no changes and the check passes.4. The original pull request can now be merged.```ymlname: autopep8on: pull_requestjobs: autopep8: # Check if the PR is not raised by this workflow and is not from a fork if: startsWith(github.head_ref, 'autopep8-patches') == false && github.event.pull_request.head.repo.full_name == github.repository runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: ref: ${{ github.head_ref }} - name: autopep8 id: autopep8 uses: peter-evans/autopep8@v1 with: args: --exit-code --recursive --in-place --aggressive --aggressive . - name: Set autopep8 branch name id: vars run: | branch-name="autopep8-patches/${{ github.head_ref }}" echo "branch-name=$branch-name" >> $GITHUB_OUTPUT - name: Create Pull Request if: steps.autopep8.outputs.exit-code == 2 uses: peter-evans/create-pull-request@v4 with: commit-message: autopep8 action fixes title: Fixes by autopep8 action body: This is an auto-generated PR with fixes by autopep8. labels: autopep8, automated pr branch: ${{ steps.vars.outputs.branch-name }} - name: Fail if autopep8 made changes if: steps.autopep8.outputs.exit-code == 2 run: exit 1```## Misc workflow tips### Filtering push eventsFor workflows using `on: push` you may want to ignore push events for tags and only execute for branches. Specifying `branches` causes only events on branches to trigger the workflow. The `'**'` wildcard will match any branch name.```ymlon: push: branches: - '**' ```If you have a workflow that contains jobs to handle push events on branches as well as tags, you can make sure that the job where you use `create-pull-request` action only executes when `github.ref` is a branch by using an `if` condition as follows.```ymlon: pushjobs: createPullRequest: if: startsWith(github.ref, 'refs/heads/') runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 ... someOtherJob: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 ...```### Dynamic configuration using variablesThe following examples show how configuration for the action can be dynamically defined in a previous workflow step.Note that the step where output variables are defined must have an id.```yml - name: Set output variables id: vars run: | pr_title="[Test] Add report file $(date +%d-%m-%Y)" pr_body="This PR was auto-generated on $(date +%d-%m-%Y) \ by [create-pull-request](https://github.com/peter-evans/create-pull-request)." echo "pr_title=$pr_title" >> $GITHUB_OUTPUT echo "pr_body=$pr_body" >> $GITHUB_OUTPUT - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: title: ${{ steps.vars.outputs.pr_title }} body: ${{ steps.vars.outputs.pr_body }}```### Setting the pull request body from a fileThis example shows how file content can be read into a variable and passed to the action.```yml - id: get-pr-body run: | body=$(cat pr-body.txt) delimiter="$(openssl rand -hex 8)" echo "body<<$delimiter" >> $GITHUB_OUTPUT echo "$body" >> $GITHUB_OUTPUT echo "$delimiter" >> $GITHUB_OUTPUT - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: body: ${{ steps.get-pr-body.outputs.body }}```### Using a markdown templateIn this example, a markdown template file is added to the repository at `.github/pull-request-template.md` with the following content.```This is a test pull request templateRender template variables such as {{ .foo }} and {{ .bar }}.```The template is rendered using the [render-template](https://github.com/chuhlomin/render-template) action and the result is used to create the pull request.```yml - name: Render template id: template uses: chuhlomin/render-template@v1.4 with: template: .github/pull-request-template.md vars: | foo: this bar: that - name: Create Pull Request uses: peter-evans/create-pull-request@v4 with: body: ${{ steps.template.outputs.result }}```### Debugging GitHub Actions#### Runner Diagnostic Logging[Runner diagnostic logging](https://docs.github.com/en/actions/configuring-and-managing-workflows/managing-a-workflow-run#enabling-runner-diagnostic-logging) provides additional log files that contain information about how a runner is executing an action.To enable runner diagnostic logging, set the secret `ACTIONS_RUNNER_DEBUG` to `true` in the repository that contains the workflow.#### Step Debug Logging[Step debug logging](https://docs.github.com/en/actions/configuring-and-managing-workflows/managing-a-workflow-run#enabling-step-debug-logging) increases the verbosity of a job's logs during and after a job's execution.To enable step debug logging set the secret `ACTIONS_STEP_DEBUG` to `true` in the repository that contains the workflow.#### Output Various Contexts```yml steps: - name: Dump GitHub context env: GITHUB_CONTEXT: ${{ toJson(github) }} run: echo "$GITHUB_CONTEXT" - name: Dump job context env: JOB_CONTEXT: ${{ toJson(job) }} run: echo "$JOB_CONTEXT" - name: Dump steps context env: STEPS_CONTEXT: ${{ toJson(steps) }} run: echo "$STEPS_CONTEXT" - name: Dump runner context env: RUNNER_CONTEXT: ${{ toJson(runner) }} run: echo "$RUNNER_CONTEXT" - name: Dump strategy context env: STRATEGY_CONTEXT: ${{ toJson(strategy) }} run: echo "$STRATEGY_CONTEXT" - name: Dump matrix context env: MATRIX_CONTEXT: ${{ toJson(matrix) }} run: echo "$MATRIX_CONTEXT"```
+ 87  docs/updating.md
+@@ -0,0 +1,87 @@## Updating from `v3` to `v4`
+### Breaking changes
+- The `add-paths` input no longer accepts `-A` as a valid value. When committing all new and modified files the `add-paths` input should be omitted.
+- If using self-hosted runners or GitHub Enterprise Server, there are minimum requirements for `v4` to run. See "What's new" below for details.
+### What's new
+- Updated runtime to Node.js 16 - The action now requires a minimum version of v2.285.0 for the [Actions Runner](https://github.com/actions/runner/releases/tag/v2.285.0). - If using GitHub Enterprise Server, the action requires [GHES 3.4](https://docs.github.com/en/enterprise-server@3.4/admin/release-notes) or later.
+## Updating from `v2` to `v3`
+### Breaking changes
+- The `author` input now defaults to the user who triggered the workflow run. This default is set via [action.yml](../action.yml) as `${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>`, where `github.actor` is the GitHub user account associated with the run. For example, `peter-evans <peter-evans@users.noreply.github.com>`.
+To continue to use the `v2` default, set the `author` input as follows. ```yaml - uses: peter-evans/create-pull-request@v3 with: author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com> ```
+- The `author` and `committer` inputs are no longer cross-used if only one is supplied. Additionally, when neither input is set, the `author` and `committer` are no longer determined from an existing identity set in git config. In both cases, the inputs will fall back to their default set in [action.yml](../action.yml).
+- Deprecated inputs `project` and `project-column` have been removed in favour of an additional action step. See [Create a project card](https://github.com/peter-evans/create-pull-request#create-a-project-card) for details.
+- Deprecated output `pr_number` has been removed in favour of `pull-request-number`.
+- Input `request-to-parent` has been removed in favour of `push-to-fork`. This greatly simplifies pushing the pull request branch to a fork of the parent repository. See [Push pull request branches to a fork](concepts-guidelines.md#push-pull-request-branches-to-a-fork) for details.
+e.g. ```yaml - uses: actions/checkout@v2 # Make changes to pull request here - uses: peter-evans/create-pull-request@v3 with: token: ${{ secrets.MACHINE_USER_PAT }} push-to-fork: machine-user/fork-of-repository ```
+### What's new
+- The action has been converted to Typescript giving it a significant performance improvement.
+- If you run this action in a container, or on [self-hosted runners](https://docs.github.com/en/actions/hosting-your-own-runners), `python` and `pip` are no longer required dependencies. See [Running in a container or on self-hosted runners](concepts-guidelines.md#running-in-a-container-or-on-self-hosted-runners) for details.
+- Inputs `labels`, `assignees`, `reviewers` and `team-reviewers` can now be newline separated, or comma separated. e.g. ```yml labels: | chore dependencies automated ```
+## Updating from `v1` to `v2`
+### Breaking changes
+- `v2` now expects repositories to be checked out with `actions/checkout@v2`
+To use `actions/checkout@v1` the following step to checkout the branch is necessary. ```yml - uses: actions/checkout@v1 - name: Checkout branch run: git checkout "${GITHUB_REF:11}" ```
+- The two branch naming strategies have been swapped. Fixed-branch naming strategy is now the default. i.e. `branch-suffix: none` is now the default and should be removed from configuration if set.
+- `author-name`, `author-email`, `committer-name`, `committer-email` have been removed in favour of `author` and `committer`. They can both be set in the format `Display Name <email@address.com>`
+If neither `author` or `committer` are set the action will default to making commits as the GitHub Actions bot user.
+### What's new
+- Unpushed commits made during the workflow before the action runs will now be considered as changes to be raised in the pull request. See [Create your own commits](https://github.com/peter-evans/create-pull-request#create-your-own-commits) for details.- New commits made to the pull request base will now be taken into account when pull requests are updated.- If an updated pull request no longer differs from its base it will automatically be closed and the pull request branch deleted.
+ 11  jest.config.js
+@@ -0,0 +1,11 @@module.exports = { clearMocks: true, moduleFileExtensions: ['js', 'ts'], testEnvironment: 'node', testMatch: ['**/*.test.ts'], testRunner: 'jest-circus/runner', transform: { '^.+\\.ts$': 'ts-jest' }, verbose: true}
+ 14,160  package-lock.json
+Load diff
+Large diffs are not rendered by default.
+ 58  package.json
+@@ -0,0 +1,58 @@{ "name": "create-pull-request", "version": "4.0.0", "private": true, "description": "Creates a pull request for changes to your repository in the actions workspace", "main": "lib/main.js", "scripts": { "build": "tsc && ncc build", "format": "prettier --write '**/*.ts'", "format-check": "prettier --check '**/*.ts'", "lint": "eslint src/**/*.ts", "test:unit": "jest unit", "test:int": "__test__/integration-tests.sh", "test": "npm run test:unit && npm run test:int" }, "repository": { "type": "git", "url": "git+https://github.com/peter-evans/create-pull-request.git" }, "keywords": [ "actions", "pull", "request" ], "author": "Peter Evans", "license": "MIT", "bugs": { "url": "https://github.com/peter-evans/create-pull-request/issues" }, "homepage": "https://github.com/peter-evans/create-pull-request", "dependencies": { "@actions/core": "^1.10.0", "@actions/exec": "^1.1.1", "@octokit/core": "^3.5.1", "@octokit/plugin-paginate-rest": "^2.17.0", "@octokit/plugin-rest-endpoint-methods": "^5.13.0", "proxy-agent": "^5.0.0", "uuid": "^8.3.2" }, "devDependencies": { "@types/jest": "^27.5.0", "@types/node": "^16.11.11", "@typescript-eslint/parser": "^5.5.0", "@vercel/ncc": "^0.32.0", "eslint": "^8.3.0", "eslint-import-resolver-typescript": "^2.5.0", "eslint-plugin-github": "^4.3.5", "eslint-plugin-import": "^2.25.3", "eslint-plugin-jest": "^26.1.5", "jest": "^28.1.0", "jest-circus": "^28.1.0", "jest-environment-jsdom": "^28.1.0", "js-yaml": "^4.1.0", "prettier": "^2.5.0", "ts-jest": "^28.0.2", "typescript": "^4.5.2" }}
+ 294  src/create-or-update-branch.ts
+@@ -0,0 +1,294 @@import * as core from '@actions/core'import {GitCommandManager} from './git-command-manager'import {v4 as uuidv4} from 'uuid'
+const CHERRYPICK_EMPTY = 'The previous cherry-pick is now empty, possibly due to conflict resolution.'const NOTHING_TO_COMMIT = 'nothing to commit, working tree clean'
+export enum WorkingBaseType { Branch = 'branch', Commit = 'commit'}
+export async function getWorkingBaseAndType( git: GitCommandManager): Promise<[string, WorkingBaseType]> { const symbolicRefResult = await git.exec( ['symbolic-ref', 'HEAD', '--short'], true ) if (symbolicRefResult.exitCode == 0) { // A ref is checked out return [symbolicRefResult.stdout.trim(), WorkingBaseType.Branch] } else { // A commit is checked out (detached HEAD) const headSha = await git.revParse('HEAD') return [headSha, WorkingBaseType.Commit] }}
+export async function tryFetch( git: GitCommandManager, remote: string, branch: string): Promise<boolean> { try { await git.fetch([`${branch}:refs/remotes/${remote}/${branch}`], remote, [ '--force' ]) return true } catch { return false }}
+// Return the number of commits that branch2 is ahead of branch1async function commitsAhead( git: GitCommandManager, branch1: string, branch2: string): Promise<number> { const result = await git.revList( [`${branch1}...${branch2}`], ['--right-only', '--count'] ) return Number(result)}
+// Return true if branch2 is ahead of branch1async function isAhead( git: GitCommandManager, branch1: string, branch2: string): Promise<boolean> { return (await commitsAhead(git, branch1, branch2)) > 0}
+// Return the number of commits that branch2 is behind branch1async function commitsBehind( git: GitCommandManager, branch1: string, branch2: string): Promise<number> { const result = await git.revList( [`${branch1}...${branch2}`], ['--left-only', '--count'] ) return Number(result)}
+// Return true if branch2 is behind branch1async function isBehind( git: GitCommandManager, branch1: string, branch2: string): Promise<boolean> { return (await commitsBehind(git, branch1, branch2)) > 0}
+// Return true if branch2 is even with branch1async function isEven( git: GitCommandManager, branch1: string, branch2: string): Promise<boolean> { return ( !(await isAhead(git, branch1, branch2)) && !(await isBehind(git, branch1, branch2)) )}
+function splitLines(multilineString: string): string[] { return multilineString .split('\n') .map(s => s.trim()) .filter(x => x !== '')}
+export async function createOrUpdateBranch( git: GitCommandManager, commitMessage: string, base: string, branch: string, branchRemoteName: string, signoff: boolean, addPaths: string[]): Promise<CreateOrUpdateBranchResult> { // Get the working base. // When a ref, it may or may not be the actual base. // When a commit, we must rebase onto the actual base. const [workingBase, workingBaseType] = await getWorkingBaseAndType(git) core.info(`Working base is ${workingBaseType} '${workingBase}'`) if (workingBaseType == WorkingBaseType.Commit && !base) { throw new Error(`When in 'detached HEAD' state, 'base' must be supplied.`) }
+// If the base is not specified it is assumed to be the working base. base = base ? base : workingBase const baseRemote = 'origin'
+// Set the default return values const result: CreateOrUpdateBranchResult = { action: 'none', base: base, hasDiffWithBase: false, headSha: '' }
+// Save the working base changes to a temporary branch const tempBranch = uuidv4() await git.checkout(tempBranch, 'HEAD') // Commit any uncommitted changes if (await git.isDirty(true, addPaths)) { core.info('Uncommitted changes found. Adding a commit.') const aopts = ['add'] if (addPaths.length > 0) { aopts.push(...['--', ...addPaths]) } else { aopts.push('-A') } await git.exec(aopts, true) const popts = ['-m', commitMessage] if (signoff) { popts.push('--signoff') } const commitResult = await git.commit(popts, true) // 'nothing to commit' can occur when core.autocrlf is set to true if ( commitResult.exitCode != 0 && !commitResult.stdout.includes(NOTHING_TO_COMMIT) ) { throw new Error(`Unexpected error: ${commitResult.stderr}`) } }
+// Remove uncommitted tracked and untracked changes await git.exec(['reset', '--hard']) await git.exec(['clean', '-f', '-d'])
+// Perform fetch and reset the working base // Commits made during the workflow will be removed if (workingBaseType == WorkingBaseType.Branch) { core.info(`Resetting working base branch '${workingBase}'`) if (branchRemoteName == 'fork') { // If pushing to a fork we must fetch with 'unshallow' to avoid the following error on git push // ! [remote rejected] HEAD -> tests/push-branch-to-fork (shallow update not allowed) await git.fetch([`${workingBase}:${workingBase}`], baseRemote, [ '--force' ]) } else { // If the remote is 'origin' we can git reset await git.checkout(workingBase) await git.exec(['reset', '--hard', `${baseRemote}/${workingBase}`]) } }
+// If the working base is not the base, rebase the temp branch commits // This will also be true if the working base type is a commit if (workingBase != base) { core.info( `Rebasing commits made to ${workingBaseType} '${workingBase}' on to base branch '${base}'` ) // Checkout the actual base await git.fetch([`${base}:${base}`], baseRemote, ['--force']) await git.checkout(base) // Cherrypick commits from the temporary branch starting from the working base const commits = await git.revList( [`${workingBase}..${tempBranch}`, '.'], ['--reverse'] ) for (const commit of splitLines(commits)) { const result = await git.cherryPick( ['--strategy=recursive', '--strategy-option=theirs', commit], true ) if (result.exitCode != 0 && !result.stderr.includes(CHERRYPICK_EMPTY)) { throw new Error(`Unexpected error: ${result.stderr}`) } } // Reset the temp branch to the working index await git.checkout(tempBranch, 'HEAD') // Reset the base await git.fetch([`${base}:${base}`], baseRemote, ['--force']) }
+// Try to fetch the pull request branch if (!(await tryFetch(git, branchRemoteName, branch))) { // The pull request branch does not exist core.info(`Pull request branch '${branch}' does not exist yet.`) // Create the pull request branch await git.checkout(branch, tempBranch) // Check if the pull request branch is ahead of the base result.hasDiffWithBase = await isAhead(git, base, branch) if (result.hasDiffWithBase) { result.action = 'created' core.info(`Created branch '${branch}'`) } else { core.info( `Branch '${branch}' is not ahead of base '${base}' and will not be created` ) } } else { // The pull request branch exists core.info( `Pull request branch '${branch}' already exists as remote branch '${branchRemoteName}/${branch}'` ) // Checkout the pull request branch await git.checkout(branch)
+// Reset the branch if one of the following conditions is true. // - If the branch differs from the recreated temp branch. // - If the recreated temp branch is not ahead of the base. This means there will be // no pull request diff after the branch is reset. This will reset any undeleted // branches after merging. In particular, it catches a case where the branch was // squash merged but not deleted. We need to reset to make sure it doesn't appear // to have a diff with the base due to different commits for the same changes. // - If the number of commits ahead of the base branch differs between the branch and // temp branch. This catches a case where the base branch has been force pushed to // a new commit. // For changes on base this reset is equivalent to a rebase of the pull request branch. const tempBranchCommitsAhead = await commitsAhead(git, base, tempBranch) const branchCommitsAhead = await commitsAhead(git, base, branch) if ( (await git.hasDiff([`${branch}..${tempBranch}`])) || branchCommitsAhead != tempBranchCommitsAhead || !(tempBranchCommitsAhead > 0) // !isAhead ) { core.info(`Resetting '${branch}'`) // Alternatively, git switch -C branch tempBranch await git.checkout(branch, tempBranch) }
+// Check if the pull request branch has been updated // If the branch was reset or updated it will be ahead // It may be behind if a reset now results in no diff with the base if (!(await isEven(git, `${branchRemoteName}/${branch}`, branch))) { result.action = 'updated' core.info(`Updated branch '${branch}'`) } else { result.action = 'not-updated' core.info( `Branch '${branch}' is even with its remote and will not be updated` ) }
+// Check if the pull request branch is ahead of the base result.hasDiffWithBase = await isAhead(git, base, branch) }
+// Get the pull request branch SHA result.headSha = await git.revParse('HEAD')
+// Delete the temporary branch await git.exec(['branch', '--delete', '--force', tempBranch])
+return result}
+interface CreateOrUpdateBranchResult { action: string base: string hasDiffWithBase: boolean headSha: string}
+ 260  src/create-pull-request.ts
+@@ -0,0 +1,260 @@import * as core from '@actions/core'import { createOrUpdateBranch, getWorkingBaseAndType, WorkingBaseType} from './create-or-update-branch'import {GitHubHelper} from './github-helper'import {GitCommandManager} from './git-command-manager'import {GitAuthHelper} from './git-auth-helper'import * as utils from './utils'
+export interface Inputs { token: string path: string addPaths: string[] commitMessage: string committer: string author: string signoff: boolean branch: string deleteBranch: boolean branchSuffix: string base: string pushToFork: string title: string body: string labels: string[] assignees: string[] reviewers: string[] teamReviewers: string[] milestone: number draft: boolean}
+export async function createPullRequest(inputs: Inputs): Promise<void> { let gitAuthHelper try { if (!inputs.token) { throw new Error(`Input 'token' not supplied. Unable to continue.`) }
+// Get the repository path const repoPath = utils.getRepoPath(inputs.path) // Create a git command manager const git = await GitCommandManager.create(repoPath)
+// Save and unset the extraheader auth config if it exists core.startGroup('Save persisted git credentials') gitAuthHelper = new GitAuthHelper(git) await gitAuthHelper.savePersistedAuth() core.endGroup()
+// Init the GitHub client const githubHelper = new GitHubHelper(inputs.token)
+core.startGroup('Determining the base and head repositories') // Determine the base repository from git config const remoteUrl = await git.tryGetRemoteUrl() const baseRemote = utils.getRemoteDetail(remoteUrl) // Determine the head repository; the target for the pull request branch const branchRemoteName = inputs.pushToFork ? 'fork' : 'origin' const branchRepository = inputs.pushToFork ? inputs.pushToFork : baseRemote.repository if (inputs.pushToFork) { // Check if the supplied fork is really a fork of the base core.info( `Checking if '${branchRepository}' is a fork of '${baseRemote.repository}'` ) const parentRepository = await githubHelper.getRepositoryParent( branchRepository ) if (parentRepository != baseRemote.repository) { throw new Error( `Repository '${branchRepository}' is not a fork of '${baseRemote.repository}'. Unable to continue.` ) } // Add a remote for the fork const remoteUrl = utils.getRemoteUrl( baseRemote.protocol, baseRemote.hostname, branchRepository ) await git.exec(['remote', 'add', 'fork', remoteUrl]) } core.endGroup() core.info( `Pull request branch target repository set to ${branchRepository}` )
+// Configure auth if (baseRemote.protocol == 'HTTPS') { core.startGroup('Configuring credential for HTTPS authentication') await gitAuthHelper.configureToken(inputs.token) core.endGroup() }
+core.startGroup('Checking the base repository state') const [workingBase, workingBaseType] = await getWorkingBaseAndType(git) core.info(`Working base is ${workingBaseType} '${workingBase}'`) // When in detached HEAD state (checked out on a commit), we need to // know the 'base' branch in order to rebase changes. if (workingBaseType == WorkingBaseType.Commit && !inputs.base) { throw new Error( `When the repository is checked out on a commit instead of a branch, the 'base' input must be supplied.` ) } // If the base is not specified it is assumed to be the working base. const base = inputs.base ? inputs.base : workingBase // Throw an error if the base and branch are not different branches // of the 'origin' remote. An identically named branch in the `fork` // remote is perfectly fine. if (branchRemoteName == 'origin' && base == inputs.branch) { throw new Error( `The 'base' and 'branch' for a pull request must be different branches. Unable to continue.` ) } // For self-hosted runners the repository state persists between runs. // This command prunes the stale remote ref when the pull request branch was // deleted after being merged or closed. Without this the push using // '--force-with-lease' fails due to "stale info." // https://github.com/peter-evans/create-pull-request/issues/633 await git.exec(['remote', 'prune', branchRemoteName]) core.endGroup()
+// Apply the branch suffix if set if (inputs.branchSuffix) { switch (inputs.branchSuffix) { case 'short-commit-hash': // Suffix with the short SHA1 hash inputs.branch = `${inputs.branch}-${await git.revParse('HEAD', [ '--short' ])}` break case 'timestamp': // Suffix with the current timestamp inputs.branch = `${inputs.branch}-${utils.secondsSinceEpoch()}` break case 'random': // Suffix with a 7 character random string inputs.branch = `${inputs.branch}-${utils.randomString()}` break default: throw new Error( `Branch suffix '${inputs.branchSuffix}' is not a valid value. Unable to continue.` ) } }
+// Output head branch core.info( `Pull request branch to create or update set to '${inputs.branch}'` )
+// Configure the committer and author core.startGroup('Configuring the committer and author') const parsedAuthor = utils.parseDisplayNameEmail(inputs.author) const parsedCommitter = utils.parseDisplayNameEmail(inputs.committer) git.setIdentityGitOptions([ '-c', `author.name=${parsedAuthor.name}`, '-c', `author.email=${parsedAuthor.email}`, '-c', `committer.name=${parsedCommitter.name}`, '-c', `committer.email=${parsedCommitter.email}` ]) core.info( `Configured git committer as '${parsedCommitter.name} <${parsedCommitter.email}>'` ) core.info( `Configured git author as '${parsedAuthor.name} <${parsedAuthor.email}>'` ) core.endGroup()
+// Create or update the pull request branch core.startGroup('Create or update the pull request branch') const result = await createOrUpdateBranch( git, inputs.commitMessage, inputs.base, inputs.branch, branchRemoteName, inputs.signoff, inputs.addPaths ) core.endGroup()
+if (['created', 'updated'].includes(result.action)) { // The branch was created or updated core.startGroup( `Pushing pull request branch to '${branchRemoteName}/${inputs.branch}'` ) await git.push([ '--force-with-lease', branchRemoteName, `HEAD:refs/heads/${inputs.branch}` ]) core.endGroup() }
+// Set the base. It would have been '' if not specified as an input inputs.base = result.base
+if (result.hasDiffWithBase) { // Create or update the pull request core.startGroup('Create or update the pull request') const pull = await githubHelper.createOrUpdatePullRequest( inputs, baseRemote.repository, branchRepository ) core.endGroup()
+// Set outputs core.startGroup('Setting outputs') core.setOutput('pull-request-number', pull.number) core.setOutput('pull-request-url', pull.html_url) if (pull.created) { core.setOutput('pull-request-operation', 'created') } else if (result.action == 'updated') { core.setOutput('pull-request-operation', 'updated') } core.setOutput('pull-request-head-sha', result.headSha) // Deprecated core.exportVariable('PULL_REQUEST_NUMBER', pull.number) core.endGroup() } else { // There is no longer a diff with the base // Check we are in a state where a branch exists if (['updated', 'not-updated'].includes(result.action)) { core.info( `Branch '${inputs.branch}' no longer differs from base branch '${inputs.base}'` ) if (inputs.deleteBranch) { core.info(`Deleting branch '${inputs.branch}'`) await git.push([ '--delete', '--force', branchRemoteName, `refs/heads/${inputs.branch}` ]) // Set outputs core.startGroup('Setting outputs') core.setOutput('pull-request-operation', 'closed') core.endGroup() } } } } catch (error) { core.setFailed(utils.getErrorMessage(error)) } finally { // Remove auth and restore persisted auth config if it existed core.startGroup('Restore persisted git credentials') await gitAuthHelper.removeAuth() await gitAuthHelper.restorePersistedAuth() core.endGroup() }}
+ 127  src/git-auth-helper.ts
+@@ -0,0 +1,127 @@import * as core from '@actions/core'import * as fs from 'fs'import {GitCommandManager} from './git-command-manager'import * as path from 'path'import {URL} from 'url'import * as utils from './utils'
+export class GitAuthHelper { private git: GitCommandManager private gitConfigPath: string private extraheaderConfigKey: string private extraheaderConfigPlaceholderValue = 'AUTHORIZATION: basic ***' private extraheaderConfigValueRegex = '^AUTHORIZATION:' private persistedExtraheaderConfigValue = ''
+constructor(git: GitCommandManager) { this.git = git this.gitConfigPath = path.join( this.git.getWorkingDirectory(), '.git', 'config' ) const serverUrl = this.getServerUrl() this.extraheaderConfigKey = `http.${serverUrl.origin}/.extraheader` }
+async savePersistedAuth(): Promise<void> { // Save and unset persisted extraheader credential in git config if it exists this.persistedExtraheaderConfigValue = await this.getAndUnset() }
+async restorePersistedAuth(): Promise<void> { if (this.persistedExtraheaderConfigValue) { try { await this.setExtraheaderConfig(this.persistedExtraheaderConfigValue) core.info('Persisted git credentials restored') } catch (e) { core.warning(utils.getErrorMessage(e)) } } }
+async configureToken(token: string): Promise<void> { // Encode and configure the basic credential for HTTPS access const basicCredential = Buffer.from( `x-access-token:${token}`, 'utf8' ).toString('base64') core.setSecret(basicCredential) const extraheaderConfigValue = `AUTHORIZATION: basic ${basicCredential}` await this.setExtraheaderConfig(extraheaderConfigValue) }
+async removeAuth(): Promise<void> { await this.getAndUnset() }
+private async setExtraheaderConfig( extraheaderConfigValue: string ): Promise<void> { // Configure a placeholder value. This approach avoids the credential being captured // by process creation audit events, which are commonly logged. For more information, // refer to https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing // See https://github.com/actions/checkout/blob/main/src/git-auth-helper.ts#L267-L274 await this.git.config( this.extraheaderConfigKey, this.extraheaderConfigPlaceholderValue ) // Replace the placeholder await this.gitConfigStringReplace( this.extraheaderConfigPlaceholderValue, extraheaderConfigValue ) }
+private async getAndUnset(): Promise<string> { let configValue = '' // Save and unset persisted extraheader credential in git config if it exists if ( await this.git.configExists( this.extraheaderConfigKey, this.extraheaderConfigValueRegex ) ) { configValue = await this.git.getConfigValue( this.extraheaderConfigKey, this.extraheaderConfigValueRegex ) if ( await this.git.tryConfigUnset( this.extraheaderConfigKey, this.extraheaderConfigValueRegex ) ) { core.info(`Unset config key '${this.extraheaderConfigKey}'`) } else { core.warning( `Failed to unset config key '${this.extraheaderConfigKey}'` ) } } return configValue }
+private async gitConfigStringReplace( find: string, replace: string ): Promise<void> { let content = (await fs.promises.readFile(this.gitConfigPath)).toString() const index = content.indexOf(find) if (index < 0 || index != content.lastIndexOf(find)) { throw new Error(`Unable to replace '${find}' in ${this.gitConfigPath}`) } content = content.replace(find, replace) await fs.promises.writeFile(this.gitConfigPath, content) }
+private getServerUrl(): URL { // todo: remove GITHUB_URL after support for GHES Alpha is no longer needed // See https://github.com/actions/checkout/blob/main/src/url-helper.ts#L22-L29 return new URL( process.env['GITHUB_SERVER_URL'] || process.env['GITHUB_URL'] || 'https://github.com' ) }}
+ 303  src/git-command-manager.ts
+@@ -0,0 +1,303 @@import * as exec from '@actions/exec'import * as io from '@actions/io'import * as utils from './utils'import * as path from 'path'
+const tagsRefSpec = '+refs/tags/*:refs/tags/*'
+export class GitCommandManager { private gitPath: string private workingDirectory: string // Git options used when commands require an identity private identityGitOptions?: string[]
+private constructor(workingDirectory: string, gitPath: string) { this.workingDirectory = workingDirectory this.gitPath = gitPath }
+static async create(workingDirectory: string): Promise<GitCommandManager> { const gitPath = await io.which('git', true) return new GitCommandManager(workingDirectory, gitPath) }
+setIdentityGitOptions(identityGitOptions: string[]): void { this.identityGitOptions = identityGitOptions }
+async checkout(ref: string, startPoint?: string): Promise<void> { const args = ['checkout', '--progress'] if (startPoint) { args.push('-B', ref, startPoint) } else { args.push(ref) } // https://github.com/git/git/commit/a047fafc7866cc4087201e284dc1f53e8f9a32d5 args.push('--') await this.exec(args) }
+async cherryPick( options?: string[], allowAllExitCodes = false ): Promise<GitOutput> { const args = ['cherry-pick'] if (this.identityGitOptions) { args.unshift(...this.identityGitOptions) }
+if (options) { args.push(...options) }
+return await this.exec(args, allowAllExitCodes) }
+async commit( options?: string[], allowAllExitCodes = false ): Promise<GitOutput> { const args = ['commit'] if (this.identityGitOptions) { args.unshift(...this.identityGitOptions) }
+if (options) { args.push(...options) }
+return await this.exec(args, allowAllExitCodes) }
+async config( configKey: string, configValue: string, globalConfig?: boolean ): Promise<void> { await this.exec([ 'config', globalConfig ? '--global' : '--local', configKey, configValue ]) }
+async configExists( configKey: string, configValue = '.', globalConfig?: boolean ): Promise<boolean> { const output = await this.exec( [ 'config', globalConfig ? '--global' : '--local', '--name-only', '--get-regexp', configKey, configValue ], true ) return output.exitCode === 0 }
+async fetch( refSpec: string[], remoteName?: string, options?: string[] ): Promise<void> { const args = ['-c', 'protocol.version=2', 'fetch'] if (!refSpec.some(x => x === tagsRefSpec)) { args.push('--no-tags') }
+args.push('--progress', '--no-recurse-submodules') if ( utils.fileExistsSync(path.join(this.workingDirectory, '.git', 'shallow')) ) { args.push('--unshallow') }
+if (options) { args.push(...options) }
+if (remoteName) { args.push(remoteName) } else { args.push('origin') } for (const arg of refSpec) { args.push(arg) }
+await this.exec(args) }
+async getConfigValue(configKey: string, configValue = '.'): Promise<string> { const output = await this.exec([ 'config', '--local', '--get-regexp', configKey, configValue ]) return output.stdout.trim().split(`${configKey} `)[1] }
+getWorkingDirectory(): string { return this.workingDirectory }
+async hasDiff(options?: string[]): Promise<boolean> { const args = ['diff', '--quiet'] if (options) { args.push(...options) } const output = await this.exec(args, true) return output.exitCode === 1 }
+async isDirty(untracked: boolean, pathspec?: string[]): Promise<boolean> { const pathspecArgs = pathspec ? ['--', ...pathspec] : [] // Check untracked changes const sargs = ['--porcelain', '-unormal'] sargs.push(...pathspecArgs) if (untracked && (await this.status(sargs))) { return true } // Check working index changes if (await this.hasDiff(pathspecArgs)) { return true } // Check staged changes const dargs = ['--staged'] dargs.push(...pathspecArgs) if (await this.hasDiff(dargs)) { return true } return false }
+async push(options?: string[]): Promise<void> { const args = ['push'] if (options) { args.push(...options) } await this.exec(args) }
+async revList( commitExpression: string[], options?: string[] ): Promise<string> { const args = ['rev-list'] if (options) { args.push(...options) } args.push(...commitExpression) const output = await this.exec(args) return output.stdout.trim() }
+async revParse(ref: string, options?: string[]): Promise<string> { const args = ['rev-parse'] if (options) { args.push(...options) } args.push(ref) const output = await this.exec(args) return output.stdout.trim() }
+async status(options?: string[]): Promise<string> { const args = ['status'] if (options) { args.push(...options) } const output = await this.exec(args) return output.stdout.trim() }
+async symbolicRef(ref: string, options?: string[]): Promise<string> { const args = ['symbolic-ref', ref] if (options) { args.push(...options) } const output = await this.exec(args) return output.stdout.trim() }
+async tryConfigUnset( configKey: string, configValue = '.', globalConfig?: boolean ): Promise<boolean> { const output = await this.exec( [ 'config', globalConfig ? '--global' : '--local', '--unset', configKey, configValue ], true ) return output.exitCode === 0 }
+async tryGetRemoteUrl(): Promise<string> { const output = await this.exec( ['config', '--local', '--get', 'remote.origin.url'], true )
+if (output.exitCode !== 0) { return '' }
+const stdout = output.stdout.trim() if (stdout.includes('\n')) { return '' }
+return stdout }
+async exec(args: string[], allowAllExitCodes = false): Promise<GitOutput> { const result = new GitOutput()
+const env = {} for (const key of Object.keys(process.env)) { env[key] = process.env[key] }
+const stdout: string[] = [] const stderr: string[] = []
+const options = { cwd: this.workingDirectory, env, ignoreReturnCode: allowAllExitCodes, listeners: { stdout: (data: Buffer) => { stdout.push(data.toString()) }, stderr: (data: Buffer) => { stderr.push(data.toString()) } } }
+result.exitCode = await exec.exec(`"${this.gitPath}"`, args, options) result.stdout = stdout.join('') result.stderr = stderr.join('') return result }}
+class GitOutput { stdout = '' stderr = '' exitCode = 0}
+ 183  src/github-helper.ts
+@@ -0,0 +1,183 @@import * as core from '@actions/core'import {Inputs} from './create-pull-request'import {Octokit, OctokitOptions} from './octokit-client'import * as utils from './utils'
+const ERROR_PR_REVIEW_FROM_AUTHOR = 'Review cannot be requested from pull request author'
+interface Repository { owner: string repo: string}
+interface Pull { number: number html_url: string created: boolean}
+export class GitHubHelper { private octokit: InstanceType<typeof Octokit>
+constructor(token: string) { const options: OctokitOptions = {} if (token) { options.auth = `${token}` } options.baseUrl = process.env['GITHUB_API_URL'] || 'https://api.github.com' this.octokit = new Octokit(options) }
+private parseRepository(repository: string): Repository { const [owner, repo] = repository.split('/') return { owner: owner, repo: repo } }
+private async createOrUpdate( inputs: Inputs, baseRepository: string, headRepository: string ): Promise<Pull> { const [headOwner] = headRepository.split('/') const headBranch = `${headOwner}:${inputs.branch}` const headBranchFull = `${headRepository}:${inputs.branch}`
+// Try to create the pull request try { core.info(`Attempting creation of pull request`) const {data: pull} = await this.octokit.rest.pulls.create({ ...this.parseRepository(baseRepository), title: inputs.title, head: headBranch, base: inputs.base, body: inputs.body, draft: inputs.draft }) core.info( `Created pull request #${pull.number} (${headBranch} => ${inputs.base})` ) return { number: pull.number, html_url: pull.html_url, created: true } } catch (e) { if ( utils.getErrorMessage(e).includes(`A pull request already exists for`) ) { core.info(`A pull request already exists for ${headBranch}`) } else { throw e } }
+// Update the pull request that exists for this branch and base core.info(`Fetching existing pull request`) const {data: pulls} = await this.octokit.rest.pulls.list({ ...this.parseRepository(baseRepository), state: 'open', head: headBranchFull, base: inputs.base }) core.info(`Attempting update of pull request`) const {data: pull} = await this.octokit.rest.pulls.update({ ...this.parseRepository(baseRepository), pull_number: pulls[0].number, title: inputs.title, body: inputs.body }) core.info( `Updated pull request #${pull.number} (${headBranch} => ${inputs.base})` ) return { number: pull.number, html_url: pull.html_url, created: false } }
+async getRepositoryParent(headRepository: string): Promise<string> { const {data: headRepo} = await this.octokit.rest.repos.get({ ...this.parseRepository(headRepository) }) if (!headRepo.parent) { throw new Error( `Repository '${headRepository}' is not a fork. Unable to continue.` ) } return headRepo.parent.full_name }
+async createOrUpdatePullRequest( inputs: Inputs, baseRepository: string, headRepository: string ): Promise<Pull> { // Create or update the pull request const pull = await this.createOrUpdate( inputs, baseRepository, headRepository )
+// Apply milestone if (inputs.milestone) { core.info(`Applying milestone '${inputs.milestone}'`) await this.octokit.rest.issues.update({ ...this.parseRepository(baseRepository), issue_number: pull.number, milestone: inputs.milestone }) } // Apply labels if (inputs.labels.length > 0) { core.info(`Applying labels '${inputs.labels}'`) await this.octokit.rest.issues.addLabels({ ...this.parseRepository(baseRepository), issue_number: pull.number, labels: inputs.labels }) } // Apply assignees if (inputs.assignees.length > 0) { core.info(`Applying assignees '${inputs.assignees}'`) await this.octokit.rest.issues.addAssignees({ ...this.parseRepository(baseRepository), issue_number: pull.number, assignees: inputs.assignees }) }
+// Request reviewers and team reviewers const requestReviewersParams = {} if (inputs.reviewers.length > 0) { requestReviewersParams['reviewers'] = inputs.reviewers core.info(`Requesting reviewers '${inputs.reviewers}'`) } if (inputs.teamReviewers.length > 0) { requestReviewersParams['team_reviewers'] = inputs.teamReviewers core.info(`Requesting team reviewers '${inputs.teamReviewers}'`) } if (Object.keys(requestReviewersParams).length > 0) { try { await this.octokit.rest.pulls.requestReviewers({ ...this.parseRepository(baseRepository), pull_number: pull.number, ...requestReviewersParams }) } catch (e) { if (utils.getErrorMessage(e).includes(ERROR_PR_REVIEW_FROM_AUTHOR)) { core.warning(ERROR_PR_REVIEW_FROM_AUTHOR) } else { throw e } } }
+return pull }}
+ 38  src/main.ts
+@@ -0,0 +1,38 @@import * as core from '@actions/core'import {Inputs, createPullRequest} from './create-pull-request'import {inspect} from 'util'import * as utils from './utils'
+async function run(): Promise<void> { try { const inputs: Inputs = { token: core.getInput('token'), path: core.getInput('path'), addPaths: utils.getInputAsArray('add-paths'), commitMessage: core.getInput('commit-message'), committer: core.getInput('committer'), author: core.getInput('author'), signoff: core.getBooleanInput('signoff'), branch: core.getInput('branch'), deleteBranch: core.getBooleanInput('delete-branch'), branchSuffix: core.getInput('branch-suffix'), base: core.getInput('base'), pushToFork: core.getInput('push-to-fork'), title: core.getInput('title'), body: core.getInput('body'), labels: utils.getInputAsArray('labels'), assignees: utils.getInputAsArray('assignees'), reviewers: utils.getInputAsArray('reviewers'), teamReviewers: utils.getInputAsArray('team-reviewers'), milestone: Number(core.getInput('milestone')), draft: core.getBooleanInput('draft') } core.debug(`Inputs: ${inspect(inputs)}`)
+await createPullRequest(inputs) } catch (error) { core.setFailed(utils.getErrorMessage(error)) }}
+run()
+ 28  src/octokit-client.ts
+@@ -0,0 +1,28 @@import {Octokit as Core} from '@octokit/core'import {paginateRest} from '@octokit/plugin-paginate-rest'import {restEndpointMethods} from '@octokit/plugin-rest-endpoint-methods'import ProxyAgent from 'proxy-agent'export {RestEndpointMethodTypes} from '@octokit/plugin-rest-endpoint-methods'export {OctokitOptions} from '@octokit/core/dist-types/types'
+export const Octokit = Core.plugin( paginateRest, restEndpointMethods, autoProxyAgent)
+// Octokit plugin to support the standard environment variables http_proxy, https_proxy and no_proxyfunction autoProxyAgent(octokit: Core) { const proxy = process.env.https_proxy || process.env.HTTPS_PROXY || process.env.http_proxy || process.env.HTTP_PROXY
+if (!proxy) return
+const agent = new ProxyAgent() octokit.hook.before('request', options => { options.request.agent = agent })}
+ 170  src/utils.ts
+@@ -0,0 +1,170 @@import * as core from '@actions/core'import * as fs from 'fs'import * as path from 'path'
+export function getInputAsArray( name: string, options?: core.InputOptions): string[] { return getStringAsArray(core.getInput(name, options))}
+export function getStringAsArray(str: string): string[] { return str .split(/[\n,]+/) .map(s => s.trim()) .filter(x => x !== '')}
+export function getRepoPath(relativePath?: string): string { let githubWorkspacePath = process.env['GITHUB_WORKSPACE'] if (!githubWorkspacePath) { throw new Error('GITHUB_WORKSPACE not defined') } githubWorkspacePath = path.resolve(githubWorkspacePath) core.debug(`githubWorkspacePath: ${githubWorkspacePath}`)
+let repoPath = githubWorkspacePath if (relativePath) repoPath = path.resolve(repoPath, relativePath)
+core.debug(`repoPath: ${repoPath}`) return repoPath}
+interface RemoteDetail { hostname: string protocol: string repository: string}
+export function getRemoteDetail(remoteUrl: string): RemoteDetail { // Parse the protocol and github repository from a URL // e.g. HTTPS, peter-evans/create-pull-request const githubUrl = process.env['GITHUB_SERVER_URL'] || 'https://github.com'
+const githubServerMatch = githubUrl.match(/^https?:\/\/(.+)$/i) if (!githubServerMatch) { throw new Error('Could not parse GitHub Server name') }
+const hostname = githubServerMatch[1]
+const httpsUrlPattern = new RegExp( '^https?://.*@?' + hostname + '/(.+/.+?)(\\.git)?$', 'i' ) const sshUrlPattern = new RegExp('^git@' + hostname + ':(.+/.+)\\.git$', 'i')
+const httpsMatch = remoteUrl.match(httpsUrlPattern) if (httpsMatch) { return { hostname, protocol: 'HTTPS', repository: httpsMatch[1] } }
+const sshMatch = remoteUrl.match(sshUrlPattern) if (sshMatch) { return { hostname, protocol: 'SSH', repository: sshMatch[1] } }
+throw new Error( `The format of '${remoteUrl}' is not a valid GitHub repository URL` )}
+export function getRemoteUrl( protocol: string, hostname: string, repository: string): string { return protocol == 'HTTPS' ? `https://${hostname}/${repository}` : `git@${hostname}:${repository}.git`}
+export function secondsSinceEpoch(): number { const now = new Date() return Math.round(now.getTime() / 1000)}
+export function randomString(): string { return Math.random().toString(36).substr(2, 7)}
+interface DisplayNameEmail { name: string email: string}
+export function parseDisplayNameEmail( displayNameEmail: string): DisplayNameEmail { // Parse the name and email address from a string in the following format // Display Name <email@address.com> const pattern = /^([^<]+)\s*<([^>]+)>$/i
+// Check we have a match const match = displayNameEmail.match(pattern) if (!match) { throw new Error( `The format of '${displayNameEmail}' is not a valid email address with display name` ) }
+// Check that name and email are not just whitespace const name = match[1].trim() const email = match[2].trim() if (!name || !email) { throw new Error( `The format of '${displayNameEmail}' is not a valid email address with display name` ) }
+return { name: name, email: email }}
+export function fileExistsSync(path: string): boolean { if (!path) { throw new Error("Arg 'path' must not be empty") }
+let stats: fs.Stats try { stats = fs.statSync(path) } catch (error) { if (hasErrorCode(error) && error.code === 'ENOENT') { return false }
+throw new Error( `Encountered an error when checking whether path '${path}' exists: ${getErrorMessage( error )}` ) }
+if (!stats.isDirectory()) { return true }
+return false}
+/* eslint-disable @typescript-eslint/no-explicit-any */function hasErrorCode(error: any): error is {code: string} { return typeof (error && error.code) === 'string'}
+export function getErrorMessage(error: unknown) { if (error instanceof Error) return error.message return String(error)}
+ 16  tsconfig.json
+@@ -0,0 +1,16 @@{ "compilerOptions": { "target": "es6", "module": "commonjs", "lib": [ "es6" ], "outDir": "./lib", "rootDir": "./src", "declaration": true, "strict": true, "noImplicitAny": false, "esModuleInterop": true }, "exclude": ["__test__", "lib", "node_modules"]}
+Footer
+© 2022 GitHub, Inc.
+Footer navigation
+Terms
+Privacy
+Security
+Status
+Docs
+Contact GitHub
+Pricing
+API
+Training
+Blog
+About
+Comparing master...patch-21 · zakwarlord7/ci-CI
+		"4000": 
+        		"label": "Preview",
+        		"onAutoForward": "openPreview
+	/ Use 'postCreateCommand' to run commands after the container is created.
 	"postCreateCommand": "git lfs pull && npm ci",
Fill & Edit
Printed from Chase Personal OnlineJPMorgan Chase Bank, N.A. Member FDIC©2020 JPMorgan Chase & Co.Equal Opportunity Lender$135,276.49$135,276.49Available balancePresent balanceON HOLD(2)DateReasonExpiresAmountNov 16, 2020We've placed a hold on one or more electronic funds transfers or checks in your deposit account.Nov 25, 2020$1,339.00Nov 16, 2020We've placed a hold on one or more electronic funds transfers or checks in your deposit account.Nov 25, 2020$133,939.99Account activityHOWINGAll transactionsDateDescriptionTypeAmountBalancePendingHOLD REL MEM CRMisc. credit$1,339.00—HOLD REL MEM CRMisc. credit$133,939.99—Nov 16, 2020REMOTE ONLINE DEPOSIT # 1Deposit$1,339.00$135,276.49ATM CHECK DEPOSIT 11/16 4512 LEMMON AVE DALLAS TX(...0152)ATM deposit$133,939.99$133,937.49Nov 13, 2020NON-CHASE ATM FEE-INQFee−$2.50−$2.50You've reached the end of your account activity.CHASE SAVINGS (...7849)
 	// Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
